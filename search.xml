<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Github Actions持续集成 Docker构建并部署Node项目到云服务器</title>
      <link href="/ovugli/"/>
      <url>/ovugli/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><hr><p>在之前的文章<a href="https://1874.cool/roeayv">语雀云端写作 Hexo+Github Actions+COS 持续集成</a> 中，语雀<code>webhook</code>触发构建的流程如下：</p><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FmBBicekAEyyKQlzZSWZxgWjZ0Qn.jpeg"></p><p>而当时腾讯云函数对个人使用还是在一定条件下免费的，本着能白嫖就白嫖的心态就用它做中转服务调用了。结果从上个月开始，腾讯云函数涨价了，而且费用也不便宜，我看了下账单，一个月差不多要快 10 块钱了，这我可忍不了。<br>所以就打算自己搭建一个<code>node</code>服务，自己调用<code>Github Actions</code>的<code>API</code>触发构建。流程如下：<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FiOZZFrZK2WNImXPudM_Eggi4hCJ.jpeg"></p><h1 id="部署流程"><a href="#部署流程" class="headerlink" title="部署流程"></a>部署流程</h1><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FpafgH_mmn7S7Xdf2eI_tZuZUpco.jpeg"></p><h1 id="搭建-Node-服务"><a href="#搭建-Node-服务" class="headerlink" title="搭建 Node 服务"></a>搭建 Node 服务</h1><p>搭建记录请看<a href="https://1874.cool/zbbxv0">Midway 项目搭建</a></p><h1 id="开通腾讯云容器镜像服务（可选）"><a href="#开通腾讯云容器镜像服务（可选）" class="headerlink" title="开通腾讯云容器镜像服务（可选）"></a>开通腾讯云容器镜像服务（可选）</h1><p>目前腾讯云容器镜像服务对个人还是免费的，我就先用这个，不免费了再说。也可以直接推送到<code>Docker Hub</code></p><blockquote><p>实操过程中发现：由于 Github Actions 使用的机器都是美国的，所以选择在香港/海外新建会快很多很多！<img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fi5ZyPntP28VPpJP66tQDzSirGxn.png"></p></blockquote><p>具体开通流程和快速入门请直接移步<a href="https://cloud.tencent.com/document/product/1141/63910" target="_blank" rel="noopener">腾讯云容器镜像服务个人版快速入门</a></p><h1 id="配置-Github-Actions"><a href="#配置-Github-Actions" class="headerlink" title="配置 Github Actions"></a>配置 Github Actions</h1><h2 id="编写-workflows-流程"><a href="#编写-workflows-流程" class="headerlink" title="编写 workflows 流程"></a>编写 workflows 流程</h2><p>在 Node 项目的根目录新建<code>.github/workflows/docker-build-deploy.yml</code>文件</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Docker Image CI &amp; CD<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 在直接推送/pr到Master分支时触发</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"master"</span><span class="token punctuation">]</span>  <span class="token key atrule">pull_request</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"master"</span><span class="token punctuation">]</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v3      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 构建镜像        <span class="token comment" spellcheck="true"># 选择推送到香港的镜像仓库会快很多</span>        <span class="token key atrule">run</span><span class="token punctuation">:</span> docker build <span class="token punctuation">-</span><span class="token punctuation">-</span>file Dockerfile <span class="token punctuation">-</span><span class="token punctuation">-</span>tag hkccr.ccs.tencentyun.com/命名空间/镜像名称 .      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 登录腾讯的 docker 镜像仓库        <span class="token key atrule">run</span><span class="token punctuation">:</span> echo "$<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.TENCENT_REGISTRY_PASSWORD <span class="token punctuation">}</span><span class="token punctuation">}</span>" <span class="token punctuation">|</span> docker login hkccr.ccs.tencentyun.com <span class="token punctuation">-</span><span class="token punctuation">-</span>username=用户名 <span class="token punctuation">-</span><span class="token punctuation">-</span>password<span class="token punctuation">-</span>stdin      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 把构建好的镜像推送到腾讯仓库        <span class="token key atrule">run</span><span class="token punctuation">:</span> docker push hkccr.ccs.tencentyun.com/命名空间/镜像名称  <span class="token key atrule">deploy</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 初始化ssh并执行sh启动镜像        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          eval $(ssh-agent -s)          echo "${{secrets.SERVER_SSH_PRIV_KEY}}" > deploy.key          mkdir -p ~/.ssh          chmod 0600 deploy.key          ssh-add deploy.key          echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config          ssh root@${{secrets.SERVER_IP}} "cd /home/deploy &amp;&amp; sh deploy.sh"</span>    <span class="token comment" spellcheck="true"># 在build结束后才会运行deploy</span>    <span class="token key atrule">needs</span><span class="token punctuation">:</span> build</code></pre><h2 id="Github-Secrets"><a href="#Github-Secrets" class="headerlink" title="Github Secrets"></a>Github Secrets</h2><p>上面 yml 文件中的 <code>secrets.XXX</code> 是一些秘钥，<code>Github</code> 为了保护你的秘钥，提供了使用变量的办法，我们可以在仓库的 <code>Settings -&gt; Secrets </code>中定义变量，然后按照 <code>$</code> 的格式，即可拿到变量值。</p><h2 id="连接云服务器"><a href="#连接云服务器" class="headerlink" title="连接云服务器"></a>连接云服务器</h2><p><code>secrets.SERVER_SSH_PRIV_KEY</code> 是用来访问远程服务器的私钥，具体：</p><ul><li>在云服务器生成密钥对</li><li>在远程服务器上添加公钥 (将公钥添加到服务器的 ~/.ssh/authorized_keys 文件中)</li><li>在 Github 仓库设置私钥 (Settings &gt; Secrets)</li></ul><p><code>secrets.SERVER_IP</code> 是远程服务器地址</p><h2 id="deploy-sh"><a href="#deploy-sh" class="headerlink" title="deploy.sh"></a>deploy.sh</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#/bin/bash</span>docker stop 镜像名称docker <span class="token function">rm</span> 镜像名称docker rmi hkccr.ccs.tencentyun.com/命名空间/镜像名称docker pull hkccr.ccs.tencentyun.com/命名空间/镜像名称docker run -d --name 镜像名称 -p 7001:7001 hkccr.ccs.tencentyun.com/命名空间/镜像名称</code></pre><h1 id="配置-DockerFile"><a href="#配置-DockerFile" class="headerlink" title="配置 DockerFile"></a>配置 DockerFile</h1><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>在 Node 项目的根目录新建<code>Dockerfile</code>文件</p><pre class=" language-dockerfile"><code class="language-dockerfile">FROM node:12 AS buildWORKDIR /appCOPY . .RUN npm installRUN npm run buildFROM node:12-alpineWORKDIR /appCOPY --from=build /app/dist ./distCOPY --from=build /app/bootstrap.js ./COPY --from=build /app/package.json ./RUN apk add --no-cache tzdataENV TZ="Asia/Shanghai"# 只安装生产的包RUN npm install --production# 暴露端口号EXPOSE 7001# 使用pm2启动项目RUN npm install pm2 -gCMD [ "pm2-runtime", "npm", "--", "start" ]</code></pre><p>上述相关的 npm 命令需要根据自己实际命令修改。</p><h2 id="dockerignore"><a href="#dockerignore" class="headerlink" title=".dockerignore"></a>.dockerignore</h2><p>在 Node 项目的根目录新建<code>.dockerignore</code>文件，可以将<code>.gitignore</code>中的配置复制过去</p><h1 id="Done！"><a href="#Done！" class="headerlink" title="Done！"></a>Done！</h1><p>接下来就可以推送代码到 master 分支，就会自动部署项目了！<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FgtBByqByzlP4sMg5Ibn8-8xhuLX.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> CI/CD </tag>
            
            <tag> Node </tag>
            
            <tag> Github Actions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Midway项目搭建记录</title>
      <link href="/zbbxv0/"/>
      <url>/zbbxv0/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><hr><p>在<a href="https://1874.cool/roeayv">语雀云端写作 Hexo+Github Actions+COS 持续集成</a>中我需要一个 Node 项目来作为中转站替换原来的腾讯云函数，调用<code>Github Actions</code>的接口触发构建流程，这里记录下搭建过程。</p><h1 id="初始化-Midway"><a href="#初始化-Midway" class="headerlink" title="初始化 Midway"></a>初始化 Midway</h1><blockquote><p><a href="https://www.midwayjs.org/docs/intro" target="_blank" rel="noopener">Midway 官方文档</a></p></blockquote><p>我基本都是按照官方文档来搭建的，初始化的过程也很简单，初始化之后把不需要用到的文件删除，基本不用配置就可以直接就可以写代码了。</p><h1 id="接口流程"><a href="#接口流程" class="headerlink" title="接口流程"></a>接口流程</h1><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FgaQOwsx7NXJi2YH3J7Gb_k9mrUS.jpeg"></p><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h1><h2 id="GithubController"><a href="#GithubController" class="headerlink" title="GithubController"></a>GithubController</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Controller<span class="token punctuation">,</span> Inject<span class="token punctuation">,</span> Post <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@midwayjs/decorator"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Context <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"egg"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> GithubService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../service/github"</span><span class="token punctuation">;</span>@<span class="token function">Controller</span><span class="token punctuation">(</span><span class="token string">"/github"</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">GithubController</span> <span class="token punctuation">{</span>  @<span class="token function">Inject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  ctx<span class="token punctuation">:</span> Context<span class="token punctuation">;</span>  @<span class="token function">Inject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  githubService<span class="token punctuation">:</span> GithubService<span class="token punctuation">;</span>  @<span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">"/action/:repo/:event_type"</span><span class="token punctuation">)</span>  async <span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> repo<span class="token punctuation">,</span> event_type <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>params<span class="token punctuation">;</span>    <span class="token keyword">return</span> await <span class="token keyword">this</span><span class="token punctuation">.</span>githubService<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span>repo<span class="token punctuation">,</span> event_type<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>根据语雀的<a href="https://www.yuque.com/yuque/developer/doc-webhook#4da6e742" target="_blank" rel="noopener">webhooks 介绍</a>，语雀的回调函数是一个 Post 接口<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FiolJEozqoDDhLhUp3ebRyctkYD7.png"><br>所以可以有以下两种处理方法传参数</p><ul><li>将需要的参数拼接在调用链接上，通过<code>@Query()</code>拿到参数</li><li>利用动态路由传参数，通过<code>this.ctx.params</code>拿到参数</li></ul><h2 id="GithubService"><a href="#GithubService" class="headerlink" title="GithubService"></a>GithubService</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Provide <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@midwayjs/decorator"</span><span class="token punctuation">;</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span>@<span class="token function">Provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">GithubService</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 触发Github Actions   * @param repo   * @param event_type   */</span>  async <span class="token function">action</span><span class="token punctuation">(</span>repo<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> event_type<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> await axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>        <span class="token template-string"><span class="token string">`https://api.github.com/repos/LetTTGACO/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>repo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/dispatches`</span></span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> event_type <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>            Accept<span class="token punctuation">:</span> <span class="token string">"*/*"</span><span class="token punctuation">,</span>            Authorization<span class="token punctuation">:</span> <span class="token string">"token Github访问Token"</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">204</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"This is OK!"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> e<span class="token punctuation">.</span>message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="Done"><a href="#Done" class="headerlink" title="Done!"></a>Done!</h1><p>大功告成，接下来就是构建和部署阶段了，详情请看<a href="https://1874.cool/ovugli">Github Actions 持续集成 Docker 构建并部署 Node 项目到云服务器</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> midway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用github actions自动化发布npm</title>
      <link href="/qzmpp5/"/>
      <url>/qzmpp5/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><hr><p>这篇文章我其实最想解决的是【如何简单快速打造一个能同时导出<code>cjs</code>和<code>esm</code>的<code>npm</code>包】。在看了网上的各种教程，都没我想要的。要么就是利用<code>rollup</code>来构建，但是配置问题和兼容性问题又很棘手。最后是在看了<a href="https://github.com/typestack/typedi" target="_blank" rel="noopener">typedi</a>的代码仓库，发现很适合我，就借鉴过来了。<br>因为我的<code>npm</code>包是在<code>node</code>端使用的，所以只需要<code>cjs</code>和 esm<code>类型</code>的包就行，而<code>ts-node</code>就刚刚好能满足我的需求，所以我也没有使用其他构建工具。</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>项目关键文件如下：</p><pre class=" language-json"><code class="language-json">node-agile-client|--.github|  |--workflows|  |    |--cd.yml|--build|  |--cjs|  |    |--index.js|  |--esm5|  |    |--index.js|  |--types|  |    |--index.d.ts|  |--package.json|--src|  |--index.ts|--package.json|--tsconfig.json|--tsconfig.esm5.json|--tsconfig.cjs.json|--tsconfig.types.json</code></pre><ul><li>.github：github actions 配置文件</li><li>build：文件夹是打包后的产物，也是发不到 npm 上的文件夹，仓库 src 的文件是不会上传到 npm 的<ul><li>cjs：CommonJS 模块的代码</li><li>esm5：ES Modules 模块的代码</li><li>types：类型声明文件</li><li>package.json：对 npm 包的定义说明</li></ul></li><li>src：项目文件代码</li><li>package.json：对项目文件的定义说明及命令行操作</li><li>tsconfig.json：ts 编译配置主体文件</li><li>tsconfig.esm5.json：编译成 ems5 的编译配置</li><li>tsconfig.cjs.json：编译成 cjs 的编译配置</li><li>tsconfig.types.json：编译成类型声明文件的编译配置</li></ul><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>这是一份最终配置，具体代码：<a href="https://github.com/LetTTGACO/node-agile-client" target="_blank" rel="noopener">node-agile-client</a></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"node-agile-client"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.0.3"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"AgileConfig的node客户端"</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"./cjs/index.js"</span><span class="token punctuation">,</span>  <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"./esm5/index.js"</span><span class="token punctuation">,</span>  <span class="token property">"typings"</span><span class="token operator">:</span> <span class="token string">"./types/index.d.ts"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"prebuild"</span><span class="token operator">:</span> <span class="token string">"rimraf build"</span><span class="token punctuation">,</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"npm run build:cjs &amp;&amp; npm run build:esm5 &amp;&amp; npm run build:types"</span><span class="token punctuation">,</span>    <span class="token property">"build:esm5"</span><span class="token operator">:</span> <span class="token string">"tsc --project tsconfig.esm5.json"</span><span class="token punctuation">,</span>    <span class="token property">"build:cjs"</span><span class="token operator">:</span> <span class="token string">"tsc --project tsconfig.cjs.json"</span><span class="token punctuation">,</span>    <span class="token property">"build:types"</span><span class="token operator">:</span> <span class="token string">"tsc --project tsconfig.types.json"</span><span class="token punctuation">,</span>    <span class="token property">"postbuild"</span><span class="token operator">:</span> <span class="token string">"cp LICENSE build/LICENSE &amp;&amp; cp README.md build/README.md &amp;&amp; cp package.json build/package.json"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"repository"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"git"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"git+https://github.com/LetTTGACO/node-agile-client.git"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"agile"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"配置中心"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token property">"bugs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://github.com/LetTTGACO/node-agile-client/issues"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"homepage"</span><span class="token operator">:</span> <span class="token string">"https://github.com/LetTTGACO/node-agile-client#readme"</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"axios"</span><span class="token operator">:</span> <span class="token string">"^0.26.1"</span><span class="token punctuation">,</span>    <span class="token property">"fs-extra"</span><span class="token operator">:</span> <span class="token string">"^10.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"md5"</span><span class="token operator">:</span> <span class="token string">"^2.3.0"</span><span class="token punctuation">,</span>    <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"^0.12.7"</span><span class="token punctuation">,</span>    <span class="token property">"ws"</span><span class="token operator">:</span> <span class="token string">"^8.5.0"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"@types/fs-extra"</span><span class="token operator">:</span> <span class="token string">"^9.0.13"</span><span class="token punctuation">,</span>    <span class="token property">"@types/md5"</span><span class="token operator">:</span> <span class="token string">"^2.3.2"</span><span class="token punctuation">,</span>    <span class="token property">"@types/ws"</span><span class="token operator">:</span> <span class="token string">"^8.5.3"</span><span class="token punctuation">,</span>    <span class="token property">"rimraf"</span><span class="token operator">:</span> <span class="token string">"^3.0.2"</span><span class="token punctuation">,</span>    <span class="token property">"ts-node"</span><span class="token operator">:</span> <span class="token string">"^10.8.1"</span><span class="token punctuation">,</span>    <span class="token property">"typescript"</span><span class="token operator">:</span> <span class="token string">"^4.7.4"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>因为这个<code>package.json</code>最后会被拷贝到<code>build</code>文件夹中去，所以以下配置都是基于<code>build</code>目录下的配置选项</p><table><thead><tr><th>关键参数</th><th>值</th><th>备注</th></tr></thead><tbody><tr><td>main</td><td>./cjs/index.js</td><td>commonjs 的入口文件</td></tr><tr><td>module</td><td>./esm5/index.js</td><td>esmodule 的入口文件</td></tr><tr><td>typings</td><td>./types/index.d.ts</td><td>类型声明的入口文件</td></tr></tbody></table><h2 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h2><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"commonjs"</span><span class="token punctuation">,</span>    <span class="token property">"moduleResolution"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es2018"</span><span class="token punctuation">,</span>    <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"es2018"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"build/node"</span><span class="token punctuation">,</span>    <span class="token property">"rootDirs"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"inlineSources"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"removeComments"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"esModuleInterop"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"experimentalDecorators"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"emitDecoratorMetadata"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"forceConsistentCasingInFileNames"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"build"</span><span class="token punctuation">,</span> <span class="token string">"node_modules"</span><span class="token punctuation">,</span> <span class="token string">"sample"</span><span class="token punctuation">,</span> <span class="token string">"**/*.spec.ts"</span><span class="token punctuation">,</span> <span class="token string">"test/**"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="tsconfig-cjs-json"><a href="#tsconfig-cjs-json" class="headerlink" title="tsconfig.cjs.json"></a>tsconfig.cjs.json</h2><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"./tsconfig.json"</span><span class="token punctuation">,</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"CommonJS"</span><span class="token punctuation">,</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"build/cjs"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="tsconfig-esm5-json"><a href="#tsconfig-esm5-json" class="headerlink" title="tsconfig.esm5.json"></a>tsconfig.esm5.json</h2><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"./tsconfig.json"</span><span class="token punctuation">,</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"ES2015"</span><span class="token punctuation">,</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"ES5"</span><span class="token punctuation">,</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"build/esm5"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="tsconfig-types-json"><a href="#tsconfig-types-json" class="headerlink" title="tsconfig.types.json"></a>tsconfig.types.json</h2><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"./tsconfig.json"</span><span class="token punctuation">,</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"declaration"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"emitDeclarationOnly"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"build/types"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="自动化发布"><a href="#自动化发布" class="headerlink" title="自动化发布"></a>自动化发布</h1><p>在项目根目录新建<code>.github/workflows/cd.yml</code>，并配置<code>github actions</code>，<code>secrets.NPM_PUBLISH_TOKEN</code>需要去<code>npm</code>官网生成<code>token</code>并配置到<code>github</code>仓库的<code>Actions secrets</code>中。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> CD<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">release</span><span class="token punctuation">:</span>    <span class="token key atrule">types</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>created<span class="token punctuation">]</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">publish</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> Publish to NPM    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v2        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"lts/*"</span>          <span class="token key atrule">registry-url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//registry.npmjs.org      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> npm ci <span class="token punctuation">-</span><span class="token punctuation">-</span>ignore<span class="token punctuation">-</span>scripts      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> npm run build<span class="token punctuation">:</span>cjs      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> npm run build<span class="token punctuation">:</span>esm5      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> npm run build<span class="token punctuation">:</span>types      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> cp LICENSE build/LICENSE      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> cp README.md build/README.md      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> jq 'del(.devDependencies) <span class="token punctuation">|</span> del(.scripts)' package.json <span class="token punctuation">></span> build/package.json      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> npm publish ./build        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token key atrule">NODE_AUTH_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.NPM_PUBLISH_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="大功告成！"><a href="#大功告成！" class="headerlink" title="大功告成！"></a>大功告成！</h1><p>经过以上配置，就可以在<code>github</code>创建<code>release</code>版本时触发<code>actions</code>，将<code>build</code>文件夹中的压缩包发布到<code>npm</code>了！</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github Actions </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为开源社区做贡献-开发AgileConfig的NodeJS客户端：node-agile-client</title>
      <link href="/wqx8a7/"/>
      <url>/wqx8a7/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><hr><p>其实一开始没打算要搞这玩意儿的，事情的起因还得从我同事开始说起。<br>同事利用空余时间，开发了一款表情包小程序和 App，里面有各种表情包可以下载，挺有意思，我也推荐了其他朋友使用。<br>然后我就琢磨着也搞个什么玩玩，前几天想到了一个点子，准备着手开发<code>Node</code>服务端时，想到有一些连接参数、可配置参数、账号密码什么的我又不想写死在代码里。因为公司用的是<code>Apollo</code>，一些可配置的参数是放在<code>Apollo</code>来管理的。再加上我问了下我同事，他的项目就是把这些东西写死在代码里的，他也觉得如果有一个配置中心来管理这些的话会方便很多。<br>但是<code>Apollo</code>过于复杂了，对于我这种小项目是有点过了，于是在<code>Github</code>搜索一圈之后，偶然发现了<a href="https://github.com/dotnetcore/AgileConfig" target="_blank" rel="noopener">AgileConfig</a>这个轻量级的配置中心，但可惜的是只有<code>C#</code>的客户端，其他语言的客户端都没有。于是我就抱着试一试的想法加了这个项目的 QQ 群，果然还没有人开发<code>nodejs</code>的客户端。<br>于是我的兴趣就来了，由于我以前有<code>Java</code>语言的基础，所以<code>C#</code>的代码勉强能读懂，所以结合着<code>C#</code>的客户端和与群主的交流，终于开发出了一个相对稳定的<code>nodejs</code>客户端：<a href="https://github.com/LetTTGACO/node-agile-client" target="_blank" rel="noopener">node-agile-client</a><br>就此分享下我的开发过程和源码逻辑。</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>配置中心听起来很高大上，其实说白了就是一个在线的数据库，客户端可以通过<code>http</code>请求去获取某个应用在某个环境下的<code>JSON</code>配置。所以我要做的就是通过<code>http</code>请求拿数据就完事，就是如此简单。<br>当然配置中心最核心的不只是能分应用分环境地存储数据，高可用也是其必不可少的能力。所以配置中心一般都是多节点分布式部署，客户端的代码大部分代码逻辑也是围绕着高可用去实现。<br><a href="https://github.com/dotnetcore/AgileConfig" target="_blank" rel="noopener">AgileConfig</a>服务端除了向外暴露获取配置的<code>http</code>接口，还提供了<code>websocket</code>长链接机制，当配置中心发生配置变更时会发送消息告诉客户端。</p><h1 id="基础工作原理流程图"><a href="#基础工作原理流程图" class="headerlink" title="基础工作原理流程图"></a>基础工作原理流程图</h1><p>于是我就构思了<a href="https://github.com/LetTTGACO/node-agile-client" target="_blank" rel="noopener">node-agile-client</a>的基础工作原理流程图：<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FnGZZCTPJNVUKA3cSKxwOv45nRzh.png"><br>我的想法是充分利用缓存，<code>node</code>使用端在需要时只需要读取本地的配置文件或者内存中的缓存即可拿到<code>json</code>文件。对于缓存的处理，如下图所示：<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fi902QOqP5_v6kgBr4U5XnKHf_As.jpeg"></p><h1 id="完整工作原理流程图"><a href="#完整工作原理流程图" class="headerlink" title="完整工作原理流程图"></a>完整工作原理流程图</h1><p>在完整的研究了<code>AgileConfig</code>的<code>C#</code>客户端原理之后，发现<code>AgileConfig</code>有以下几个功能点：</p><ul><li>多节点<code>http</code>访问</li><li>多节点<code>websocket</code>访问</li><li><code>websocket</code>心跳检测时会返回当前配置中心文件的<code>md5</code></li><li>手动更新配置时会通过<code>websocket</code>向客户端发送需要更新的消息</li><li>手动关闭连接时会通过<code>websocket</code>向客户端发送需要关闭连接的消息</li></ul><p>所以基于以上几个功能点，我画出了<code>node-agile-client</code>的完整工作原理流程图：<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fi8seFPwjcCvorcZxZY1A2bMTZz4.png"></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>接下来就到了代码实现的阶段，由于是第一次完整开发<code>npm</code>包，没啥经验，所以实现需求是第一要务，暂不考虑<code>npm</code>包的打包压缩、<code>TypeScript</code>支持等等功能。开发出来的包也并不适用于生产环境，待后期慢慢完善。</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><h2 id="源码逻辑"><a href="#源码逻辑" class="headerlink" title="源码逻辑"></a>源码逻辑</h2><p>先说明一下配置参数说明：</p><table><thead><tr><th>配置项名称</th><th>数据类型</th><th>配置项说明</th><th>必填</th><th>备注</th></tr></thead><tbody><tr><td>appid</td><td>string</td><td>应用 ID</td><td>是</td><td>对应后台管理中应用的<code>应用ID</code></td></tr><tr><td>secret</td><td>string</td><td>应用密钥</td><td>是</td><td>对应后台管理中应用的<code>密钥</code></td></tr><tr><td>nodes</td><td>string</td><td>应用配置节点</td><td>是</td><td>存在多个节点则使用逗号<code>,</code>分隔</td></tr><tr><td>env</td><td>string</td><td>配置中心的环境</td><td>否</td><td>通过此配置决定拉取哪个环境的配置信息；如果不配置，服务端会默认返回第一个环境的配置</td></tr><tr><td>name</td><td>string</td><td>连接客户端的自定义名称</td><td>否</td><td>方便在 agile 配置中心后台对当前客户端进行查阅与管理</td></tr><tr><td>tag</td><td>string</td><td>连接客户端自定义标签</td><td>否</td><td>方便在 agile 配置中心后台对当前客户端进行查阅与管理</td></tr><tr><td>httptimeout</td><td>number</td><td>http 请求超时时间</td><td>否</td><td>配置 client 发送 http 请求的时候的超时时间，默认 100000(100 秒)</td></tr><tr><td>debug</td><td>boolean</td><td>debug 模式</td><td>否</td><td>打印更多信息</td></tr></tbody></table><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"axios"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs-extra"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// utils</span><span class="token keyword">const</span> <span class="token punctuation">{</span>  generateAuthorization<span class="token punctuation">,</span>  transformConfig<span class="token punctuation">,</span>  getTime<span class="token punctuation">,</span>  generateUrl<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./utils"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> WS <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./ws"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// const</span><span class="token keyword">const</span> <span class="token punctuation">{</span> WEBSOCKET_ACTION <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./const/ws"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 配置缓存</span><span class="token keyword">let</span> agileConfigCache<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 初始化agile配置 * @param options * @returns {Promise&lt;void>} */</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> appid<span class="token punctuation">,</span> secret<span class="token punctuation">,</span> env<span class="token punctuation">,</span> nodes <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span>  <span class="token keyword">const</span> beginTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 生成请求头</span>  <span class="token comment" spellcheck="true">// 请求http/websocket需要特定的请求头，详情看utils/auth.js文件</span>  options<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token function">generateAuthorization</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化agile配置</span>    <span class="token keyword">await</span> <span class="token function">initAgileConfig</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>      <span class="token template-string"><span class="token string">`【agile】: 初始化agile服务成功，耗时: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms。`</span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      message<span class="token punctuation">:</span> <span class="token string">"【agile】: 初始化agile失败"</span><span class="token punctuation">,</span>      error<span class="token punctuation">:</span> err<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 退出进程</span>    process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 初始化agile配置 * @param options * @returns {Promise&lt;*|undefined>} */</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">initAgileConfig</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// websocket长连接</span>  <span class="token comment" spellcheck="true">// 这里websocket和http请求不是阻塞的，防止http/ws其中一个连接失败时阻塞流程</span>  <span class="token function">getNotifications</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> <span class="token function">getAgileConfigAsync</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * websockt连接 * @param options */</span><span class="token keyword">function</span> <span class="token function">getNotifications</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 生成ws连接的Url</span>  <span class="token keyword">const</span> wsPaths <span class="token operator">=</span> <span class="token function">generateUrl</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 递归调用，用于多节点保证可用性</span>  <span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WS</span><span class="token punctuation">(</span>wsPaths<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        debug<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>debug<span class="token punctuation">,</span>        wsOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span> headers<span class="token punctuation">:</span> options<span class="token punctuation">.</span>headers <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ws<span class="token punctuation">.</span><span class="token function">websocketOnOpen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>          <span class="token template-string"><span class="token string">`【agile】: websocket连接成功，连接地址：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>wsPaths<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ws<span class="token punctuation">.</span><span class="token function">websocketOnMessage</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Action"</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 服务端更新了</span>          <span class="token keyword">const</span> <span class="token punctuation">{</span> Action<span class="token punctuation">:</span> action <span class="token punctuation">}</span> <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">===</span> WEBSOCKET_ACTION<span class="token punctuation">.</span>RELOAD<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 不使用本地缓存，直接发起http请求更新缓存</span>            <span class="token function">getAgileConfigAsync</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">===</span> WEBSOCKET_ACTION<span class="token punctuation">.</span>OFFLINE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 关闭ws连接</span>            ws<span class="token punctuation">.</span><span class="token function">removeSocket</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">!==</span> <span class="token string">"0"</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"V:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 心跳检测时/服务端主动关闭连接时，同步配置</span>          <span class="token comment" spellcheck="true">// 对比本地缓存中的MD5和心跳检测时服务端返回的MD5</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!==</span> agileConfigCache<span class="token punctuation">.</span>md5<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"【agile】: 配置更新，即将重新读取配置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 不使用本地缓存，直接发起http请求更新缓存</span>            <span class="token function">getAgileConfigAsync</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ws<span class="token punctuation">.</span><span class="token function">websocketOnError</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          message<span class="token punctuation">:</span> <span class="token string">"【agile】: websocket连接发生错误，正在尝试重新连接..."</span><span class="token punctuation">,</span>          error<span class="token punctuation">:</span> err<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 连接下一个节点，尝试尝试重新连接ws</span>        <span class="token keyword">throw</span> err<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ws<span class="token punctuation">.</span><span class="token function">websocketOnClose</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"【agile】: websocket断开连接，将会读取本地缓存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 初始化失败时，更换ws节点</span>      index <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> wsPaths<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 递归调用，连接下一个节点</span>        <span class="token function">connect</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          url<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`【agile】：请求地址：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>wsPaths<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>          message<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`【agile】：websocket连接失败，将会读取本地缓存`</span></span><span class="token punctuation">,</span>          error<span class="token punctuation">:</span> err<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">connect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 异步获取agile配置 * @param options * @param useCache 是否使用缓存 * @returns {Promise&lt;*>} */</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getAgileConfigAsync</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> useCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>useCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 优先从缓存中获取信息</span>    <span class="token keyword">const</span> beginTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> agileConfig <span class="token operator">=</span> <span class="token function">getAgileConfigFromCache</span><span class="token punctuation">(</span>beginTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>agileConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> agileConfig<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"【agile】: 开始初始化agile配置(通过接口获取)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 从接口中获取</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    agileConfigCache <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getAgileConfigPromise</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 写入本地文件</span>    fs<span class="token punctuation">.</span><span class="token function">writeJsonSync</span><span class="token punctuation">(</span>      path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./agileConfig.json"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      agileConfigCache    <span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`【agile】: 更新缓存成功, 更新时间：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> agileConfigCache<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      message<span class="token punctuation">:</span> <span class="token string">"【agile】: 更新缓存失败，将会读取本地缓存"</span><span class="token punctuation">,</span>      error<span class="token punctuation">:</span> err<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> err<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 从缓存中获取agile配置 * @param beginTime * @returns {*} */</span><span class="token keyword">function</span> <span class="token function">getAgileConfigFromCache</span><span class="token punctuation">(</span>beginTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>agileConfigCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> agileConfigCache<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> cacheFile <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./agileConfig.json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> isHave <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span>cacheFile<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"【agile】: 开始初始化agile配置(通过缓存获取)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isHave<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 从本地文件读取配置</span>      agileConfigCache <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readJsonSync</span><span class="token punctuation">(</span>        path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./agileConfig.json"</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>agileConfigCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> agileConfigCache<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">return</span> agileConfigCache<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 从服务端获取配置并写入缓存 * @param options * @returns {Promise&lt;*>} */</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getAgileConfigPromise</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取http请求url</span>  <span class="token keyword">const</span> urlPaths <span class="token operator">=</span> <span class="token function">generateUrl</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> agileConfigRes<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 递归调用，适配多节点获取配置</span>  <span class="token keyword">const</span> getConfig <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`【agile】：接口请求地址：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>urlPaths<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>urlPaths<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        timeout<span class="token punctuation">:</span> options<span class="token punctuation">.</span>httptimeout <span class="token operator">||</span> <span class="token number">100000</span><span class="token punctuation">,</span>        headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token operator">...</span>options<span class="token punctuation">.</span>headers<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      agileConfigRes <span class="token operator">=</span> <span class="token function">transformConfig</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      index <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> urlPaths<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 递归调用，连接下一个节点</span>        <span class="token keyword">await</span> <span class="token function">getConfig</span><span class="token punctuation">(</span>urlPaths<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          url<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`agile请求地址：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>urlPaths<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>          message<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`【agile】警告：获取agile配置失败,appid: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>options<span class="token punctuation">.</span>appid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>          error<span class="token punctuation">:</span> err<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> err<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> <span class="token function">getConfig</span><span class="token punctuation">(</span>urlPaths<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> agileConfigRes<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 同步获取Agile配置 * @returns {*} */</span><span class="token keyword">function</span> <span class="token function">getAgileConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>agileConfigCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      agileConfigCache <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readJsonSync</span><span class="token punctuation">(</span>        path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./agileConfig.json"</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>agileConfigCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"【agile】: 请确保agile初始化已完成！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> agileConfigCache<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span>init <span class="token operator">=</span> init<span class="token punctuation">;</span>exports<span class="token punctuation">.</span>getAgileConfig <span class="token operator">=</span> getAgileConfig<span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> WebSocket <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"ws"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">WS</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>socketUrl<span class="token punctuation">,</span> option<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>socketUrl <span class="token operator">=</span> socketUrl<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>option <span class="token operator">=</span> <span class="token punctuation">{</span>      onOpenAutoSendMsg<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      heartTime<span class="token punctuation">:</span> <span class="token number">30000</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 心跳时间间隔</span>      heartMsg<span class="token punctuation">:</span> <span class="token string">"ping"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 心跳信息,默认为'ping'</span>      isReconnect<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 是否自动重连</span>      reconnectTime<span class="token punctuation">:</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 重连时间间隔</span>      reconnectCount<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 重连次数 -1 则不限制</span>      openCallback<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 连接成功的回调</span>      closeCallback<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 关闭的回调</span>      messageCallback<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 消息的回调</span>      errorCallback<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 错误的回调</span>      debug<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//是否打开debug模式</span>      <span class="token operator">...</span>option<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>websocket <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sendPingInterval <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//心跳定时器</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>reconnectInterval <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重连定时器</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>activeLink <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//socket对象是否可用</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>disconnect <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//是否是服务端主动切断socket连接</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>reconnectNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重连次数限制</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 初始化   */</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>websocket<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>websocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>socketUrl<span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span>wsOptions<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">websocketOnOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">websocketOnMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">websocketOnError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">websocketOnClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 连接成功   */</span>  <span class="token function">websocketOnOpen</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>onopen <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span>debug<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c websocket链接成功"</span><span class="token punctuation">,</span> <span class="token string">"color:green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 连接成功时定时向发送消息</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sendPing</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span>heartTime<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span>heartMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span>onOpenAutoSendMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span>onOpenAutoSendMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> callback <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>disconnect <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token function">callback</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span>openCallback <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">&amp;&amp;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span><span class="token function">openCallback</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 发送数据   * @param message   */</span>  <span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>OPEN<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"没有连接到服务器，无法发送消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>websocket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 触发接收消息事件   * @param callback   */</span>  <span class="token function">websocketOnMessage</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 收到任何消息，重新开始倒计时心跳检测</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> callback <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">callback</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span>messageCallback <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">&amp;&amp;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span><span class="token function">messageCallback</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 连接错误   * @param callback   */</span>  <span class="token function">websocketOnError</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span>debug<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"连接发生错误"</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> callback <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">callback</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span>errorCallback <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">&amp;&amp;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span><span class="token function">errorCallback</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 连接关闭   */</span>  <span class="token function">websocketOnClose</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>onclose <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span>debug<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"socket连接关闭,关于原因:"</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sendPingInterval<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reconnectInterval<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeLink <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span>isReconnect<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onReconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>activeLink <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span>debug<span class="token punctuation">)</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c websocket链接完全关闭"</span><span class="token punctuation">,</span> <span class="token string">"color:green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> callback <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">callback</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span>closeCallback <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">&amp;&amp;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span><span class="token function">closeCallback</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 连接事件   */</span>  <span class="token function">onReconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span>debug<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`非正常关闭,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span>reconnectTime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">毫秒后触发重连事件`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span>reconnectCount <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span>reconnectCount <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>reconnectNum    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>reconnectInterval <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reconnectNum<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span>debug<span class="token punctuation">)</span>          console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`正在准备第</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>reconnectNum<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">次重连`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span>reconnectTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>activeLink <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span>debug<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`已重连</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>reconnectNum<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">次仍然没有响应,取消重连`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reconnectInterval<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 移除socket并关闭   */</span>  <span class="token function">removeSocket</span><span class="token punctuation">(</span>disconnect<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>activeLink <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>disconnect <span class="token operator">=</span> disconnect<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>websocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 心跳机制   * @param time   * @param ping   */</span>  <span class="token function">sendPing</span><span class="token punctuation">(</span>time <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">,</span> ping <span class="token operator">=</span> <span class="token string">"ping"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sendPingInterval<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>ping<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sendPingInterval <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>ping<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 返回websocket实例   * @returns {null}   */</span>  <span class="token function">getWebsocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>websocket<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 查看连接状态   */</span>  <span class="token function">getActiveLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      activeLink<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activeLink<span class="token punctuation">,</span>      disconnect<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>disconnect<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i node-agile-client</code></pre><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> init <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"node-agile-client"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  appid<span class="token punctuation">:</span> <span class="token string">"app"</span><span class="token punctuation">,</span>  secret<span class="token punctuation">:</span> <span class="token string">"xxx"</span><span class="token punctuation">,</span>  node<span class="token punctuation">:</span> <span class="token string">"http://192.168.1.1,http://192.168.1.2"</span><span class="token punctuation">,</span>  env<span class="token punctuation">:</span> <span class="token string">"DEV"</span><span class="token punctuation">,</span>  tag<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  name<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  httptimeout<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>  debug<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="获取配置"><a href="#获取配置" class="headerlink" title="获取配置"></a>获取配置</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> getAgileConfig <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"node-agile-client"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> token<span class="token punctuation">,</span> url <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getAgileConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="持续完善中…"><a href="#持续完善中…" class="headerlink" title="持续完善中….."></a>持续完善中…..</h1>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS开发环境治理-卸载nvm/node并重新安装</title>
      <link href="/is8lw3/"/>
      <url>/is8lw3/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><hr><p>最近在调试开发环境的时候，<code>node</code>环境各种问题，索性全部重新安装一次，这里记录下整个安装过程。</p><h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><h2 id="卸载-nvm"><a href="#卸载-nvm" class="headerlink" title="卸载 nvm"></a>卸载 nvm</h2><p>当我们直接在终端输入<code>nvm</code>时，提示告诉我们，当卸载<code>nvm</code>时还需要取环境变量中将相关的变量全部删除才行。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FlfNndBLq_OVgSi11jH36W2r-n-3.png"></p><ol><li>删除<code>～/.nvm</code>文件夹</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">rm</span> -rf ~/.nvm</code></pre><ol start="2"><li>如果有以下文件，依次用文本编辑器打开，并删除其中的 nvm 相关的变量</li></ol><ul><li><code>~/.profile</code></li><li><code>~/.bash_profile</code></li><li><code>~/.zshrc</code></li><li><code>~/.bashrc</code></li></ul><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FnEHSYHDcKow3IZtIdWH7hrFdVQy.png"></p><h2 id="卸载-node、yarn、npm"><a href="#卸载-node、yarn、npm" class="headerlink" title="卸载 node、yarn、npm"></a>卸载 node、yarn、npm</h2><p>检查以下目录，将<code>node</code>、<code>yarn</code>、<code>npm</code>相关的文件和文件夹全部删除</p><ul><li><code>~/</code></li><li><code>/usr/local/bin</code></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装-node（可选）"><a href="#安装-node（可选）" class="headerlink" title="安装 node（可选）"></a>安装 node（可选）</h2><p>由于项目中经常会使用<code>git hooks</code>来规范代码，而其脚本指定的<code>node</code>地址一般指向的是<code>/usr/local/bin/node</code>，如果你使用<code>nvm</code>管理<code>node</code>版本的话，<code>node</code>地址一般是<code>/Users/fangpengfei/.nvm/versions/node/v12.22.12/bin/node</code>，所以在运行时可能会报错<code>node command not found</code>。而我自己用的是<code>WebStorm</code>，就有这个问题。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FrqJL1Fp9eHIZXC8eNYbEkrnPtZt.png"><br>解决办法有两种：</p><ol><li>建立软链接，将<code>nvm</code>中的<code>node</code>指向<code>/usr/local/bin/node</code>，相当于创建了一个快捷方式。</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">ln</span> -s /Users/fangpengfei/.nvm/versions/node/v12.22.12/bin/node /usr/local/bin/node</code></pre><blockquote><p>但是这种建立软链方式可能会有个问题：用户对<code>/usr/local/bin</code>文件夹的访问权限不够（即使使用了<code>sudo</code>），这就是另一个问题了，可以谷歌一下，这里不再赘述。</p></blockquote><ol start="2"><li><strong>先从官网安装包安装</strong><code>node</code><strong>（推荐）</strong></li></ol><p>因为安装包会直接将<code>node</code>安装在<code>/usr/local/bin/node</code>中，这样系统也有了一份<code>node</code>。值得注意的是，这里我还建议可以在未安装<code>nvm</code>前，先全局安装<code>yarn</code>和<code>pnpm</code>（需要的话），这样后面也不需要将<code>nvm</code>中的<code>yarn</code>软链到<code>/usr/local/bin/yarn</code>上。</p><h2 id="安装-nvm"><a href="#安装-nvm" class="headerlink" title="安装 nvm"></a>安装 nvm</h2><p>当然你也可以直接安装<code>nvm</code>，利用<code>nvm</code>管理<code>node</code>版本，后续如果出现上述问题，再用软链方式解决就行。<br>进入<code>nvm</code>的<a href="https://github.com/nvm-sh/nvm#install--update-script=" target="_blank" rel="noopener">github</a>官网，用<code>curl</code>安装<code>nvm</code></p><pre class=" language-bash"><code class="language-bash">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh <span class="token operator">|</span> <span class="token function">bash</span></code></pre><p>利用<code>nvm</code>安装<code>node</code>，这里我从官网安装的<code>node</code>版本是<code>v16.14.2</code>，所以<code>nvm</code>我再装一个<code>v12</code>版本的，并且设置为<code>default</code>版本以应对大部分项目的<code>node</code>版本要求。</p><pre class=" language-bash"><code class="language-bash">nvm <span class="token function">install</span> 12nvm <span class="token function">alias</span> default 12</code></pre><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FuB-VClzE71G3G6Nr7YA7qRZgY1e.png"></p><h1 id="大功告成！"><a href="#大功告成！" class="headerlink" title="大功告成！"></a>大功告成！</h1>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员必备——Mac效率工具Alfred Workflows配置</title>
      <link href="/rm057k/"/>
      <url>/rm057k/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><hr><p>最近发现<code>Alfred</code>简直不要太好用，快速打开网址功能（<code>Web Search</code>）在工作中使用起来行云流水，再也不用去一堆标签中寻找常用的网址。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fv_hSWNtWTOroC6OS4YOH23qjov0.png"><br>但是在项目开发过程中，经常需要打开或运行各种项目，所以需要经常使用<code>iTerm</code>或者<code>IDE</code>进入到各种项目文件夹中。在<code>VSCode</code>中，大家经常会使用<code>code</code>命令打开项目，再配合环境变量的别名设置，使用起来很方便。但是！我是忠诚的<code>WebStorm</code>党派，每次打开项目都得先打开应用然后找到需要打开的项目（不过后来发现，<code>WebStorm</code>其实也有命令行启动器，效果也一样）。但是这么做也有一个痛点，就是需要事先配置环境变量的别名才能做到快速打开。<br>最近一琢磨，可以利用<code>Aflfed</code>的<code>Workflows</code>功能去尝试一下，于是真被我搞出来了，这里记录一下。</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="Open-in-WebStorm"><a href="#Open-in-WebStorm" class="headerlink" title="Open in WebStorm"></a>Open in WebStorm</h2><p>用<code>WebStrom</code>打开项目。通过<code>code</code>命令打开指定目录下的文件夹，快速打开项目。效果如下：<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/ljMKIzYLU9Vg0ZDdlgkVUc2TAFkL.gif"></p><h3 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h3><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fi1CSGPgbhxcEmVJsWkhTRKofLx0.png"></p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><ol><li>右下角新建一个<code>Blank Workflow</code>，配置如下：</li></ol><p>注意<code>Bundle id</code>必须是唯一的才行。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FkbsFFLjrHAiiyFhMyAnsYxAG1cu.png"></p><ol start="2"><li>右键新增一个<code>File Filter</code>，配置如下：</li></ol><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FtNswxM5ZqzKXFXYXRPMO5gdQMc4.png"><br><code>Basic Setup</code>基础设置。</p><ul><li>Keyword: code</li><li>with space: true</li><li>Placeholder Titile: Open in WebStorm</li><li>Placeholder Subtext: 请继续输入以打开项目</li><li>File Types: 文件类型，随便拖一个文件夹进去表示只识别文件夹，过滤掉文件</li></ul><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fteyhe06uV8m5mE7wZoNN6IJ-GE1.png"><br><code>Scope</code>搜索范围</p><ul><li>Search Scope: 指定搜索范围，将目录拖拽进去即可</li></ul><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FgE6bMn1YgtGzP1bkxhMhdRUvGn6.png"><br><code>Fields</code>和<code>Limit and Sort</code>保持不变，可以根据自己的习惯修改</p><ol start="3"><li>左键单击并选择添加<code>Actions-Run Script</code>，配置如下：</li></ol><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FusgOROVeGtM5HvHHey1GxHOKdxL.png"></p><ul><li>Language: /bin/zsh 终端，也可以选择/bin/bash 终端</li><li>with input as {query}: true</li><li>running instances: Sequentially</li><li>Script: /usr/local/bin/wstorm “{query}”</li></ul><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fj3KjVMT_TxIJCWRGGZdcplCQViA.png"><br>注意：使用<code>/usr/local/bin/wstorm</code>命令需要在<code>WebStorm</code>中开启工具-创建命令行启动器，配置脚本位置为<code>/usr/local/bin</code>，并配置脚本命令为<code>wstorm</code>。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FiyIJ9N-DdDJK4NvGJwCwO_EqjeW.png"></p><h2 id="Open-in-iTerm"><a href="#Open-in-iTerm" class="headerlink" title="Open in iTerm"></a>Open in iTerm</h2><p>从<code>iTerm</code>中打开文件夹。通过<code>cd</code>命令进入指定目录下的文件夹，快速打开项目并运行。效果如下：<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/ltjnpxJnEnmaDsxBBb2Q3M11U_tJ.gif"></p><h3 id="运行流程-1"><a href="#运行流程-1" class="headerlink" title="运行流程"></a>运行流程</h3><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FlehoM7bdsPdu33pG4_DfRDM06wl.png"></p><h3 id="设置-1"><a href="#设置-1" class="headerlink" title="设置"></a>设置</h3><ol><li>新建一个<code>Blank workflow</code>，配置如下：</li></ol><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FoiKddQ7QD7GegR1SoQ3Em0xGpwT.png"></p><ol start="2"><li>新增<code>File Filter</code>，配置如下：</li></ol><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fltm6hEMqabbF4xluHh9ph0HYpoG.png"></p><ol start="3"><li>左键单击并选择添加 Actions-Run NSAppleScript，配置如下：</li></ol><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FoE5xUh8YN6K2pZSd6a976xz5KF_.png"></p><pre><code>-- For the latest version:-- https://github.com/vitorgalvao/custom-alfred-iterm-scripts-- Set this property to true to always open in a new windowproperty open_in_new_window : false-- Set this property to false to reuse current tabproperty open_in_new_tab : true-- Handlerson new_window()tell application &quot;iTerm&quot; to create window with default profileend new_windowon new_tab()tell application &quot;iTerm&quot; to tell the first window to create tab with default profileend new_tabon call_forward()tell application &quot;iTerm&quot; to activateend call_forwardon is_running()application &quot;iTerm&quot; is runningend is_runningon has_windows()if not is_running() then return falseif windows of application &quot;iTerm&quot; is {} then return falsetrueend has_windowson send_text(custom_text)tell application &quot;iTerm&quot; to tell the first window to tell current session to write text custom_textend send_text-- Mainon alfred_script(query)if has_windows() thenif open_in_new_window thennew_window()else if open_in_new_tab thennew_tab()else-- Reuse current tabend ifelse-- If iTerm is not running and we tell it to create a new window, we get two-- One from opening the application, and the other from the commandif is_running() thennew_window()elsecall_forward()end ifend if-- Make sure a window exists before we continue, or the write may failrepeat until has_windows()delay 0.01end repeatsend_text(query)call_forward()end alfred_script</code></pre><h1 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Alfred </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第五章 状态更新</title>
      <link href="/veh6b1/"/>
      <url>/veh6b1/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><hr>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 自顶向下学习React源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第五章 Diff算法</title>
      <link href="/veh6b1/"/>
      <url>/veh6b1/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>对于<code>update</code>的组件，<code>React</code>会将当前组件与该组件在上次更新时对应的<code>Fiber</code>节点比较（也就是俗称的<code>Diff</code>算法），将比较的结果生成新<code>Fiber</code>节点。</p><blockquote><p>你可以从<a href="https://zh-hans.reactjs.org/docs/reconciliation.html#the-diffing-algorithm" target="_blank" rel="noopener">这里</a>看到 Diff 算法的介绍。</p></blockquote><p>一个 DOM 节点在某一时刻最多会有 4 个节点和他相关。</p><ol><li><code>current Fiber</code>。如果该<code>DOM</code>节点已在页面中，<code>current Fiber</code>代表该<code>DOM</code>节点对应的<code>Fiber</code>节点。</li><li><code>workInProgress Fiber</code>。如果该<code>DOM</code>节点将在本次更新中渲染到页面中，<code>workInProgress Fiber</code>代表该<code>DOM</code>节点对应的<code>Fiber</code>节点。</li><li><code>DOM</code>节点本身。</li><li><code>JSX</code>对象。即<code>ClassComponent</code>的<code>render</code>方法的返回结果，或<code>FunctionComponent</code>的调用结果。<code>JSX</code>对象中包含描述<code>DOM</code>节点的信息。</li></ol><p><code>Diff</code>算法的本质是对比 1 和 4，生成 2。</p><h1 id="Diff-的瓶颈以及-React-如何应对"><a href="#Diff-的瓶颈以及-React-如何应对" class="headerlink" title="Diff 的瓶颈以及 React 如何应对"></a>Diff 的瓶颈以及 React 如何应对</h1><p>由于<code>Diff</code>操作本身也会带来性能损耗，<code>React</code>文档中提到，即使在最前沿的算法中，将前后两棵树完全比对的算法的复杂程度为 <code>O(n3)</code>，其中<code>n</code>是树中元素的数量。<br>如果在<code>React</code>中使用了该算法，那么展示<code>1000</code>个元素所需要执行的计算量将在十亿的量级范围。这个开销实在是太过高昂。<br>为了降低算法复杂度，<code>React</code>的<code>diff</code>会预设三个限制：</p><ol><li>只对同级元素进行<code>Diff</code>。如果一个<code>DOM</code>节点在前后两次更新中跨越了层级，那么<code>React</code>不会尝试复用他。</li><li>两个不同类型的元素会产生出不同的树。如果元素由<code>div</code>变为<code>p</code>，<code>React</code>会销毁<code>div</code>及其子孙节点，并新建<code>p</code>及其子孙节点。</li><li>开发者可以通过 <code>key prop</code>来暗示哪些子元素在不同的渲染下能保持稳定。考虑如下例子：</li></ol><pre class=" language-html"><code class="language-html">// 更新前<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ka<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>song<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>song<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>// 更新后<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>song<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>song<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ka<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>如果没有<code>key</code>，<code>React</code>会认为<code>div</code>的第一个子节点由<code>p</code>变为<code>h3</code>，第二个子节点由<code>h3</code>变为<code>p</code>。这符合限制 2 的设定，会销毁并新建。<br>但是当我们用<code>key</code>指明了节点前后对应关系后，<code>React</code>知道<code>key === &quot;ka&quot;</code>的<code>p</code>在更新后还存在，所以<code>DOM</code>节点可以复用，只是需要交换下顺序。<br>这就是<code>React</code>为了应对算法性能瓶颈做出的三条限制。</p><h1 id="Diff-是如何实现的"><a href="#Diff-是如何实现的" class="headerlink" title="Diff 是如何实现的"></a>Diff 是如何实现的</h1><p>从<code>Diff</code>的入口函数<code>reconcileChildFibers</code>出发，该函数会根据<code>newChild</code>（即<code>JSX</code>对象）类型调用不同的处理函数。</p><blockquote><p>你可以从<a href="https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactChildFiber.new.js#L1280" target="_blank" rel="noopener">这里</a>看到<code>reconcileChildFibers</code>的源码。</p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 根据newChild类型选择不同diff函数处理</span><span class="token keyword">function</span> <span class="token function">reconcileChildFibers</span><span class="token punctuation">(</span>  returnFiber<span class="token punctuation">:</span> Fiber<span class="token punctuation">,</span>  currentFirstChild<span class="token punctuation">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  newChild<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isObject <span class="token operator">=</span> <span class="token keyword">typeof</span> newChild <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">&amp;&amp;</span> newChild <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// object类型，可能是 REACT_ELEMENT_TYPE 或 REACT_PORTAL_TYPE</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>newChild<span class="token punctuation">.</span>$$<span class="token keyword">typeof</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> REACT_ELEMENT_TYPE<span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">// 调用 reconcileSingleElement 处理</span>      <span class="token comment" spellcheck="true">// // ...省略其他case</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> newChild <span class="token operator">===</span> <span class="token string">"string"</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> newChild <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 调用 reconcileSingleTextNode 处理</span>    <span class="token comment" spellcheck="true">// ...省略</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>newChild<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 调用 reconcileChildrenArray 处理</span>    <span class="token comment" spellcheck="true">// ...省略</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 一些其他情况调用处理函数</span>  <span class="token comment" spellcheck="true">// ...省略</span>  <span class="token comment" spellcheck="true">// 以上都没有命中，删除节点</span>  <span class="token keyword">return</span> <span class="token function">deleteRemainingChildren</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> currentFirstChild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以从同级的节点数量将<code>Diff</code>分为两类：</p><ol><li>当<code>newChild</code>类型为<code>object</code>、<code>number</code>、<code>string</code>，代表同级只有一个节点</li><li>当<code>newChild</code>类型为<code>Array</code>，同级有多个节点</li></ol><h1 id="单节点-Diff"><a href="#单节点-Diff" class="headerlink" title="单节点 Diff"></a>单节点 Diff</h1><p>对于单个节点，以类型<code>object</code>为例，会进入<code>reconcileSingleElement</code></p><blockquote><p>你可以从<a href="https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactChildFiber.new.js#L1141" target="_blank" rel="noopener">这里</a>看到<code>reconcileSingleElement</code>源码</p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> isObject <span class="token operator">=</span> <span class="token keyword">typeof</span> newChild <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">&amp;&amp;</span> newChild <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 对象类型，可能是 REACT_ELEMENT_TYPE 或 REACT_PORTAL_TYPE</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>newChild<span class="token punctuation">.</span>$$<span class="token keyword">typeof</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> REACT_ELEMENT_TYPE<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">// 调用 reconcileSingleElement 处理</span>    <span class="token comment" spellcheck="true">// ...其他case</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fob_llXO4IWuOz8t8LLXpU1vWzZv.png"></p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// returnFiber: current fiber的父级fiber</span><span class="token comment" spellcheck="true">// currentFirstChild: 当前的current fiber，mount时不存在</span><span class="token comment" spellcheck="true">// element: JSX对象</span><span class="token comment" spellcheck="true">// lanes: 优先级相关，透传</span><span class="token keyword">function</span> <span class="token function">reconcileSingleElement</span><span class="token punctuation">(</span>  returnFiber<span class="token punctuation">:</span> Fiber<span class="token punctuation">,</span>  currentFirstChild<span class="token punctuation">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  element<span class="token punctuation">:</span> ReactElement<span class="token punctuation">,</span>  lanes<span class="token punctuation">:</span> Lanes<span class="token punctuation">)</span><span class="token punctuation">:</span> Fiber <span class="token punctuation">{</span>  <span class="token keyword">const</span> key <span class="token operator">=</span> element<span class="token punctuation">.</span>key<span class="token punctuation">;</span>  <span class="token keyword">let</span> child <span class="token operator">=</span> currentFirstChild<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 首先判断是否存在对应DOM节点</span>  <span class="token comment" spellcheck="true">// 在mount时，不存在current fiber对应的dom节点</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>child <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 上一次更新存在DOM节点，接下来判断是否可复用</span>    <span class="token comment" spellcheck="true">// 首先比较key是否相同</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>key <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// key相同，接下来比较type是否相同</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...省略case</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>elementType <span class="token operator">===</span> element<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// type相同则表示可以复用</span>            <span class="token comment" spellcheck="true">// 删除剩余的已经存在的children</span>            <span class="token comment" spellcheck="true">// 对于单一节点的更新，已经找到了可以复用的fiber，其余的fiber就没用了</span>            <span class="token function">deleteRemainingChildren</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> child<span class="token punctuation">.</span>sibling<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// useFiber：复用老的fiber（current fiber），生成新fiber（work in progress fiber）</span>            <span class="token keyword">const</span> existing <span class="token operator">=</span> <span class="token function">useFiber</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> element<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>            existing<span class="token punctuation">.</span>ref <span class="token operator">=</span> <span class="token function">coerceRef</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> child<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>            existing<span class="token punctuation">.</span><span class="token keyword">return</span> <span class="token operator">=</span> returnFiber<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 返回复用的fiber</span>            <span class="token keyword">return</span> existing<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// type不同则跳出switch</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 代码执行到这里代表：key相同但是type不同</span>      <span class="token comment" spellcheck="true">// 将该fiber及其兄弟fiber标记为删除</span>      <span class="token comment" spellcheck="true">// Remaining：其余的</span>      <span class="token function">deleteRemainingChildren</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// key不同，将该fiber标记为删除</span>      <span class="token function">deleteChild</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 存在更新前是多个节点，更新后是一个节点，就需要将之前的多个节点依次与新节点对比，直到找出可复用的节点</span>    <span class="token comment" spellcheck="true">// 这里赋值后可再次进入循环</span>    child <span class="token operator">=</span> child<span class="token punctuation">.</span>sibling<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 创建新Fiber，并返回 ...省略</span><span class="token punctuation">}</span></code></pre><p>从代码可以看出，<code>React</code>通过先判断<code>key</code>是否相同，如果<code>key</code>相同则判断<code>type</code>是否相同，只有都相同时一个<code>DOM</code>节点才能复用。<br>这里有个细节需要关注下：</p><ul><li>当<code>child !== null</code>且<code>key</code>相同且<code>type</code>不同时执行<code>deleteRemainingChildren</code>将<code>child</code>及其兄弟<code>fiber</code>都标记删除。</li><li>当<code>child !== null且key</code>不同时仅将 child 标记删除。</li></ul><p>考虑如下例子：<br>当前页面有 3 个<code>li</code>，我们要全部删除，再插入一个<code>p</code>。</p><pre><code>// 当前页面显示的ul &gt; li * 3// 这次需要更新的ul &gt; p</code></pre><p>由于本次更新时只有一个<code>p</code>，属于单一节点的<code>Diff</code>，会走上面介绍的代码逻辑。<br>在<code>reconcileSingleElement</code>中遍历之前的 3 个<code>fiber</code>（对应的<code>DOM</code>为 3 个<code>li</code>），寻找本次更新的<code>p</code>是否可以复用之前的 3 个<code>fiber</code>中某个的<code>DOM</code>。<br>当<code>key</code>相同且<code>type</code>不同时，代表我们已经找到本次更新的<code>p</code>对应的上次的<code>fiber</code>，但是<code>p</code>与<code>li</code> <code>type</code>不同，不能复用。既然唯一的可能性已经不能复用，则剩下的<code>fiber</code>都没有机会了，所以都需要标记删除。<br>当<code>key</code>不同时只代表遍历到的该<code>fiber</code>不能被<code>p</code>复用，后面还有兄弟<code>fiber</code>还没有遍历到。所以仅仅标记该 fiber 删除。</p><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><p>请判断如下<code>JSX</code>对象对应的<code>DOM</code>元素是否可以复用：</p><pre class=" language-html"><code class="language-html">// 习题1 更新前<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>ka song<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>// 更新后<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>ka song<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>// 习题2 更新前<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ka song<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>// 更新后<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ooo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ka song<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>// 习题3 更新前<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ka song<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>// 更新后<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ooo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ka song<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>// 习题4 更新前<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ka song<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>// 更新后<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>xiao bei<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>答案：<br>习题 1: 未设置<code>key prop</code>默认 <code>key = null</code>，所以更新前后<code>key</code>相同，都为<code>null</code>，但是更新前<code>type</code>为<code>div</code>，更新后为<code>p</code>，<code>type</code>改变则不能复用。<br>习题 2: 更新前后<code>key</code>改变，不需要再判断<code>type</code>，不能复用。<br>习题 3: 更新前后<code>key</code>改变，不需要再判断<code>type</code>，不能复用。<br>习题 4: 更新前后<code>key</code>与<code>type</code>都未改变，可以复用。<code>children</code>变化，<code>DOM</code>的子元素需要更新。</p><h1 id="多节点-Diff"><a href="#多节点-Diff" class="headerlink" title="多节点 Diff"></a>多节点 Diff</h1><p>现在考虑我们有一个<code>FunctionComponent</code>：</p><pre class=" language-html"><code class="language-html">function List () { return (<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>) }</code></pre><p>他的返回值<code>JSX</code>对象的<code>children</code>属性不是单一节点，而是包含四个对象的数组</p><pre class=" language-typescript"><code class="language-typescript"><span class="token punctuation">{</span>  $$<span class="token keyword">typeof</span><span class="token punctuation">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>  key<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>$$<span class="token keyword">typeof</span><span class="token punctuation">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">"li"</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span> ref<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> props<span class="token punctuation">:</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> …<span class="token punctuation">}</span>      <span class="token punctuation">{</span>$$<span class="token keyword">typeof</span><span class="token punctuation">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">"li"</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span> ref<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> props<span class="token punctuation">:</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> …<span class="token punctuation">}</span>      <span class="token punctuation">{</span>$$<span class="token keyword">typeof</span><span class="token punctuation">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">"li"</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span> ref<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> props<span class="token punctuation">:</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> …<span class="token punctuation">}</span>      <span class="token punctuation">{</span>$$<span class="token keyword">typeof</span><span class="token punctuation">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">"li"</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span> ref<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> props<span class="token punctuation">:</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> …<span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  ref<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  type<span class="token punctuation">:</span> <span class="token string">"ul"</span><span class="token punctuation">}</span></code></pre><p>这种情况下，<code>reconcileChildFibers</code>的<code>newChild</code>参数类型为<code>Array</code>，在<code>reconcileChildFibers</code>函数内部对应如下情况：</p><blockquote><p>你可以在<a href="https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactChildFiber.new.js#L1352" target="_blank" rel="noopener">这里</a>看到这段源码逻辑</p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>newChild<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 调用 reconcileChildrenArray 处理</span>  <span class="token comment" spellcheck="true">// ...省略</span><span class="token punctuation">}</span></code></pre><h2 id="场景归纳"><a href="#场景归纳" class="headerlink" title="场景归纳"></a>场景归纳</h2><h3 id="场景-1：节点更新"><a href="#场景-1：节点更新" class="headerlink" title="场景 1：节点更新"></a>场景 1：节点更新</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 之前</span><span class="token operator">&lt;</span>ul<span class="token operator">></span>  <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"0"</span> className<span class="token operator">=</span><span class="token string">"before"</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">&lt;</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token comment" spellcheck="true">// 之后 情况1 —— 节点属性变化</span><span class="token operator">&lt;</span>ul<span class="token operator">></span>  <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"0"</span> className<span class="token operator">=</span><span class="token string">"after"</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">&lt;</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token comment" spellcheck="true">// 之后 情况2 —— 节点类型更新</span><span class="token operator">&lt;</span>ul<span class="token operator">></span>  <span class="token operator">&lt;</span>div key<span class="token operator">=</span><span class="token string">"0"</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre><h3 id="场景-2：节点新增或减少"><a href="#场景-2：节点新增或减少" class="headerlink" title="场景 2：节点新增或减少"></a>场景 2：节点新增或减少</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 之前</span><span class="token operator">&lt;</span>ul<span class="token operator">></span>  <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"0"</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">&lt;</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token comment" spellcheck="true">// 之后 情况1 —— 新增节点</span><span class="token operator">&lt;</span>ul<span class="token operator">></span>  <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"0"</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">&lt;</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token comment" spellcheck="true">// 之后 情况2 —— 删除节点</span><span class="token operator">&lt;</span>ul<span class="token operator">></span>  <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre><h3 id="场景-3：节点位置变化"><a href="#场景-3：节点位置变化" class="headerlink" title="场景 3：节点位置变化"></a>场景 3：节点位置变化</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 之前</span><span class="token operator">&lt;</span>ul<span class="token operator">></span>  <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"0"</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">&lt;</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token comment" spellcheck="true">// 之后</span><span class="token operator">&lt;</span>ul<span class="token operator">></span>  <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"0"</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre><p>同级多个节点的<code>Diff</code>，一定属于以上三种情况中的一种或多种。</p><h2 id="Diff-的思路"><a href="#Diff-的思路" class="headerlink" title="Diff 的思路"></a>Diff 的思路</h2><p>该如何设计 Diff 算法呢？一般思路：</p><ol><li>判断当前节点的更新属于哪种情况</li><li>如果是新增，执行新增逻辑</li><li>如果是删除，执行删除逻辑</li><li>如果是更新，执行更新逻辑</li></ol><p>按这个方案，其实有个隐含的前提——<strong>不同操作的优先级是相同的</strong><br>但是<code>React</code>团队发现，在日常开发中，相较于新增和删除，更新组件发生的频率更高。所以<code>Diff</code>会优先判断当前节点是否属于更新。</p><blockquote><p><strong>注意</strong><br>在我们做数组相关的算法题时，经常使用双指针从数组头和尾同时遍历以提高效率，但是这里却不行。<br>虽然本次更新的<code>JSX</code>对象 <code>newChildren</code>为数组形式，但是和<code>newChildren</code>中每个组件进行比较的是<code>current fiber</code>，同级的<code>Fiber</code>节点是由<code>sibling</code>指针链接形成的单链表，即不支持双指针遍历。<br>即 <code>newChildren[0]</code>与<code>fiber</code>比较，<code>newChildren[1]</code>与<code>fiber.sibling</code>比较。<br>所以无法使用双指针优化。</p></blockquote><p>基于以上原因，<code>Diff</code>算法的整体逻辑会经历两轮遍历：<br>第一轮遍历：处理<code>更新</code>的节点。<br>第二轮遍历：处理剩下的<code>不属于更新</code>的节点。</p><h2 id="第一轮遍历"><a href="#第一轮遍历" class="headerlink" title="第一轮遍历"></a>第一轮遍历</h2><p>第一轮遍历步骤如下：</p><ol><li><code>let i = 0</code>，遍历<code>newChildren</code>，将<code>newChildren[i]</code>与<code>oldFiber</code>比较，判断<code>DOM</code>节点是否可复用。</li><li>如果可复用，<code>i++</code>，继续比较<code>newChildren[i]</code>与<code>oldFiber.sibling</code>，可以复用则继续遍历。</li><li>如果不可复用，分两种情况：</li></ol><ul><li><code>key</code>不同导致不可复用，立即跳出整个遍历，第一轮遍历结束。第一轮遍历只处理节点更新，也就是 key 相同的情况</li><li><code>key</code>相同 type<code>不同</code>导致不可复用，会将<code>oldFiber</code>标记为<code>DELETION</code>，并继续遍历</li></ul><ol start="4"><li>如果<code>newChildren</code>遍历完（即<code>i === newChildren.length - 1</code>）或者<code>oldFiber</code>遍历完（即<code>oldFiber.sibling === null</code>），跳出遍历，第一轮遍历结束。<blockquote><p>你可以从<a href="https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactChildFiber.new.js#L818" target="_blank" rel="noopener">这里</a>看到这轮遍历的源码</p></blockquote></li></ol><p>当遍历结束后，会有两种结果：</p><h3 id="1-步骤-3-跳出的遍历"><a href="#1-步骤-3-跳出的遍历" class="headerlink" title="1.步骤 3 跳出的遍历"></a>1.步骤 3 跳出的遍历</h3><p>此时<code>newChildren</code>没有遍历完，<code>oldFiber</code>也没有遍历完。<br>举个例子，考虑如下代码：</p><pre class=" language-html"><code class="language-html">// 之前<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>// 之后<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></code></pre><p>第一个节点可复用，遍历到<code>key === 2</code>的节点发现<code>key</code>改变，不可复用，跳出遍历，等待第二轮遍历处理。<br>此时<code>oldFiber</code>剩下<code>key === 1</code>、<code>key === 2</code>未遍历，<code>newChildren</code>剩下<code>key === 2</code>、<code>key === 1</code>未遍历。</p><h3 id="2-步骤-4-跳出的遍历"><a href="#2-步骤-4-跳出的遍历" class="headerlink" title="2.步骤 4 跳出的遍历"></a>2.步骤 4 跳出的遍历</h3><p>可能<code>newChildren</code>遍历完，或<code>oldFiber</code>遍历完，或他们同时遍历完。<br>举个例子，考虑如下代码：</p><pre class=" language-html"><code class="language-html">// 之前<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>// 之后 情况1 —— newChildren与oldFiber都遍历完<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bb<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>// 之后 情况2 —— newChildren没遍历完，oldFiber遍历完 // newChildren剩下key==="2" 未遍历<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bb<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>// 之后 情况3 —— newChildren遍历完，oldFiber没遍历完 // oldFiber剩下 key==="1"未遍历<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></code></pre><p>带着第一轮遍历的结果，我们开始第二轮遍历。</p><h2 id="第二轮遍历"><a href="#第二轮遍历" class="headerlink" title="第二轮遍历"></a>第二轮遍历</h2><p>对于第一轮遍历的结果，我们分别讨论：</p><h3 id="newChildren-与-oldFiber-同时遍历完"><a href="#newChildren-与-oldFiber-同时遍历完" class="headerlink" title="newChildren 与 oldFiber 同时遍历完"></a>newChildren 与 oldFiber 同时遍历完</h3><p>那就是最理想的情况：只需在第一轮遍历进行组件<a href="https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactChildFiber.new.js#L825" target="_blank" rel="noopener">更新</a>。此时 Diff 结束。</p><h3 id="newChildren-没遍历完，oldFiber-遍历完"><a href="#newChildren-没遍历完，oldFiber-遍历完" class="headerlink" title="newChildren 没遍历完，oldFiber 遍历完"></a>newChildren 没遍历完，oldFiber 遍历完</h3><p>已有的<code>DOM</code>节点都复用了，这时还有新加入的节点，意味着本次更新有新节点插入，我们只需要遍历剩下的<code>newChildren</code>为生成的<code>workInProgress fiber</code>依次标记<code>Placement</code>。</p><blockquote><p>你可以在<a href="https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactChildFiber.new.js#L869" target="_blank" rel="noopener">这里</a>看到这段源码逻辑</p></blockquote><h3 id="newChildren-遍历完，oldFiber-没遍历完"><a href="#newChildren-遍历完，oldFiber-没遍历完" class="headerlink" title="newChildren 遍历完，oldFiber 没遍历完"></a>newChildren 遍历完，oldFiber 没遍历完</h3><p>意味着本次更新比之前的节点数量少，有节点被删除了。所以需要遍历剩下的<code>oldFiber</code>，依次标记<code>Deletion</code>。</p><blockquote><p>你可以在<a href="https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactChildFiber.new.js#L863" target="_blank" rel="noopener">这里</a>看到这段源码逻辑</p></blockquote><h3 id="newChildren-与-oldFiber-遍历完"><a href="#newChildren-与-oldFiber-遍历完" class="headerlink" title="newChildren 与 oldFiber 遍历完"></a>newChildren 与 oldFiber 遍历完</h3><p>这意味着有节点在这次更新中改变了位置。<br>这是<code>Diff</code>算法最精髓也是最难懂的部分。</p><blockquote><p>你可以在<a href="https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactChildFiber.new.js#L893" target="_blank" rel="noopener">这里</a>看到这段源码逻辑</p></blockquote><h2 id="处理移动的节点"><a href="#处理移动的节点" class="headerlink" title="处理移动的节点"></a>处理移动的节点</h2><p>由于有节点改变了位置，所以不能再用位置索引 i 对比前后的节点，那么如何才能将同一个节点在两次更新中对应上呢？<br>我们需要使用<code>key</code>。<br>为了快速的找到<code>key</code>对应的<code>oldFiber</code>，我们将所有还未处理的<code>oldFiber</code>存入以<code>key</code>为<code>key</code>，<code>oldFiber</code>为<code>value</code>的<code>Map</code>中。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> existingChildren <span class="token operator">=</span> <span class="token function">mapRemainingChildren</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> oldFiber<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>你可以在<a href="https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactChildFiber.new.js#L890" target="_blank" rel="noopener">这里</a>看到这段源码逻辑</p></blockquote><p>接下来遍历剩余的<code>newChildren</code>，通过<code>newChildren[i].key</code>就能在<code>existingChildren</code>中找到<code>key</code>相同的<code>oldFiber</code>。</p><h2 id="标记节点是否移动"><a href="#标记节点是否移动" class="headerlink" title="标记节点是否移动"></a>标记节点是否移动</h2><p>既然我们的目标是寻找移动的节点，那么我们需要明确：节点是否移动是以什么为参照物？<br>我们的参照物是：最后一个可复用的节点在<code>oldFiber</code>中的位置索引（用变量<code>lastPlacedIndex</code>表示）。<br>由于本次更新中节点是按<code>newChildren</code>的顺序排列。在遍历<code>newChildren</code>过程中，每个遍历到的可复用节点一定是当前遍历到的所有可复用节点中最靠右的那个，即一定在<code>lastPlacedIndex</code>对应的可复用的节点在本次更新中位置的后面。<br>那么我们只需要比较遍历到的可复用节点在上次更新时是否也在<code>lastPlacedIndex</code>对应的<code>oldFiber</code>后面，就能知道两次更新中这两个节点的相对位置改变没有。<br>我们用变量<code>oldIndex</code>表示遍历到的可复用节点在<code>oldFiber</code>中的位置索引。如果<code>oldIndex &lt; lastPlacedIndex</code>，代表本次更新该节点需要向右移动。<br><code>lastPlacedIndex</code>初始为<code>0</code>，每遍历一个可复用的节点，如果<code>oldIndex &gt;= lastPlacedIndex</code>，则<code>lastPlacedIndex = oldIndex</code>。<br>这里有两个 Demo，可以对照着理解。</p><h3 id="Demo1"><a href="#Demo1" class="headerlink" title="Demo1"></a>Demo1</h3><p>在<code>Demo</code>中我们简化下书写，每个字母代表一个节点，字母的值代表节点的<code>key</code></p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 之前</span>abcd<span class="token comment" spellcheck="true">// 之后</span>acdb<span class="token operator">===</span>第一轮遍历开始<span class="token operator">===</span>a（之后）vs a（之前）key不变，可复用此时 a 对应的oldFiber（之前的a）在之前的数组（abcd）中索引为<span class="token number">0</span>所以 lastPlacedIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>继续第一轮遍历<span class="token operator">...</span>c（之后）vs b（之前）key改变，不能复用，跳出第一轮遍历此时 lastPlacedIndex <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">===</span>第一轮遍历结束<span class="token operator">===</span><span class="token operator">===</span>第二轮遍历开始<span class="token operator">===</span>newChildren <span class="token operator">===</span> cdb，没用完，不需要执行删除旧节点oldFiber <span class="token operator">===</span> bcd，没用完，不需要执行插入新节点将剩余oldFiber（bcd）保存为map<span class="token comment" spellcheck="true">// 当前oldFiber：bcd</span><span class="token comment" spellcheck="true">// 当前newChildren：cdb</span>继续遍历剩余newChildrenkey <span class="token operator">===</span> c 在 oldFiber中存在<span class="token keyword">const</span> oldIndex <span class="token operator">=</span> c（之前）<span class="token punctuation">.</span>index<span class="token punctuation">;</span>此时 oldIndex <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 之前节点为 abcd，所以c.index === 2</span>比较 oldIndex 与 lastPlacedIndex<span class="token punctuation">;</span>如果 oldIndex <span class="token operator">>=</span> lastPlacedIndex 代表该可复用节点不需要移动并将 lastPlacedIndex <span class="token operator">=</span> oldIndex<span class="token punctuation">;</span>如果 oldIndex <span class="token operator">&lt;</span> lastplacedIndex 该可复用节点之前插入的位置索引小于这次更新需要插入的位置索引，代表该节点需要向右移动在例子中，oldIndex <span class="token number">2</span> <span class="token operator">></span> lastPlacedIndex <span class="token number">0</span>，则 lastPlacedIndex <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>c节点位置不变继续遍历剩余newChildren<span class="token comment" spellcheck="true">// 当前oldFiber：bd</span><span class="token comment" spellcheck="true">// 当前newChildren：db</span>key <span class="token operator">===</span> d 在 oldFiber中存在<span class="token keyword">const</span> oldIndex <span class="token operator">=</span> d（之前）<span class="token punctuation">.</span>index<span class="token punctuation">;</span>oldIndex <span class="token number">3</span> <span class="token operator">></span> lastPlacedIndex <span class="token number">2</span> <span class="token comment" spellcheck="true">// 之前节点为 abcd，所以d.index === 3</span>则 lastPlacedIndex <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>d节点位置不变继续遍历剩余newChildren<span class="token comment" spellcheck="true">// 当前oldFiber：b</span><span class="token comment" spellcheck="true">// 当前newChildren：b</span>key <span class="token operator">===</span> b 在 oldFiber中存在<span class="token keyword">const</span> oldIndex <span class="token operator">=</span> b（之前）<span class="token punctuation">.</span>index<span class="token punctuation">;</span>oldIndex <span class="token number">1</span> <span class="token operator">&lt;</span> lastPlacedIndex <span class="token number">3</span> <span class="token comment" spellcheck="true">// 之前节点为 abcd，所以b.index === 1</span>则 b节点需要向右移动<span class="token operator">===</span>第二轮遍历结束<span class="token operator">===</span>最终acd <span class="token number">3</span>个节点都没有移动，b节点被标记为移动</code></pre><h3 id="Demo2"><a href="#Demo2" class="headerlink" title="Demo2"></a>Demo2</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 之前</span>abcd<span class="token comment" spellcheck="true">// 之后</span>dabc<span class="token operator">===</span>第一轮遍历开始<span class="token operator">===</span>d（之后）vs a（之前）key改变，不能复用，跳出遍历<span class="token operator">===</span>第一轮遍历结束<span class="token operator">===</span><span class="token operator">===</span>第二轮遍历开始<span class="token operator">===</span>newChildren <span class="token operator">===</span> dabc，没用完，不需要执行删除旧节点oldFiber <span class="token operator">===</span> abcd，没用完，不需要执行插入新节点将剩余oldFiber（abcd）保存为map继续遍历剩余newChildren<span class="token comment" spellcheck="true">// 当前oldFiber：abcd</span><span class="token comment" spellcheck="true">// 当前newChildren dabc</span>key <span class="token operator">===</span> d 在 oldFiber中存在<span class="token keyword">const</span> oldIndex <span class="token operator">=</span> d（之前）<span class="token punctuation">.</span>index<span class="token punctuation">;</span>此时 oldIndex <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 之前节点为 abcd，所以d.index === 3</span>比较 oldIndex 与 lastPlacedIndex<span class="token punctuation">;</span>oldIndex <span class="token number">3</span> <span class="token operator">></span> lastPlacedIndex <span class="token number">0</span>则 lastPlacedIndex <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>d节点位置不变继续遍历剩余newChildren<span class="token comment" spellcheck="true">// 当前oldFiber：abc</span><span class="token comment" spellcheck="true">// 当前newChildren abc</span>key <span class="token operator">===</span> a 在 oldFiber中存在<span class="token keyword">const</span> oldIndex <span class="token operator">=</span> a（之前）<span class="token punctuation">.</span>index<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 之前节点为 abcd，所以a.index === 0</span>此时 oldIndex <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>比较 oldIndex 与 lastPlacedIndex<span class="token punctuation">;</span>oldIndex <span class="token number">0</span> <span class="token operator">&lt;</span> lastPlacedIndex <span class="token number">3</span>则 a节点需要向右移动继续遍历剩余newChildren<span class="token comment" spellcheck="true">// 当前oldFiber：bc</span><span class="token comment" spellcheck="true">// 当前newChildren bc</span>key <span class="token operator">===</span> b 在 oldFiber中存在<span class="token keyword">const</span> oldIndex <span class="token operator">=</span> b（之前）<span class="token punctuation">.</span>index<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 之前节点为 abcd，所以b.index === 1</span>此时 oldIndex <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span>比较 oldIndex 与 lastPlacedIndex<span class="token punctuation">;</span>oldIndex <span class="token number">1</span> <span class="token operator">&lt;</span> lastPlacedIndex <span class="token number">3</span>则 b节点需要向右移动继续遍历剩余newChildren<span class="token comment" spellcheck="true">// 当前oldFiber：c</span><span class="token comment" spellcheck="true">// 当前newChildren c</span>key <span class="token operator">===</span> c 在 oldFiber中存在<span class="token keyword">const</span> oldIndex <span class="token operator">=</span> c（之前）<span class="token punctuation">.</span>index<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 之前节点为 abcd，所以c.index === 2</span>此时 oldIndex <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">;</span>比较 oldIndex 与 lastPlacedIndex<span class="token punctuation">;</span>oldIndex <span class="token number">2</span> <span class="token operator">&lt;</span> lastPlacedIndex <span class="token number">3</span>则 c节点需要向右移动<span class="token operator">===</span>第二轮遍历结束<span class="token operator">===</span></code></pre><p>可以看到，我们以为从 <code>abcd</code> 变为 <code>dabc</code>，只需要将<code>d</code>移动到前面。<br>但实际上<code>React</code>保持<code>d</code>不变，将<code>abc</code>分别移动到了<code>d</code>的后面。<br>从这点可以看出，考虑性能，我们要尽量减少将节点从后面移动到前面的操作。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 自顶向下学习React源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四章 React架构-commit阶段</title>
      <link href="/lgutmr/"/>
      <url>/lgutmr/</url>
      
        <content type="html"><![CDATA[<p><code>commitRoot</code>方法是<code>commit</code>阶段工作的起点。<code>fiberRootNode</code>会作为传参。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token function">commitRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在<code>rootFiber.firstEffect</code>上保存了一条需要执行副作用的<code>Fiber节点</code>的单向链表<code>effectList</code>，这些<code>Fiber节点</code>的<code>updateQueue</code>中保存了变化的<code>props</code>。<br>这些副作用对应的<code>DOM</code>操作在<code>commit</code>阶段执行。<br>除此之外，一些生命周期钩子（比如<code>componentDidXXX</code>）、<code>hook</code>（比如<code>useEffect</code>）需要在<code>commit</code>阶段执行。<br><code>commit</code>阶段的主要工作（即<code>Renderer</code>的工作流程）分为三部分：</p><ul><li><code>before mutation</code>阶段（执行<code>DOM操作前</code>）</li><li><code>mutation</code>阶段（执行<code>DOM操作</code>）</li><li><code>layout</code>阶段（执行<code>DOM操作后</code>）<blockquote><p>可以从<a href="https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L2001" target="_blank" rel="noopener">这里</a>看到 commit 阶段的完整代码。</p></blockquote></li></ul><p>在<code>before mutation</code>阶段之前和<code>layout</code>阶段之后还有一些额外工作，涉及到比如<code>useEffect</code>的触发、优先级相关的重置、<code>ref</code>的绑定/解绑。</p><h1 id="流程概述"><a href="#流程概述" class="headerlink" title="流程概述"></a>流程概述</h1><h2 id="before-mutation-之前"><a href="#before-mutation-之前" class="headerlink" title="before mutation 之前"></a>before mutation 之前</h2><p><code>commitRootImpl</code>方法中直到第一句<code>if (firstEffect !== null)</code>之前属于<code>before mutation</code>之前。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">do</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 触发useEffect回调与其他同步任务。由于这些任务可能触发新的渲染，</span>  <span class="token comment" spellcheck="true">// 所以这里要一直遍历执行直到没有任务</span>  <span class="token function">flushPassiveEffects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>rootWithPendingPassiveEffects <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// root指 fiberRootNode</span><span class="token comment" spellcheck="true">// root.finishedWork指当前应用的rootFiber</span><span class="token keyword">const</span> finishedWork <span class="token operator">=</span> root<span class="token punctuation">.</span>finishedWork<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 凡是变量名带lane的都是优先级相关</span><span class="token keyword">const</span> lanes <span class="token operator">=</span> root<span class="token punctuation">.</span>finishedLanes<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>finishedWork <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span>root<span class="token punctuation">.</span>finishedWork <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>root<span class="token punctuation">.</span>finishedLanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 重置Scheduler绑定的回调函数</span>root<span class="token punctuation">.</span>callbackNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>root<span class="token punctuation">.</span>callbackId <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span><span class="token keyword">let</span> remainingLanes <span class="token operator">=</span> <span class="token function">mergeLanes</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>lanes<span class="token punctuation">,</span> finishedWork<span class="token punctuation">.</span>childLanes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 重置优先级相关变量</span><span class="token function">markRootFinished</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> remainingLanes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 清除已完成的discrete updates，例如：用户鼠标点击触发的更新。</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rootsWithPendingDiscreteUpdates <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>    <span class="token operator">!</span><span class="token function">hasDiscreteLanes</span><span class="token punctuation">(</span>remainingLanes<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>    rootsWithPendingDiscreteUpdates<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    rootsWithPendingDiscreteUpdates<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 重置全局变量</span><span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> workInProgressRoot<span class="token punctuation">)</span> <span class="token punctuation">{</span>  workInProgressRoot <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  workInProgress <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  workInProgressRootRenderLanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将effectList赋值给firstEffect</span><span class="token comment" spellcheck="true">// 由于每个fiber的effectList只包含他的子孙节点</span><span class="token comment" spellcheck="true">// 所以根节点如果有effectTag则不会被包含进来</span><span class="token comment" spellcheck="true">// 所以这里将有effectTag的根节点插入到effectList尾部</span><span class="token comment" spellcheck="true">// 这样才能保证有effect的fiber都在effectList中</span><span class="token keyword">let</span> firstEffect<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>effectTag <span class="token operator">></span> PerformedWork<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>lastEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    finishedWork<span class="token punctuation">.</span>lastEffect<span class="token punctuation">.</span>nextEffect <span class="token operator">=</span> finishedWork<span class="token punctuation">;</span>    firstEffect <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>firstEffect<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    firstEffect <span class="token operator">=</span> finishedWork<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 根节点没有effectTag</span>  firstEffect <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>firstEffect<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看到，<code>before mutation</code>之前主要做一些变量赋值，状态重置的工作。<br>这一长串代码我们只需要关注最后赋值的<code>firstEffect</code>，在<code>commit</code>的三个子阶段都会用到他。</p><h2 id="layout-之后"><a href="#layout-之后" class="headerlink" title="layout 之后"></a>layout 之后</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> rootDidHavePassiveEffects <span class="token operator">=</span> rootDoesHavePassiveEffects<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// useEffect相关</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rootDoesHavePassiveEffects<span class="token punctuation">)</span> <span class="token punctuation">{</span>  rootDoesHavePassiveEffects <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>  rootWithPendingPassiveEffects <span class="token operator">=</span> root<span class="token punctuation">;</span>  pendingPassiveEffectsLanes <span class="token operator">=</span> lanes<span class="token punctuation">;</span>  pendingPassiveEffectsRenderPriority <span class="token operator">=</span> renderPriorityLevel<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 性能优化相关</span><span class="token keyword">if</span> <span class="token punctuation">(</span>remainingLanes <span class="token operator">!==</span> NoLanes<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>enableSchedulerTracing<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 性能优化相关</span><span class="token keyword">if</span> <span class="token punctuation">(</span>enableSchedulerTracing<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rootDidHavePassiveEffects<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ...检测无限循环的同步任务</span><span class="token keyword">if</span> <span class="token punctuation">(</span>remainingLanes <span class="token operator">===</span> SyncLane<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 在离开commitRoot函数前调用，触发一次新的调度，确保任何附加的任务被调度</span><span class="token function">ensureRootIsScheduled</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ...处理未捕获错误及老版本遗留的边界问题</span><span class="token comment" spellcheck="true">// 执行同步任务，这样同步任务不需要等到下次事件循环再执行</span><span class="token comment" spellcheck="true">// 比如在 componentDidMount 中执行 setState 创建的更新会在这里被同步执行</span><span class="token comment" spellcheck="true">// 或useLayoutEffect</span><span class="token function">flushSyncCallbackQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre><blockquote><p>你可以在<a href="https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L2195" target="_blank" rel="noopener">这里</a>看到这段代码</p></blockquote><p>主要包括三点内容：</p><ol><li><p>useEffect 相关的处理。</p></li><li><p>性能追踪相关。</p><blockquote><p>源码里有很多和 interaction 相关的变量。他们都和追踪 React 渲染时间、性能相关，<a href="https://zh-hans.reactjs.org/docs/profiler.html" target="_blank" rel="noopener">Profiler API</a>和<a href="https://github.com/facebook/react-devtools/pull/1069" target="_blank" rel="noopener">DevTools</a>中使用。可以在这里看到<a href="https://gist.github.com/bvaughn/8de925562903afd2e7a12554adcdda16#overview" target="_blank" rel="noopener">interaction 的定义</a></p></blockquote></li><li><p>在 commit 阶段会触发一些生命周期钩子（如 componentDidXXX）和 hook（如 useLayoutEffect、useEffect）。</p></li></ol><p>在这些回调方法中可能触发新的更新，新的更新会开启新的 render-commit 流程。</p><h1 id="before-mutation-阶段"><a href="#before-mutation-阶段" class="headerlink" title="before mutation 阶段"></a>before mutation 阶段</h1><p><code>Renderer</code>工作的阶段被称为<code>commit</code>阶段。<code>commit</code>阶段可以分为三个子阶段：</p><ul><li>before mutation 阶段（执行 DOM 操作前）</li><li>mutation 阶段（执行 DOM 操作）</li><li>layout 阶段（执行 DOM 操作后）</li></ul><p><code>before mutation</code>阶段的代码很短，整个过程就是遍历<code>effectList</code>并调用<code>commitBeforeMutationEffects</code>函数处理。</p><blockquote><p>这部分<a href="https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L2104-L2127" target="_blank" rel="noopener">源码在这里</a>，为了增加可读性，示例代码中删除了不相关的逻辑。</p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 保存之前的优先级，以同步优先级执行，执行完毕后恢复之前优先级</span><span class="token keyword">const</span> previousLanePriority <span class="token operator">=</span> <span class="token function">getCurrentUpdateLanePriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setCurrentUpdateLanePriority</span><span class="token punctuation">(</span>SyncLanePriority<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将当前上下文标记为CommitContext，作为commit阶段的标志</span><span class="token keyword">const</span> prevExecutionContext <span class="token operator">=</span> executionContext<span class="token punctuation">;</span>executionContext <span class="token operator">|</span><span class="token operator">=</span> CommitContext<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 处理focus状态</span>focusedInstanceHandle <span class="token operator">=</span> <span class="token function">prepareForCommit</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>containerInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>shouldFireAfterActiveInstanceBlur <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// beforeMutation阶段的主函数</span><span class="token function">commitBeforeMutationEffects</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>focusedInstanceHandle <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre><h2 id="commitBeforeMutationEffects"><a href="#commitBeforeMutationEffects" class="headerlink" title="commitBeforeMutationEffects"></a>commitBeforeMutationEffects</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">commitBeforeMutationEffects</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>nextEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> current <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shouldFireAfterActiveInstanceBlur <span class="token operator">&amp;&amp;</span> focusedInstanceHandle <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ...focus blur相关</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> effectTag <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>effectTag<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用getSnapshotBeforeUpdate</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>effectTag <span class="token operator">&amp;</span> Snapshot<span class="token punctuation">)</span> <span class="token operator">!==</span> NoEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">commitBeforeMutationEffectOnFiber</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> nextEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 调度useEffect</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>effectTag <span class="token operator">&amp;</span> Passive<span class="token punctuation">)</span> <span class="token operator">!==</span> NoEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rootDoesHavePassiveEffects<span class="token punctuation">)</span> <span class="token punctuation">{</span>        rootDoesHavePassiveEffects <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>        <span class="token function">scheduleCallback</span><span class="token punctuation">(</span>NormalSchedulerPriority<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">flushPassiveEffects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    nextEffect <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>nextEffect<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>整体可以分为三部分：</p><ul><li>处理<code>DOM</code>节点渲染/删除后的 <code>autoFocus</code>、<code>blur</code> 逻辑。</li><li>调用<code>getSnapshotBeforeUpdate</code>生命周期钩子。</li><li>调度<code>useEffect</code>。</li></ul><h2 id="调用getSnapshotBeforeUpdate"><a href="#调用getSnapshotBeforeUpdate" class="headerlink" title="调用getSnapshotBeforeUpdate"></a>调用<code>getSnapshotBeforeUpdate</code></h2><p><code>commitBeforeMutationEffectOnFiber</code>是<code>commitBeforeMutationLifeCycles</code>的别名。<br>在该方法内会调用<code>getSnapshotBeforeUpdate</code>。</p><blockquote><p>你可以在<a href="https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberCommitWork.old.js#L222" target="_blank" rel="noopener">这里</a>看到这段逻辑</p></blockquote><p>从<code>React v16</code>开始，<code>componentWillXXX</code>钩子前增加了<code>UNSAFE_</code>前缀。<br>究其原因，是因为<code>Stack Reconciler</code>重构为<code>Fiber Reconciler</code>后，<code>render</code>阶段的任务可能中断/重新开始，对应的组件在<code>render</code>阶段的生命周期钩子（即<code>componentWillXXX</code>）可能触发多次。<br>这种行为和<code>React v15</code>不一致，所以标记为<code>UNSAFE_</code>。</p><blockquote><p>更详细的解释参照<a href="https://juejin.im/post/6847902224287285255#comment" target="_blank" rel="noopener">这里</a></p></blockquote><p>为此，<code>React</code>提供了替代的生命周期钩子<code>getSnapshotBeforeUpdate</code>。<br>我们可以看见，<code>getSnapshotBeforeUpdate</code>是在<code>commit</code>阶段内的<code>before mutation</code>阶段调用的，由于<code>commit</code>阶段是同步的，所以不会遇到多次调用的问题。</p><h2 id="调度useEffect"><a href="#调度useEffect" class="headerlink" title="调度useEffect"></a>调度<code>useEffect</code></h2><p>在这几行代码内，<code>scheduleCallback</code>方法由<code>Scheduler</code>模块提供，用于以某个优先级异步调度一个回调函数。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 调度useEffect</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>effectTag <span class="token operator">&amp;</span> Passive<span class="token punctuation">)</span> <span class="token operator">!==</span> NoEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rootDoesHavePassiveEffects<span class="token punctuation">)</span> <span class="token punctuation">{</span>    rootDoesHavePassiveEffects <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>    <span class="token function">scheduleCallback</span><span class="token punctuation">(</span>NormalSchedulerPriority<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 触发useEffect</span>      <span class="token function">flushPassiveEffects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在此处，被异步调度的回调函数就是触发<code>useEffect</code>的方法<code>flushPassiveEffects</code>。<br>我们接下来讨论<code>useEffect</code>如何被异步调度，以及为什么要异步（而不是同步）调度。</p><h3 id="如何异步调度"><a href="#如何异步调度" class="headerlink" title="如何异步调度"></a>如何异步调度</h3><p>在<code>flushPassiveEffects</code>方法内部会从全局变量<code>rootWithPendingPassiveEffects</code>获取<code>effectList</code>。<br>关于<code>flushPassiveEffects</code>的具体讲解参照 useEffect 与 useLayoutEffect 一节<br><code>effectList</code>中保存了需要执行副作用的<code>Fiber</code>节点。其中副作用包括：</p><ul><li>插入<code>DOM</code>节点（<code>Placement</code>）</li><li>更新<code>DOM</code>节点（<code>Update</code>）</li><li>删除<code>DOM</code>节点（<code>Deletion</code>）</li></ul><p>除此外，当一个<code>FunctionComponent</code>含有<code>useEffect</code>或<code>useLayoutEffect</code>，他对应的<code>Fiber</code>节点也会被赋值<code>effectTag</code>。</p><blockquote><p>你可以从<a href="https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactHookEffectTags.js" target="_blank" rel="noopener">这里</a>看到 hook 相关的<code>effectTag</code></p></blockquote><p>在<code>flushPassiveEffects</code>方法内部会遍历<code>rootWithPendingPassiveEffects</code>（即<code>effectList</code>）执行<code>effect</code>回调函数。<br>如果在此时直接执行，<code>rootWithPendingPassiveEffects === null</code>。<br><code>layout</code>之后的代码片段中会根据<code>rootDoesHavePassiveEffects === true?</code>决定是否赋值<code>rootWithPendingPassiveEffects</code>。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> rootDidHavePassiveEffects <span class="token operator">=</span> rootDoesHavePassiveEffects<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rootDoesHavePassiveEffects<span class="token punctuation">)</span> <span class="token punctuation">{</span>  rootDoesHavePassiveEffects <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>  rootWithPendingPassiveEffects <span class="token operator">=</span> root<span class="token punctuation">;</span>  pendingPassiveEffectsLanes <span class="token operator">=</span> lanes<span class="token punctuation">;</span>  pendingPassiveEffectsRenderPriority <span class="token operator">=</span> renderPriorityLevel<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>所以整个<code>useEffect</code>异步调用分为三步：</p><ol><li><code>before mutation</code>阶段在<code>scheduleCallback</code>中调度<code>flushPassiveEffects</code></li><li><code>layout</code>阶段之后将<code>effectList</code>赋值给<code>rootWithPendingPassiveEffects</code></li><li><code>scheduleCallback</code>触发<code>flushPassiveEffects</code>，<code>flushPassiveEffects</code>内部遍历<code>rootWithPendingPassiveEffects</code></li></ol><h3 id="为什么需要异步调用"><a href="#为什么需要异步调用" class="headerlink" title="为什么需要异步调用"></a>为什么需要异步调用</h3><p>摘录自<code>React</code>文档<a href="https://zh-hans.reactjs.org/docs/hooks-reference.html#timing-of-effects" target="_blank" rel="noopener">effect 的执行时机</a>：</p><blockquote><p>与 <code>componentDidMount</code>、<code>componentDidUpdate</code> 不同的是，在浏览器完成布局与绘制之后，传给 useEffect 的函数会延迟调用。这使得它适用于许多常见的副作用场景，比如设置订阅和事件处理等情况，因此不应在函数中执行阻塞浏览器更新屏幕的操作。</p></blockquote><p>可见，<code>useEffect</code>异步执行的原因主要是防止同步执行时阻塞浏览器渲染。</p><h1 id="mutation-阶段"><a href="#mutation-阶段" class="headerlink" title="mutation 阶段"></a>mutation 阶段</h1><p>类似<code>before mutation</code>阶段，<code>mutation</code>阶段也是遍历<code>effectList</code>，执行函数。这里执行的是<code>commitMutationEffects</code>。</p><pre class=" language-typescript"><code class="language-typescript">nextEffect <span class="token operator">=</span> firstEffect<span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token function">commitMutationEffects</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> renderPriorityLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">invariant</span><span class="token punctuation">(</span>nextEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"Should be working on an effect."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">captureCommitPhaseError</span><span class="token punctuation">(</span>nextEffect<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>    nextEffect <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>nextEffect<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>nextEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="commitMutationEffects"><a href="#commitMutationEffects" class="headerlink" title="commitMutationEffects"></a>commitMutationEffects</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">commitMutationEffects</span><span class="token punctuation">(</span>  root<span class="token punctuation">:</span> FiberRoot<span class="token punctuation">,</span>  renderPriorityLevel<span class="token punctuation">:</span> ReactPriorityLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 遍历effectList</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>nextEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setCurrentDebugFiberInDEV</span><span class="token punctuation">(</span>nextEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> flags <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>flags<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否需要重制文本节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> ContentReset<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">commitResetTextContent</span><span class="token punctuation">(</span>nextEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 是否有ref的更新</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> Ref<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> current <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">commitDetachRef</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>enableScopeAPI<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO: This is a temporary solution that allowed us to transition away</span>        <span class="token comment" spellcheck="true">// from React Flare on www.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextEffect<span class="token punctuation">.</span>tag <span class="token operator">===</span> ScopeComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">commitAttachRef</span><span class="token punctuation">(</span>nextEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Placement：插入dom</span>    <span class="token comment" spellcheck="true">// Update：更新属性</span>    <span class="token comment" spellcheck="true">// Deletion：删除dom</span>    <span class="token comment" spellcheck="true">// Hydrating：SSR相关</span>    <span class="token keyword">const</span> primaryFlags <span class="token operator">=</span> flags <span class="token operator">&amp;</span> <span class="token punctuation">(</span>Placement <span class="token operator">|</span> Update <span class="token operator">|</span> Deletion <span class="token operator">|</span> Hydrating<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>primaryFlags<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> Placement<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">commitPlacement</span><span class="token punctuation">(</span>nextEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>        nextEffect<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>Placement<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">case</span> PlacementAndUpdate<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Placement</span>        <span class="token function">commitPlacement</span><span class="token punctuation">(</span>nextEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>        nextEffect<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>Placement<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Update</span>        <span class="token keyword">const</span> current <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>        <span class="token function">commitWork</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> nextEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">case</span> Hydrating<span class="token punctuation">:</span> <span class="token punctuation">{</span>        nextEffect<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>Hydrating<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">case</span> HydratingAndUpdate<span class="token punctuation">:</span> <span class="token punctuation">{</span>        nextEffect<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>Hydrating<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Update</span>        <span class="token keyword">const</span> current <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>        <span class="token function">commitWork</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> nextEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">case</span> Update<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> current <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>        <span class="token function">commitWork</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> nextEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">case</span> Deletion<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">commitDeletion</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> nextEffect<span class="token punctuation">,</span> renderPriorityLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">resetCurrentDebugFiberInDEV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    nextEffect <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>nextEffect<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>commitMutationEffects</code>会遍历<code>effectList</code>，对每个<code>Fiber</code>节点执行如下三个操作：</p><ol><li>根据<code>ContentReset effectTag</code>重置文字节点</li><li>更新<code>ref</code></li><li>根据<code>effectTag</code>分别处理，其中<code>effectTag</code>包括(<code>Placement</code> | <code>Update</code> | <code>Deletion</code> | <code>Hydrating</code>)</li></ol><h2 id="Placement-effect"><a href="#Placement-effect" class="headerlink" title="Placement effect"></a>Placement effect</h2><p>当<code>Fiber</code>节点含有<code>Placement effectTag</code>，意味着该<code>Fiber</code>节点对应的<code>DOM</code>节点需要插入到页面中。<br>调用的方法为<code>commitPlacement</code>。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">commitPlacement</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">:</span> Fiber<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 是否支持Mutation，dom环境是支持的</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>supportsMutation<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> parentFiber <span class="token operator">=</span> <span class="token function">getHostParentFiber</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> parent<span class="token punctuation">;</span>  <span class="token keyword">let</span> isContainer<span class="token punctuation">;</span>  <span class="token keyword">const</span> parentStateNode <span class="token operator">=</span> parentFiber<span class="token punctuation">.</span>stateNode<span class="token punctuation">;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>parentFiber<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> HostComponent<span class="token punctuation">:</span>      parent <span class="token operator">=</span> parentStateNode<span class="token punctuation">;</span>      isContainer <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> HostRoot<span class="token punctuation">:</span>      parent <span class="token operator">=</span> parentStateNode<span class="token punctuation">.</span>containerInfo<span class="token punctuation">;</span>      isContainer <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> HostPortal<span class="token punctuation">:</span>      parent <span class="token operator">=</span> parentStateNode<span class="token punctuation">.</span>containerInfo<span class="token punctuation">;</span>      isContainer <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> FundamentalComponent<span class="token punctuation">:</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>enableFundamentalAPI<span class="token punctuation">)</span> <span class="token punctuation">{</span>        parent <span class="token operator">=</span> parentStateNode<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>        isContainer <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// eslint-disable-next-line-no-fallthrough</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token function">invariant</span><span class="token punctuation">(</span>        <span class="token keyword">false</span><span class="token punctuation">,</span>        <span class="token string">"Invalid host parent fiber. This error is likely caused by a bug "</span> <span class="token operator">+</span>          <span class="token string">"in React. Please file an issue."</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>parentFiber<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span> ContentReset<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">resetTextContent</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>    parentFiber<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>ContentReset<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 找到Host类型的兄弟节点</span>  <span class="token comment" spellcheck="true">// 插入有两种方式：1。找到兄弟节点，执行insertBefore插入节点</span>  <span class="token comment" spellcheck="true">// 2.找到父节点，执行AppendChild插入节点</span>  <span class="token keyword">const</span> before <span class="token operator">=</span> <span class="token function">getHostSibling</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// We only have the top Fiber that was inserted but we need to recurse down its</span>  <span class="token comment" spellcheck="true">// children to find all the terminal nodes.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">insertOrAppendPlacementNodeIntoContainer</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">,</span> before<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">insertOrAppendPlacementNode</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">,</span> before<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>该方法所做的工作分为三步：</p><ol><li>获取父级<code>DOM</code>节点。其中<code>finishedWork</code>为传入的<code>Fiber</code>节点。</li></ol><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> parentFiber <span class="token operator">=</span> <span class="token function">getHostParentFiber</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 父级DOM节点</span><span class="token keyword">const</span> parentStateNode <span class="token operator">=</span> parentFiber<span class="token punctuation">.</span>stateNode<span class="token punctuation">;</span></code></pre><ol start="2"><li>获取<code>Fiber</code>节点的<code>DOM</code>兄弟节点</li></ol><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> before <span class="token operator">=</span> <span class="token function">getHostSibling</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>根据<code>DOM</code>兄弟节点是否存在决定调用<code>parentNode.insertBefore</code>或<code>parentNode.appendChild</code>执行<code>DOM</code>插入操作。</li></ol><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// parentStateNode是否是rootFiber</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">insertOrAppendPlacementNodeIntoContainer</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">,</span> before<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token function">insertOrAppendPlacementNode</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">,</span> before<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>值得注意的是，<code>getHostSibling</code>（获取兄弟<code>DOM</code>节点）的执行很耗时，当在同一个父<code>Fiber</code>节点下依次执行多个插入操作，<code>getHostSibling</code>算法的复杂度为指数级。<br>这是由于<code>Fiber</code>节点不只包括<code>HostComponent</code>，所以<code>Fiber</code>树和渲染的<code>DOM</code>树节点并不是一一对应的。要从<code>Fiber</code>节点找到<code>DOM</code>节点很可能跨层级遍历。<br>考虑如下例子：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">Item</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>Item<span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对应的<code>Fiber</code>树和<code>DOM</code>树结构为：</p><pre><code>// Fiber树child      child      child       childrootFiber -----&gt; App -----&gt; div -----&gt; Item -----&gt; li// DOM树#root ---&gt; div ---&gt; li</code></pre><p>当在<code>div</code>的子节点<code>Item</code>前插入一个新节点<code>p</code>，即<code>App</code>变为：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>Item <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对应的<code>Fiber</code>树和<code>DOM</code>树结构为：</p><pre><code>// Fiber树          child      child      childrootFiber -----&gt; App -----&gt; div -----&gt; p                                       | sibling       child                                       | -------&gt; Item -----&gt; li// DOM树#root ---&gt; div ---&gt; p             |               ---&gt; li</code></pre><p>此时<code>DOM</code>节点 <code>p</code>的兄弟节点为<code>li</code>，而<code>Fiber</code>节点 <code>p</code>对应的兄弟<code>DOM</code>节点为：</p><pre><code>fiberP.sibling.child</code></pre><p>即<code>fiber p</code>的兄弟<code>fiber Item</code>的子<code>fiber li</code></p><h2 id="Update-effect"><a href="#Update-effect" class="headerlink" title="Update effect"></a>Update effect</h2><p>当<code>Fiber</code>节点含有<code>Update effectTag</code>，意味着该<code>Fiber</code>节点需要更新。调用的方法为<code>commitWork</code>，他会根据<code>Fiber.tag</code>分别处理。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">commitWork</span><span class="token punctuation">(</span>current<span class="token punctuation">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> finishedWork<span class="token punctuation">:</span> Fiber<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> FunctionComponent<span class="token punctuation">:</span>    <span class="token keyword">case</span> ForwardRef<span class="token punctuation">:</span>    <span class="token keyword">case</span> MemoComponent<span class="token punctuation">:</span>    <span class="token keyword">case</span> SimpleMemoComponent<span class="token punctuation">:</span>    <span class="token keyword">case</span> Block<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 这些都是和functionComponent相关的</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>        enableProfilerTimer <span class="token operator">&amp;&amp;</span>        enableProfilerCommitHooks <span class="token operator">&amp;&amp;</span>        finishedWork<span class="token punctuation">.</span>mode <span class="token operator">&amp;</span> ProfileMode      <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token function">startLayoutEffectTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// useLayout的销毁函数</span>          <span class="token function">commitHookEffectListUnmount</span><span class="token punctuation">(</span>HookLayout <span class="token operator">|</span> HookHasEffect<span class="token punctuation">,</span> finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>          <span class="token function">recordLayoutEffectDuration</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">commitHookEffectListUnmount</span><span class="token punctuation">(</span>HookLayout <span class="token operator">|</span> HookHasEffect<span class="token punctuation">,</span> finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">case</span> ClassComponent<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// dom节点相关</span>    <span class="token keyword">case</span> HostComponent<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> instance<span class="token punctuation">:</span> Instance <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>stateNode<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Commit the work prepared earlier.</span>        <span class="token keyword">const</span> newProps <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>memoizedProps<span class="token punctuation">;</span>        <span class="token keyword">const</span> oldProps <span class="token operator">=</span> current <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> current<span class="token punctuation">.</span>memoizedProps <span class="token punctuation">:</span> newProps<span class="token punctuation">;</span>        <span class="token keyword">const</span> type <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>type<span class="token punctuation">;</span>        <span class="token keyword">const</span> updatePayload<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> UpdatePayload <span class="token operator">=</span> <span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>updateQueue<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        finishedWork<span class="token punctuation">.</span>updateQueue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>updatePayload <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 更新dom的属性</span>          <span class="token function">commitUpdate</span><span class="token punctuation">(</span>            instance<span class="token punctuation">,</span>            updatePayload<span class="token punctuation">,</span>            type<span class="token punctuation">,</span>            oldProps<span class="token punctuation">,</span>            newProps<span class="token punctuation">,</span>            finishedWork<span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">case</span> HostText<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> textInstance<span class="token punctuation">:</span> TextInstance <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>stateNode<span class="token punctuation">;</span>      <span class="token keyword">const</span> newText<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>memoizedProps<span class="token punctuation">;</span>      <span class="token keyword">const</span> oldText<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span>        current <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> current<span class="token punctuation">.</span>memoizedProps <span class="token punctuation">:</span> newText<span class="token punctuation">;</span>      <span class="token function">commitTextUpdate</span><span class="token punctuation">(</span>textInstance<span class="token punctuation">,</span> oldText<span class="token punctuation">,</span> newText<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">case</span> HostRoot<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>supportsHydration<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> root<span class="token punctuation">:</span> FiberRoot <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>stateNode<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>hydrate<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// We've just hydrated. No need to hydrate again.</span>          root<span class="token punctuation">.</span>hydrate <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>          <span class="token function">commitHydratedContainer</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>containerInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里我们主要关注<code>FunctionComponent</code>和<code>HostComponent</code>。</p><h3 id="FunctionComponent-mutation"><a href="#FunctionComponent-mutation" class="headerlink" title="FunctionComponent mutation"></a>FunctionComponent mutation</h3><p>当<code>fiber.tag</code>为<code>FunctionComponent</code>，会调用<code>commitHookEffectListUnmount</code>。该方法会遍历<code>effectList</code>，执行所有<code>useLayoutEffect hook</code>的销毁函数。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">commitHookEffectListUnmount</span><span class="token punctuation">(</span>tag<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> finishedWork<span class="token punctuation">:</span> Fiber<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> updateQueue<span class="token punctuation">:</span> FunctionComponentUpdateQueue <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>updateQueue<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> lastEffect <span class="token operator">=</span> updateQueue <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> updateQueue<span class="token punctuation">.</span>lastEffect <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>lastEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> firstEffect <span class="token operator">=</span> lastEffect<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">let</span> effect <span class="token operator">=</span> firstEffect<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>effect<span class="token punctuation">.</span>tag <span class="token operator">&amp;</span> tag<span class="token punctuation">)</span> <span class="token operator">===</span> tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Unmount</span>        <span class="token keyword">const</span> destroy <span class="token operator">=</span> effect<span class="token punctuation">.</span>destroy<span class="token punctuation">;</span>        effect<span class="token punctuation">.</span>destroy <span class="token operator">=</span> undefined<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>destroy <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      effect <span class="token operator">=</span> effect<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>effect <span class="token operator">!==</span> firstEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="HostComponent-mutation"><a href="#HostComponent-mutation" class="headerlink" title="HostComponent mutation"></a>HostComponent mutation</h3><p>当<code>fiber.tag</code>为<code>HostComponent</code>，会调用<code>commitUpdate</code>。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">commitUpdate</span><span class="token punctuation">(</span>  domElement<span class="token punctuation">:</span> Instance<span class="token punctuation">,</span>  updatePayload<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>mixed<span class="token operator">></span><span class="token punctuation">,</span>  type<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  oldProps<span class="token punctuation">:</span> Props<span class="token punctuation">,</span>  newProps<span class="token punctuation">:</span> Props<span class="token punctuation">,</span>  internalInstanceHandle<span class="token punctuation">:</span> Object<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Update the props handle so that we know which props are the ones with</span>  <span class="token comment" spellcheck="true">// with current event handlers.</span>  <span class="token function">updateFiberProps</span><span class="token punctuation">(</span>domElement<span class="token punctuation">,</span> newProps<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Apply the diff to the DOM node.</span>  <span class="token function">updateProperties</span><span class="token punctuation">(</span>domElement<span class="token punctuation">,</span> updatePayload<span class="token punctuation">,</span> type<span class="token punctuation">,</span> oldProps<span class="token punctuation">,</span> newProps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最终会在<code>updateProperties</code>中的<code>updateDOMProperties</code>中将<code>render</code>阶段 <code>completeWork</code>中为<code>Fiber</code>节点赋值的<code>updateQueue</code>对应的内容渲染在页面上。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">updateDOMProperties</span><span class="token punctuation">(</span>  domElement<span class="token punctuation">:</span> Element<span class="token punctuation">,</span>  updatePayload<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">,</span>  wasCustomComponentTag<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">,</span>  isCustomComponentTag<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// TODO: Handle wasCustomComponentTag</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> updatePayload<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> propKey <span class="token operator">=</span> updatePayload<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> propValue <span class="token operator">=</span> updatePayload<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 处理 style</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>propKey <span class="token operator">===</span> STYLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setValueForStyles</span><span class="token punctuation">(</span>domElement<span class="token punctuation">,</span> propValue<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 处理 DANGEROUSLY_SET_INNER_HTML</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>propKey <span class="token operator">===</span> DANGEROUSLY_SET_INNER_HTML<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setInnerHTML</span><span class="token punctuation">(</span>domElement<span class="token punctuation">,</span> propValue<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 处理 children</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>propKey <span class="token operator">===</span> CHILDREN<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setTextContent</span><span class="token punctuation">(</span>domElement<span class="token punctuation">,</span> propValue<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 处理剩余 props</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">setValueForProperty</span><span class="token punctuation">(</span>domElement<span class="token punctuation">,</span> propKey<span class="token punctuation">,</span> propValue<span class="token punctuation">,</span> isCustomComponentTag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Deletion-effect"><a href="#Deletion-effect" class="headerlink" title="Deletion effect"></a>Deletion effect</h2><p>当<code>Fiber</code>节点含有<code>Deletion effectTag</code>，意味着该<code>Fiber</code>节点对应的<code>DOM</code>节点需要从页面中删除。调用的方法为<code>commitDeletion</code>。</p><blockquote><p>你可以在<a href="https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/react-reconciler/src/ReactFiberCommitWork.new.js#L1421" target="_blank" rel="noopener">这里</a>看到 commitDeletion 源码</p></blockquote><p>这里主要关注<code>unmountHostComponents</code>中的<code>commitNestedUnmounts</code>中的<code>commitUnmount</code>方法</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">commitUnmount</span><span class="token punctuation">(</span>  finishedRoot<span class="token punctuation">:</span> FiberRoot<span class="token punctuation">,</span>  current<span class="token punctuation">:</span> Fiber<span class="token punctuation">,</span>  renderPriorityLevel<span class="token punctuation">:</span> ReactPriorityLevel<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>  <span class="token function">onCommitUnmount</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> FunctionComponent<span class="token punctuation">:</span>    <span class="token keyword">case</span> ForwardRef<span class="token punctuation">:</span>    <span class="token keyword">case</span> MemoComponent<span class="token punctuation">:</span>    <span class="token keyword">case</span> SimpleMemoComponent<span class="token punctuation">:</span>    <span class="token keyword">case</span> Block<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> updateQueue<span class="token punctuation">:</span> FunctionComponentUpdateQueue <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>updateQueue<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>updateQueue <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> lastEffect <span class="token operator">=</span> updateQueue<span class="token punctuation">.</span>lastEffect<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> firstEffect <span class="token operator">=</span> lastEffect<span class="token punctuation">.</span>next<span class="token punctuation">;</span>          <span class="token keyword">let</span> effect <span class="token operator">=</span> firstEffect<span class="token punctuation">;</span>          <span class="token keyword">do</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> <span class="token punctuation">{</span>destroy<span class="token punctuation">,</span> tag<span class="token punctuation">}</span> <span class="token operator">=</span> effect<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>destroy <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tag <span class="token operator">&amp;</span> HookPassive<span class="token punctuation">)</span> <span class="token operator">!==</span> NoHookEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 当functionComponent被销毁时，useEffect的销毁函数也会被执行</span>                <span class="token function">enqueuePendingPassiveHookEffectUnmount</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> effect<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>                  enableProfilerTimer <span class="token operator">&amp;&amp;</span>                  enableProfilerCommitHooks <span class="token operator">&amp;&amp;</span>                  current<span class="token punctuation">.</span>mode <span class="token operator">&amp;</span> ProfileMode                <span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token function">startLayoutEffectTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token function">safelyCallDestroy</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> destroy<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token function">recordLayoutEffectDuration</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                  <span class="token function">safelyCallDestroy</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> destroy<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            effect <span class="token operator">=</span> effect<span class="token punctuation">.</span>next<span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>effect <span class="token operator">!==</span> firstEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">case</span> ClassComponent<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">safelyDetachRef</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> instance <span class="token operator">=</span> current<span class="token punctuation">.</span>stateNode<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> instance<span class="token punctuation">.</span>componentWillUnmount <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 会执行componentWillUnmount钩子函数</span>        <span class="token function">safelyCallComponentWillUnmount</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">case</span> HostComponent<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 解绑ref属性</span>      <span class="token function">safelyDetachRef</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>该方法会执行如下操作：</p><ol><li>递归调用<code>Fiber</code>节点及其子孙<code>Fiber</code>节点中<code>fiber.tag</code>为<code>ClassComponent</code>的<code>componentWillUnmount</code>生命周期钩子，从页面移除<code>Fiber</code>节点对应<code>DOM</code>节点</li><li>解绑<code>ref</code></li><li>调度<code>useEffect</code>的销毁函数</li></ol><h1 id="layout-阶段"><a href="#layout-阶段" class="headerlink" title="layout 阶段"></a>layout 阶段</h1><p>该阶段之所以称为<code>layout</code>，因为该阶段的代码都是在<code>DOM</code>渲染完成（<code>mutation</code>阶段完成）后执行的。<br>该阶段触发的生命周期钩子和<code>hook</code>可以直接访问到已经改变后的<code>DOM</code>，即该阶段是可以参与<code>DOM layout</code>的阶段。<br>与前两个阶段类似，<code>layout</code>阶段会遍历<code>effectList</code>，依次执行<code>commitLayoutEffects</code>。该方法的主要工作为“根据<code>effectTag</code>调用不同的处理函数处理<code>Fiber</code>并更新<code>ref</code>。<br>具体执行的函数是<code>commitLayoutEffects</code>。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// commit阶段完成后，currentFiber就会指向已经渲染好的fiber</span>root<span class="token punctuation">.</span>current <span class="token operator">=</span> finishedWork<span class="token punctuation">;</span>nextEffect <span class="token operator">=</span> firstEffect<span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token function">commitLayoutEffects</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> lanes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">invariant</span><span class="token punctuation">(</span>nextEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"Should be working on an effect."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">captureCommitPhaseError</span><span class="token punctuation">(</span>nextEffect<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>    nextEffect <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>nextEffect<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>nextEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nextEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre><h2 id="commitLayoutEffects"><a href="#commitLayoutEffects" class="headerlink" title="commitLayoutEffects"></a>commitLayoutEffects</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">commitLayoutEffects</span><span class="token punctuation">(</span>root<span class="token punctuation">:</span> FiberRoot<span class="token punctuation">,</span> committedLanes<span class="token punctuation">:</span> Lanes<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>nextEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> effectTag <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>effectTag<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用生命周期钩子和hook</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>effectTag <span class="token operator">&amp;</span> <span class="token punctuation">(</span>Update <span class="token operator">|</span> Callback<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> current <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>      <span class="token function">commitLayoutEffectOnFiber</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> current<span class="token punctuation">,</span> nextEffect<span class="token punctuation">,</span> committedLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 赋值ref</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>effectTag <span class="token operator">&amp;</span> Ref<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">commitAttachRef</span><span class="token punctuation">(</span>nextEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    nextEffect <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>nextEffect<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>commitLayoutEffects</code>一共做了两件事：</p><ol><li><code>commitLayoutEffectOnFiber</code>（调用生命周期钩子和<code>hook</code>相关操作）</li><li><code>commitAttachRef</code>（赋值 <code>ref</code>）</li></ol><h2 id="commitLayoutEffectOnFiber"><a href="#commitLayoutEffectOnFiber" class="headerlink" title="commitLayoutEffectOnFiber"></a>commitLayoutEffectOnFiber</h2><p><code>commitLayoutEffectOnFiber(commitLifeCycles)</code>方法会根据<code>fiber.tag</code>对不同类型的节点分别处理。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">commitLifeCycles</span><span class="token punctuation">(</span>  finishedRoot<span class="token punctuation">:</span> FiberRoot<span class="token punctuation">,</span>  current<span class="token punctuation">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  finishedWork<span class="token punctuation">:</span> Fiber<span class="token punctuation">,</span>  committedLanes<span class="token punctuation">:</span> Lanes<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> FunctionComponent<span class="token punctuation">:</span>    <span class="token keyword">case</span> ForwardRef<span class="token punctuation">:</span>    <span class="token keyword">case</span> SimpleMemoComponent<span class="token punctuation">:</span>    <span class="token keyword">case</span> Block<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>        enableProfilerTimer <span class="token operator">&amp;&amp;</span>        enableProfilerCommitHooks <span class="token operator">&amp;&amp;</span>        finishedWork<span class="token punctuation">.</span>mode <span class="token operator">&amp;</span> ProfileMode      <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token function">startLayoutEffectTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">commitHookEffectListMount</span><span class="token punctuation">(</span>HookLayout <span class="token operator">|</span> HookHasEffect<span class="token punctuation">,</span> finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>          <span class="token function">recordLayoutEffectDuration</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">commitHookEffectListMount</span><span class="token punctuation">(</span>HookLayout <span class="token operator">|</span> HookHasEffect<span class="token punctuation">,</span> finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">schedulePassiveEffects</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">case</span> ClassComponent<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> instance <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>stateNode<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span> Update<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>            enableProfilerTimer <span class="token operator">&amp;&amp;</span>            enableProfilerCommitHooks <span class="token operator">&amp;&amp;</span>            finishedWork<span class="token punctuation">.</span>mode <span class="token operator">&amp;</span> ProfileMode          <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token function">startLayoutEffectTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              instance<span class="token punctuation">.</span><span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>              <span class="token function">recordLayoutEffectDuration</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            instance<span class="token punctuation">.</span><span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> prevProps <span class="token operator">=</span>            finishedWork<span class="token punctuation">.</span>elementType <span class="token operator">===</span> finishedWork<span class="token punctuation">.</span>type              <span class="token operator">?</span> current<span class="token punctuation">.</span>memoizedProps              <span class="token punctuation">:</span> <span class="token function">resolveDefaultProps</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>type<span class="token punctuation">,</span> current<span class="token punctuation">.</span>memoizedProps<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">const</span> prevState <span class="token operator">=</span> current<span class="token punctuation">.</span>memoizedState<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>            enableProfilerTimer <span class="token operator">&amp;&amp;</span>            enableProfilerCommitHooks <span class="token operator">&amp;&amp;</span>            finishedWork<span class="token punctuation">.</span>mode <span class="token operator">&amp;</span> ProfileMode          <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token function">startLayoutEffectTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              instance<span class="token punctuation">.</span><span class="token function">componentDidUpdate</span><span class="token punctuation">(</span>                prevProps<span class="token punctuation">,</span>                prevState<span class="token punctuation">,</span>                instance<span class="token punctuation">.</span>__reactInternalSnapshotBeforeUpdate<span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>              <span class="token function">recordLayoutEffectDuration</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            instance<span class="token punctuation">.</span><span class="token function">componentDidUpdate</span><span class="token punctuation">(</span>              prevProps<span class="token punctuation">,</span>              prevState<span class="token punctuation">,</span>              instance<span class="token punctuation">.</span>__reactInternalSnapshotBeforeUpdate<span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">const</span> updateQueue<span class="token punctuation">:</span> UpdateQueue<span class="token operator">&lt;</span>        <span class="token operator">*</span><span class="token punctuation">,</span>      <span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>updateQueue<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>updateQueue <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">commitUpdateQueue</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">,</span> updateQueue<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">case</span> HostRoot<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// TODO: I think this is now always non-null by the time it reaches the</span>      <span class="token comment" spellcheck="true">// commit phase. Consider removing the type check.</span>      <span class="token keyword">const</span> updateQueue<span class="token punctuation">:</span> UpdateQueue<span class="token operator">&lt;</span>        <span class="token operator">*</span><span class="token punctuation">,</span>      <span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>updateQueue<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>updateQueue <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>child <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">switch</span> <span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>child<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> HostComponent<span class="token punctuation">:</span>              instance <span class="token operator">=</span> <span class="token function">getPublicInstance</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>child<span class="token punctuation">.</span>stateNode<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> ClassComponent<span class="token punctuation">:</span>              instance <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>child<span class="token punctuation">.</span>stateNode<span class="token punctuation">;</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">commitUpdateQueue</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">,</span> updateQueue<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">case</span> HostComponent<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> instance<span class="token punctuation">:</span> Instance <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>stateNode<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> finishedWork<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span> Update<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> type <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>type<span class="token punctuation">;</span>        <span class="token keyword">const</span> props <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>memoizedProps<span class="token punctuation">;</span>        <span class="token function">commitMount</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> type<span class="token punctuation">,</span> props<span class="token punctuation">,</span> finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>对于<code>FunctionComponent</code>及相关类型，他会调用<code>useLayoutEffect hook</code>的回调函数，调度<code>useEffect</code>的销毁与回调函数<blockquote><p>相关类型指特殊处理后的<code>FunctionComponent</code>，比如<code>ForwardRef</code>、<code>React.memo</code>包裹的<code>FunctionComponent</code></p></blockquote></li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">switch</span> <span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 以下都是FunctionComponent及相关类型</span>    <span class="token keyword">case</span> FunctionComponent<span class="token punctuation">:</span>    <span class="token keyword">case</span> ForwardRef<span class="token punctuation">:</span>    <span class="token keyword">case</span> SimpleMemoComponent<span class="token punctuation">:</span>    <span class="token keyword">case</span> Block<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 执行useLayoutEffect的回调函数</span>      <span class="token function">commitHookEffectListMount</span><span class="token punctuation">(</span>HookLayout <span class="token operator">|</span> HookHasEffect<span class="token punctuation">,</span> finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 调度useEffect的销毁函数与回调函数</span>      <span class="token function">schedulePassiveEffects</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FoDDpT2emLK3wR4FbtQ_6VWrT0HH.png"><br>由于<code>mutation</code>阶段会执行<code>useLayoutEffect hook</code>的销毁函数。<br>结合这里我们可以发现，<code>useLayoutEffect hook</code>从上一次更新的销毁函数调用到本次更新的回调函数调用是同步执行的。<br>而<code>useEffect</code>则需要先调度，在<code>Layout</code>阶段完成后再异步执行。<br>这就是<code>useLayoutEffect</code>与<code>useEffect</code>的区别。</p><ul><li>对于<code>ClassComponent</code>，他会通过<code>current === null?</code>区分是<code>mount</code>还是<code>update</code>，调用<a href="https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/react-reconciler/src/ReactFiberCommitWork.new.js#L538" target="_blank" rel="noopener">componentDidMount</a>或<a href="https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/react-reconciler/src/ReactFiberCommitWork.new.js#L592" target="_blank" rel="noopener">componentDidUpdate</a>。</li></ul><p>触发状态更新的<code>this.setState</code>如果赋值了第二个参数回调函数，也会在此时调用。</p><h2 id="commitAttachRef"><a href="#commitAttachRef" class="headerlink" title="commitAttachRef"></a>commitAttachRef</h2><blockquote><p><code>commitLayoutEffects</code>会做的第二件事是<code>commitAttachRef</code>，获取<code>DOM</code>实例，更新<code>ref</code>。</p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">commitAttachRef</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">:</span> Fiber<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> ref <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>ref<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ref <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取DOM实例</span>    <span class="token keyword">const</span> instance <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>stateNode<span class="token punctuation">;</span>    <span class="token keyword">let</span> instanceToUse<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> HostComponent<span class="token punctuation">:</span>        instanceToUse <span class="token operator">=</span> <span class="token function">getPublicInstance</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        instanceToUse <span class="token operator">=</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>enableScopeAPI <span class="token operator">&amp;&amp;</span> finishedWork<span class="token punctuation">.</span>tag <span class="token operator">===</span> ScopeComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>      instanceToUse <span class="token operator">=</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> ref <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果ref是函数形式，调用回调函数</span>      <span class="token function">ref</span><span class="token punctuation">(</span>instanceToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果ref是ref实例形式，赋值ref.current</span>      ref<span class="token punctuation">.</span>current <span class="token operator">=</span> instanceToUse<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="current-Fiber-树切换"><a href="#current-Fiber-树切换" class="headerlink" title="current Fiber 树切换"></a>current Fiber 树切换</h2><p>至此，整个 layout 阶段就结束了。<br>前面也讲过，在 layout 阶段开始之前，有这么一段代码：</p><pre class=" language-typescript"><code class="language-typescript">root<span class="token punctuation">.</span>current <span class="token operator">=</span> finishedWork<span class="token punctuation">;</span></code></pre><p>由于在双缓存机制，<code>workInProgress Fiber</code>树在<code>commit</code>阶段完成渲染后会变为<code>current Fiber</code>树。这行代码的作用就是切换<code>fiberRootNode</code>指向的<code>current Fiber</code>树。<br>那么这行代码为什么在这里呢？（在<code>mutation</code>阶段结束后，<code>layout</code>阶段开始前。）<br>那是因为<code>componentWillUnmount</code>会在<code>mutation</code>阶段执行。此时<code>current Fiber</code>树还指向前一次更新的<code>Fiber</code>树，在生命周期钩子内获取的<code>DOM</code>还是更新前的。<br>而<code>componentDidMount</code>和<code>componentDidUpdate</code>会在 layout 阶段执行。此时<code>current Fiber</code>树需要指向更新后的<code>Fiber</code>树，在生命周期钩子内获取的<code>DOM</code>就是更新后的。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 自顶向下学习React源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yuqe-hexo-with-cdn插件支持多图床</title>
      <link href="/nvikqw/"/>
      <url>/nvikqw/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><hr><p>前端时间写了<a href="https://www.yuque.com/1874w/1874.cool/osar7h" target="_blank" rel="noopener">yuque-hexo 插件语雀图片防盗链的解决方案</a>，当时是用的腾讯云图床，后面考虑到可以支持更多的图床选择。这次的改造新增了阿里云图床和七牛云图床。</p><h2 id="阿里云图床"><a href="#阿里云图床" class="headerlink" title="阿里云图床"></a>阿里云图床</h2><p>阿里云图床目前各大公司也都在用，技术成熟稳定，但也和腾讯云图床一样，是收费的。但是作为个人博客图床的话，腾讯云 COS 和阿里云 OSS 的费用都相当的便宜，一个月的费用大概都在几分钱到几毛钱的范围。</p><h2 id="七牛云图床"><a href="#七牛云图床" class="headerlink" title="七牛云图床"></a>七牛云图床</h2><p>七牛云图床为个人提供 10G 的免费存储空间和完全够用的免费读写流量，用来作为博客图床再合适不过了。缺点就是七牛云图床默认使用 CDN 域名进行外链访问，而且是 30 天的临时域名，所以建议绑定一个备案域名作为永久 CND 域名进行访问。</p><h1 id="改造思路"><a href="#改造思路" class="headerlink" title="改造思路"></a>改造思路</h1><p>由于各大图床的 API 使用方式不尽相同，所以需要抽离出一个适配层进行接口调用的统一，通过不同的配置获取不同的图床实例进行 API 操作。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FiiL9hp2VNTXJU0SlUAsPpLsouDS.png"><br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fhhlf0McPMjB-ly-QqWXkn9W3tG-.jpeg"></p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token operator">|</span><span class="token operator">--</span>imageBeds<span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>index                  <span class="token comment" spellcheck="true">//接口统一适配层</span><span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>cos<span class="token punctuation">.</span>js              <span class="token comment" spellcheck="true">//腾讯云图床API操作层</span><span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>oss<span class="token punctuation">.</span>js              <span class="token comment" spellcheck="true">//阿里云图床API操作层</span><span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>qiniu<span class="token punctuation">.</span>js          <span class="token comment" spellcheck="true">//七牛云图床API操作层</span></code></pre><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="接口统一适配层"><a href="#接口统一适配层" class="headerlink" title="接口统一适配层"></a>接口统一适配层</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// imageBeds/index.js</span><span class="token comment" spellcheck="true">// 接口统一适配层</span><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 引入图床实例</span><span class="token keyword">const</span> CosClient <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./cos"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> OssClient <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./oss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> QiniuClient <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./qiniu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> out <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../../lib/out"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 目前已适配图床列表</span><span class="token keyword">const</span> imageBedList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"qiniu"</span><span class="token punctuation">,</span> <span class="token string">"cos"</span><span class="token punctuation">,</span> <span class="token string">"oss"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ImageBeds</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 实例化时先赋值保存config配置</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> config<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取图床实例</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>imageBedInstance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getImageBedInstance</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>imageBed<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 单例模式</span>  <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageBeds</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 获取图床对象的实例   *   * @param {string} imageBed 图床类型: cos | oss   * @return {any} 图床实例   */</span>  <span class="token function">getImageBedInstance</span><span class="token punctuation">(</span>imageBed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>imageBedList<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>imageBed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      out<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`imageBed配置错误，目前只支持</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>imageBedList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>imageBed<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">"cos"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> CosClient<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">"oss"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> OssClient<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">"qiniu"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> QiniuClient<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> QiniuClient<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 检查图床是否已经存在图片，存在则返回url   *   * @param {string} fileName 文件名   * @return {Promise&lt;string>} 图片url   */</span>  async <span class="token function">hasImage</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> await <span class="token keyword">this</span><span class="token punctuation">.</span>imageBedInstance<span class="token punctuation">.</span><span class="token function">hasImage</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 上传图片到图床   *   * @param {Buffer} imgBuffer 文件buffer   * @param {string} fileName 文件名   * @return {Promise&lt;string>} 图床的图片url   */</span>  async <span class="token function">uploadImg</span><span class="token punctuation">(</span>imgBuffer<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> await <span class="token keyword">this</span><span class="token punctuation">.</span>imageBedInstance<span class="token punctuation">.</span><span class="token function">uploadImg</span><span class="token punctuation">(</span>imgBuffer<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> ImageBeds<span class="token punctuation">;</span></code></pre><h3 id="腾讯云图床-API-操作层"><a href="#腾讯云图床-API-操作层" class="headerlink" title="腾讯云图床 API 操作层"></a>腾讯云图床 API 操作层</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// imageBeds/cos.js</span><span class="token comment" spellcheck="true">// 腾讯云图床API操作层</span><span class="token comment" spellcheck="true">// 开发文档: https://cloud.tencent.com/document/product/436/8629</span><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 腾讯云图床</span><span class="token keyword">const</span> COS <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cos-nodejs-sdk-v5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> out <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../../lib/out"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> secretId <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>SECRET_ID<span class="token punctuation">;</span><span class="token keyword">const</span> secretKey <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>SECRET_KEY<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CosClient</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> config<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 实例化腾讯云COS</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>imageBedInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">COS</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      SecretId<span class="token punctuation">:</span> secretId<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 身份识别ID</span>      SecretKey<span class="token punctuation">:</span> secretKey<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 身份秘钥</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 单例模式</span>  <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CosClient</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 检查图床是否已经存在图片，存在则返回url,不存在返回空   *   * @param {string} fileName 文件名   * @return {Promise&lt;string>} 图片url   */</span>  async <span class="token function">hasImage</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      await <span class="token keyword">this</span><span class="token punctuation">.</span>imageBedInstance<span class="token punctuation">.</span><span class="token function">headObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        Bucket<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>bucket<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 存储桶名字（必须）</span>        Region<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>region<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 存储桶所在地域，必须字段</span>        Key<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>prefixKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//  文件名  必须</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`https://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>bucket<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.cos.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>region<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.myqcloud.com/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>prefixKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 上传图片到图床   *   * @param {Buffer} imgBuffer 文件buffer   * @param {string} fileName 文件名   * @return {Promise&lt;string>} 图床的图片url   */</span>  async <span class="token function">uploadImg</span><span class="token punctuation">(</span>imgBuffer<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> await <span class="token keyword">this</span><span class="token punctuation">.</span>imageBedInstance<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        Bucket<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>bucket<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 存储桶名字（必须）</span>        Region<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>region<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 存储桶所在地域，必须字段</span>        Key<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>prefixKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//  文件名  必须</span>        StorageClass<span class="token punctuation">:</span> <span class="token string">"STANDARD"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 上传模式（标准模式）</span>        Body<span class="token punctuation">:</span> imgBuffer<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 上传文件对象</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`https://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>res<span class="token punctuation">.</span>Location<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      out<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`上传图片失败，请检查: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> CosClient<span class="token punctuation">;</span></code></pre><h3 id="阿里云图床-API-操作层"><a href="#阿里云图床-API-操作层" class="headerlink" title="阿里云图床 API 操作层"></a>阿里云图床 API 操作层</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// imageBeds/oss.js</span><span class="token comment" spellcheck="true">// 阿里云图床API操作层</span><span class="token comment" spellcheck="true">// 开发文档: https://help.aliyun.com/document_detail/32067.html</span><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 阿里云图床</span><span class="token keyword">const</span> OSS <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"ali-oss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> out <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../../lib/out"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> secretId <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>SECRET_ID<span class="token punctuation">;</span><span class="token keyword">const</span> secretKey <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>SECRET_KEY<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">OssClient</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> config<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>imageBedInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSS</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      bucket<span class="token punctuation">:</span> config<span class="token punctuation">.</span>bucket<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// yourRegion填写Bucket所在地域。以华东1（杭州）为例，Region填写为oss-cn-hangzhou。</span>      region<span class="token punctuation">:</span> config<span class="token punctuation">.</span>region<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 阿里云账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM用户进行API访问或日常运维，请登录RAM控制台创建RAM用户。</span>      accessKeyId<span class="token punctuation">:</span> secretId<span class="token punctuation">,</span>      accessKeySecret<span class="token punctuation">:</span> secretKey<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 单例模式</span>  <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OssClient</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 检查图床是否已经存在图片，存在则返回url,不存在返回空   *   * @param {string} fileName 文件名   * @return {Promise&lt;string>} 图片url   */</span>  async <span class="token function">hasImage</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      await <span class="token keyword">this</span><span class="token punctuation">.</span>imageBedInstance<span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>prefixKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`https://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>bucket<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>region<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.aliyuncs.com/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>prefixKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 上传图片到图床   *   * @param {Buffer} imgBuffer 文件buffer   * @param {string} fileName 文件名   * @return {Promise&lt;string>} 图床的图片url   */</span>  async <span class="token function">uploadImg</span><span class="token punctuation">(</span>imgBuffer<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> await <span class="token keyword">this</span><span class="token punctuation">.</span>imageBedInstance<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>        <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>prefixKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>        imgBuffer      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span>url<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      out<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`上传图片失败，请检查: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> OssClient<span class="token punctuation">;</span></code></pre><h3 id="七牛云图床-API-操作层"><a href="#七牛云图床-API-操作层" class="headerlink" title="七牛云图床 API 操作层"></a>七牛云图床 API 操作层</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// imageBeds/qiniu.js</span><span class="token comment" spellcheck="true">// 七牛云图床API操作层</span><span class="token comment" spellcheck="true">// 七牛云的上传程序相对比较复杂，详情请查看sdk文档https://developer.qiniu.com/kodo/1289/nodejs</span><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 七牛云图床</span><span class="token keyword">const</span> qiniu <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"qiniu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> out <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../../lib/out"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> secretId <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>SECRET_ID<span class="token punctuation">;</span><span class="token keyword">const</span> secretKey <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>SECRET_KEY<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">QiniuClient</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> config<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>host<span class="token punctuation">)</span> <span class="token punctuation">{</span>      out<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"使用七牛云时，需要在imgCdn中指定域名host"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> mac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">qiniu<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>digest<span class="token punctuation">.</span>Mac</span><span class="token punctuation">(</span>secretId<span class="token punctuation">,</span> secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 配置</span>    <span class="token keyword">const</span> putPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">qiniu<span class="token punctuation">.</span>rs<span class="token punctuation">.</span>PutPolicy</span><span class="token punctuation">(</span><span class="token punctuation">{</span> scope<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>bucket <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取上传凭证</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>uploadToken <span class="token operator">=</span> putPolicy<span class="token punctuation">.</span><span class="token function">uploadToken</span><span class="token punctuation">(</span>mac<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">qiniu<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 空间对应的机房</span>    config<span class="token punctuation">.</span>zone <span class="token operator">=</span> qiniu<span class="token punctuation">.</span>zone<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>region<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>formUploader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">qiniu<span class="token punctuation">.</span>form_up<span class="token punctuation">.</span>FormUploader</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>bucketManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">qiniu<span class="token punctuation">.</span>rs<span class="token punctuation">.</span>BucketManager</span><span class="token punctuation">(</span>mac<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>putExtra <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">qiniu<span class="token punctuation">.</span>form_up<span class="token punctuation">.</span>PutExtra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QiniuClient</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 检查图床是否已经存在图片，存在则返回url,不存在返回空   *   * @param {string} fileName 文件名   * @return {Promise&lt;string>} 图片url   */</span>  async <span class="token function">hasImage</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> await <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>bucketManager<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>bucket<span class="token punctuation">,</span>        <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>prefixKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>        <span class="token punctuation">(</span>err<span class="token punctuation">,</span> respBody<span class="token punctuation">,</span> respInfo<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>            out<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`上传图片失败，请检查: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>err<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>respInfo<span class="token punctuation">.</span>statusCode <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">resolve</span><span class="token punctuation">(</span>                <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>host<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>prefixKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>              <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 上传图片到图床   *   * @param {Buffer} imgBuffer 文件buffer   * @param {string} fileName 文件名   * @return {Promise&lt;string>} 图床的图片url   */</span>  async <span class="token function">uploadImg</span><span class="token punctuation">(</span>imgBuffer<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> await <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>formUploader<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>uploadToken<span class="token punctuation">,</span>        <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>prefixKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>        imgBuffer<span class="token punctuation">,</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>putExtra<span class="token punctuation">,</span>        <span class="token punctuation">(</span>respErr<span class="token punctuation">,</span> respBody<span class="token punctuation">,</span> respInfo<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>respErr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            out<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`上传图片失败，请检查: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>respErr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>respInfo<span class="token punctuation">.</span>statusCode <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>host<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>prefixKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            out<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`上传图片失败，请检查: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>respInfo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> QiniuClient<span class="token punctuation">;</span></code></pre><h1 id="大功告成！"><a href="#大功告成！" class="headerlink" title="大功告成！"></a>大功告成！</h1><p>使用时，只需要在上层传入 config 配置，获取接口适配层实例，并替换原有的上传图片接口即可。</p><p>更多源代码详情，请查看<a href="https://github.com/LetTTGACO/yuque-hexo-with-cdn" target="_blank" rel="noopener">yuqe-hexo-with-cdn</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章 React架构-render阶段</title>
      <link href="/react-render/"/>
      <url>/react-render/</url>
      
        <content type="html"><![CDATA[<p><code>Fiber节点</code>是如何被创建并构建 Fiber 树？</p><p><code>render阶段</code>开始于<code>performSyncWorkOnRoot</code>或<code>performConcurrentWorkOnRoot</code>方法的调用。这取决于本次更新是同步更新还是异步更新。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token operator">/</span> performSyncWorkOnRoot会调用该方法<span class="token keyword">function</span> <span class="token function">workLoopSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>workInProgress <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// performConcurrentWorkOnRoot会调用该方法</span><span class="token keyword">function</span> <span class="token function">workLoopConcurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>workInProgress <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">shouldYield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到，他们唯一的区别是是否调用<code>shouldYield</code>。如果当前浏览器帧没有剩余时间，<code>shouldYield</code>会中止循环，直到浏览器有空闲时间后再继续遍历。<br><code>workInProgress</code>代表当前已创建的<code>workInProgress fiber</code>。<br><code>performUnitOfWork</code>方法会创建下一个<code>Fiber节点</code>并赋值给<code>workInProgress</code>，并将<code>workInProgress</code>与已创建的<code>Fiber节点</code>连接起来构成<code>Fiber树</code>。<br><code>Fiber Reconciler</code>是从<code>Stack Reconciler</code>重构而来，通过遍历的方式实现可中断的递归，所以<code>performUnitOfWork</code>的工作可以分为两部分：“递”和“归”。</p><h1 id="“递”阶段"><a href="#“递”阶段" class="headerlink" title="“递”阶段"></a>“递”阶段</h1><p>首先从<code>rootFiber</code>开始向下深度优先遍历。为遍历到的每个<code>Fiber节点</code>调用<a href="https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/react-reconciler/src/ReactFiberBeginWork.new.js#L3058" target="_blank" rel="noopener">beginWork</a>方法。<br>该方法会根据传入的<code>Fiber节点</code>创建<code>子Fiber节点</code>，并将这两个<code>Fiber节点</code>连接起来。<br>当遍历到叶子节点（即没有子组件的组件）时就会进入“归”阶段。</p><h1 id="“归”阶段"><a href="#“归”阶段" class="headerlink" title="“归”阶段"></a>“归”阶段</h1><p>在“归”阶段会调用<a href="https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/react-reconciler/src/ReactFiberCompleteWork.new.js#L652" target="_blank" rel="noopener">completeWork</a>处理<code>Fiber节点</code>。<br>当某个<code>Fiber节点</code>执行完<code>completeWork</code>，如果其存在<code>兄弟Fiber节点</code>（即<code>fiber.sibling !== null</code>），会进入其<code>兄弟Fiber</code>的“递”阶段。<br>如果不存在<code>兄弟Fiber</code>，会进入<code>父级Fiber</code>的“归”阶段。<br>“递”和“归”阶段会交错执行直到“归”到 rootFiber。至此，render 阶段的工作就结束了。</p><h1 id="举个-🌰"><a href="#举个-🌰" class="headerlink" title="举个 🌰"></a>举个 🌰</h1><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      i am      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token number">1874</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对应的<code>Fiber树</code>结构：<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fr1PqG_iJcm7n6aZtHFfEHK4VuKT.png"><br><code>render阶段</code>会依次执行：</p><pre class=" language-bash"><code class="language-bash">1. rootFiber beginWork2. App Fiber beginWork3. div Fiber beginWork4. <span class="token string">"i am"</span> Fiber beginWork5. <span class="token string">"i am"</span> Fiber completeWork6. span Fiber beginWork7. span Fiber completeWork8. div Fiber completeWork9. App Fiber completeWork10. rootFiber completeWork</code></pre><blockquote><p>注意<br>之所以没有 “1874” Fiber 的 beginWork/completeWork，是因为作为一种性能优化手段，针对只有单一文本子节点的<code>Fiber</code>，<code>React</code>会特殊处理。</p></blockquote><h1 id="beginWork"><a href="#beginWork" class="headerlink" title="beginWork"></a>beginWork</h1><h2 id="流程概述"><a href="#流程概述" class="headerlink" title="流程概述"></a>流程概述</h2><p>可以从<a href="https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberBeginWork.new.js#L3075" target="_blank" rel="noopener">源码这里</a>看到 beginWork 的定义。整个方法大概有 500 行代码。beginWork 的工作是传入当前 Fiber 节点，创建子 Fiber 节点。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 从传参看方法执行</span><span class="token keyword">function</span> <span class="token function">beginWork</span><span class="token punctuation">(</span>  current<span class="token punctuation">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  workInProgress<span class="token punctuation">:</span> Fiber<span class="token punctuation">,</span>  renderLanes<span class="token punctuation">:</span> Lanes<span class="token punctuation">)</span><span class="token punctuation">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...省略函数体</span><span class="token punctuation">}</span></code></pre><p>其中传参：</p><ul><li>current：当前组件对应的<code>Fiber节点</code>在上一次更新时的<code>Fiber节点</code>，即<code>workInProgress.alternate</code></li><li>workInProgress：当前组件对应的<code>Fiber节点</code></li><li>renderLanes：优先级相关</li></ul><p>除<code>rootFiber</code>以外， 组件<code>mount</code>时，由于是首次渲染，是不存在当前组件对应的<code>Fiber节点</code>在上一次更新时的<code>Fiber节点</code>，即<code>mount</code>时<code>current === null</code>。<br>组件<code>update</code>时，由于之前已经<code>mount</code>过，所以<code>current !== null</code>。<br>所以我们可以通过<code>current === null ?</code>来区分组件是处于<code>mount</code>还是<code>update</code>。<br>基于此原因，<code>beginWork</code>的工作可以分为两部分：</p><ul><li><code>update</code>时：如果<code>current</code>存在，在满足一定条件时可以复用<code>current</code>节点，这样就能克隆<code>current.child</code>作为<code>workInProgress.child</code>，而不需要新建<code>workInProgress.child</code>。</li><li><code>mount</code>时：除<code>fiberRootNode</code>以外，<code>current === null</code>。会根据<code>fiber.tag</code>不同，创建不同类型的<code>子Fiber节点</code></li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">beginWork</span><span class="token punctuation">(</span>  current<span class="token punctuation">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  workInProgress<span class="token punctuation">:</span> Fiber<span class="token punctuation">,</span>  renderLanes<span class="token punctuation">:</span> Lanes<span class="token punctuation">)</span><span class="token punctuation">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// update时：如果current存在可能存在优化路径，可以复用current（即上一次更新的Fiber节点）</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...省略</span>    <span class="token comment" spellcheck="true">// 复用current</span>    <span class="token keyword">return</span> <span class="token function">bailoutOnAlreadyFinishedWork</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    didReceiveUpdate <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// mount时：根据tag不同，创建不同的子Fiber节点</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>workInProgress<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> IndeterminateComponent<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">// ...省略</span>    <span class="token keyword">case</span> LazyComponent<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">// ...省略</span>    <span class="token keyword">case</span> FunctionComponent<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">// ...省略</span>    <span class="token keyword">case</span> ClassComponent<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">// ...省略</span>    <span class="token keyword">case</span> HostRoot<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">// ...省略</span>    <span class="token keyword">case</span> HostComponent<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">// ...省略</span>    <span class="token keyword">case</span> HostText<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">// ...省略</span>    <span class="token comment" spellcheck="true">// ...省略其他类型</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="update-时"><a href="#update-时" class="headerlink" title="update 时"></a>update 时</h2><p>可以看到，满足如下情况时<code>didReceiveUpdate === false</code>（即可以直接复用前一次更新的<code>子Fiber</code>，不需要新建<code>子Fiber</code>）</p><ul><li><code>oldProps === newProps &amp;&amp; workInProgress.type === current.type</code>，即<code>props</code>与<code>fiber.type</code>不变</li><li><code>!includesSomeLane(renderLanes, updateLanes)</code>，即当前<code>Fiber节点</code>优先级不够。</li></ul><h2 id="mount-时"><a href="#mount-时" class="headerlink" title="mount 时"></a>mount 时</h2><p>当不满足优化路径时，就会新建<code>子Fiber</code>。根据<code>fiber.tag</code>不同，进入不同类型<code>Fiber</code>的创建逻辑。</p><blockquote><p>可以从<a href="https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactWorkTags.js" target="_blank" rel="noopener">这里</a>看到 tag 对应的组件类型</p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// mount时：根据tag不同，创建不同的Fiber节点</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>workInProgress<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">case</span> IndeterminateComponent<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">// ...省略</span>  <span class="token keyword">case</span> LazyComponent<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">// ...省略</span>  <span class="token keyword">case</span> FunctionComponent<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">// ...省略</span>  <span class="token keyword">case</span> ClassComponent<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">// ...省略</span>  <span class="token keyword">case</span> HostRoot<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">// ...省略</span>  <span class="token keyword">case</span> HostComponent<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">// ...省略</span>  <span class="token keyword">case</span> HostText<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">// ...省略</span>  <span class="token comment" spellcheck="true">// ...省略其他类型</span><span class="token punctuation">}</span></code></pre><p>对于我们常见的组件类型，如<code>FunctionComponent/ClassComponent/HostComponent</code>，最终会进入<a href="https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberBeginWork.new.js#L233" target="_blank" rel="noopener">reconcileChildren</a>方法。</p><h2 id="reconcileChildren"><a href="#reconcileChildren" class="headerlink" title="reconcileChildren"></a>reconcileChildren</h2><p>从该函数名就能看出这是<code>Reconciler</code>模块的核心部分。那么他究竟做了什么呢？</p><ul><li>对于<code>mount</code>的组件，他会创建新的<code>子Fiber节点</code></li><li>对于<code>update</code>的组件，他会将当前组件与该组件在上次更新时对应的<code>Fiber节点</code>比较（也就是俗称的<code>Diff算法</code>），将比较的结果生成<code>新Fiber节点</code></li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">reconcileChildren</span><span class="token punctuation">(</span>  current<span class="token punctuation">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  workInProgress<span class="token punctuation">:</span> Fiber<span class="token punctuation">,</span>  nextChildren<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span>  renderLanes<span class="token punctuation">:</span> Lanes<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对于mount的组件</span>    workInProgress<span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token function">mountChildFibers</span><span class="token punctuation">(</span>      workInProgress<span class="token punctuation">,</span>      <span class="token keyword">null</span><span class="token punctuation">,</span>      nextChildren<span class="token punctuation">,</span>      renderLanes    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对于update的组件</span>    workInProgress<span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token function">reconcileChildFibers</span><span class="token punctuation">(</span>      workInProgress<span class="token punctuation">,</span>      current<span class="token punctuation">.</span>child<span class="token punctuation">,</span>      nextChildren<span class="token punctuation">,</span>      renderLanes    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从代码可以看出，和<code>beginWork</code>一样，他也是通过<code>current === null ?</code>区分<code>mount</code>与<code>update</code>。<br>不论走哪个逻辑，最终他会生成新的<code>子Fiber节点</code>并赋值给<code>workInProgress.child</code>，作为本次<code>beginWork</code><a href="https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberBeginWork.new.js#L1158" target="_blank" rel="noopener">返回值</a>，并作为下次<code>performUnitOfWork</code>执行时<code>workInProgress</code>的<a href="https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L1702" target="_blank" rel="noopener">传参</a>。</p><blockquote><p><strong>注意</strong><br>值得一提的是，<code>mountChildFibers</code>与<code>reconcileChildFibers</code>这两个方法的逻辑基本一致。唯一的区别是：<code>reconcileChildFibers</code>会为生成的<code>Fiber节点</code>带上<code>effectTag</code>属性，而<code>mountChildFibers</code>不会。</p></blockquote><h2 id="effectTag"><a href="#effectTag" class="headerlink" title="effectTag"></a>effectTag</h2><p>我们知道，<code>render</code>阶段的工作是在内存中进行，当工作结束后会通知<code>Renderer</code>需要执行的<code>DOM</code>操作。要执行<code>DOM</code>操作的具体类型就保存在<code>fiber.effectTag</code>中。</p><blockquote><p>你可以从<a href="https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactSideEffectTags.js" target="_blank" rel="noopener">这里</a>看到<code>effectTag</code>对应的<code>DOM</code>操作</p></blockquote><p>比如：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 通过二进制表示effectTag，可以方便的使用位操作为fiber.effectTag赋值多个effect。</span><span class="token comment" spellcheck="true">// DOM需要插入到页面中</span><span class="token keyword">export</span> <span class="token keyword">const</span> Placement <span class="token operator">=</span> <span class="token comment" spellcheck="true">/*                */</span> <span class="token number">0b00000000000010</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// DOM需要更新</span><span class="token keyword">export</span> <span class="token keyword">const</span> Update <span class="token operator">=</span> <span class="token comment" spellcheck="true">/*                   */</span> <span class="token number">0b00000000000100</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// DOM需要插入到页面中并更新</span><span class="token keyword">export</span> <span class="token keyword">const</span> PlacementAndUpdate <span class="token operator">=</span> <span class="token comment" spellcheck="true">/*       */</span> <span class="token number">0b00000000000110</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// DOM需要删除</span><span class="token keyword">export</span> <span class="token keyword">const</span> Deletion <span class="token operator">=</span> <span class="token comment" spellcheck="true">/*                 */</span> <span class="token number">0b00000000001000</span><span class="token punctuation">;</span></code></pre><p>那么，如果要通知<code>Renderer</code>将<code>Fiber节点</code>对应的<code>DOM</code>节点插入页面中，需要满足两个条件：</p><ol><li><code>fiber.stateNode</code>存在，即<code>Fiber节点</code>中保存了对应的<code>DOM</code>节点</li><li><code>(fiber.effectTag &amp; Placement) !== 0</code>，即<code>Fiber节点</code>存在<code>Placement effectTag</code></li></ol><p>我们知道，<code>mount</code>时，<code>fiber.stateNode === null</code>，且在<code>reconcileChildren</code>中调用的<code>mountChildFibers</code>不会为<code>Fiber节点</code>赋值<code>effectTag</code>。那么首屏渲染如何完成呢？<br>针对第一个问题，<code>fiber.stateNode</code>会在<code>completeWork</code>中创建。<br>第二个问题的答案十分巧妙：假设<code>mountChildFibers</code>也会赋值<code>effectTag</code>，那么可以预见<code>mount</code>时整棵 Fiber 树所有节点都会有<code>Placement effectTag</code>。那么<code>commit</code>阶段在执行<code>DOM</code>操作时每个节点都会执行一次插入操作，这样大量的<code>DOM</code>操作是极低效的。<br>为了解决这个问题，在<code>mount</code>时只有<code>rootFiber</code>会赋值<code>Placement effectTag</code>，在<code>commit</code>阶段只会执行一次插入操作。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FuLcsbmdRwcZCodGOlPpjfxxuSdi.png"></p><h1 id="completeWork"><a href="#completeWork" class="headerlink" title="completeWork"></a>completeWork</h1><p>类似<code>beginWork</code>，<code>completeWork</code>也是针对不同<code>fiber.tag</code>调用不同的处理逻辑。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">completeWork</span><span class="token punctuation">(</span>  current<span class="token punctuation">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  workInProgress<span class="token punctuation">:</span> Fiber<span class="token punctuation">,</span>  renderLanes<span class="token punctuation">:</span> Lanes<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> newProps <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>workInProgress<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> IndeterminateComponent<span class="token punctuation">:</span>    <span class="token keyword">case</span> LazyComponent<span class="token punctuation">:</span>    <span class="token keyword">case</span> SimpleMemoComponent<span class="token punctuation">:</span>    <span class="token keyword">case</span> FunctionComponent<span class="token punctuation">:</span>    <span class="token keyword">case</span> ForwardRef<span class="token punctuation">:</span>    <span class="token keyword">case</span> Fragment<span class="token punctuation">:</span>    <span class="token keyword">case</span> Mode<span class="token punctuation">:</span>    <span class="token keyword">case</span> Profiler<span class="token punctuation">:</span>    <span class="token keyword">case</span> ContextConsumer<span class="token punctuation">:</span>    <span class="token keyword">case</span> MemoComponent<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> ClassComponent<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ...省略</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">case</span> HostRoot<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ...省略</span>      <span class="token function">updateHostContainer</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">case</span> HostComponent<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ...省略</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ...省略</span></code></pre><p>先重点关注页面渲染所必须的<code>HostComponent</code>（即原生<code>DOM</code>组件对应的<code>Fiber节点</code>）。</p><h2 id="处理-HostComponent"><a href="#处理-HostComponent" class="headerlink" title="处理 HostComponent"></a>处理 HostComponent</h2><p>和<code>beginWork</code>一样，是根据<code>current === null ?</code>判断是<code>mount</code>还是<code>update</code>。<br>同时针对<code>HostComponent</code>，判断<code>update</code>时我们还需要考虑<code>workInProgress.stateNode != null ?</code>（即该<code>Fiber节点</code>是否存在对应的<code>DOM</code>节点）。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">case</span> HostComponent<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">popHostContext</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> rootContainerInstance <span class="token operator">=</span> <span class="token function">getRootHostContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> type <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>type<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> workInProgress<span class="token punctuation">.</span>stateNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// update的情况</span>    <span class="token comment" spellcheck="true">// ...省略</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// mount的情况</span>    <span class="token comment" spellcheck="true">// ...省略</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="update-时-1"><a href="#update-时-1" class="headerlink" title="update 时"></a>update 时</h2><p>当<code>update</code>时，<code>Fiber节点</code>已经存在对应<code>DOM</code>节点，所以不需要生成<code>DOM</code>节点。需要做的主要是处理<code>props</code>，比如：</p><ul><li><code>onClick</code>、<code>onChange</code>等回调函数的注册</li><li>处理<code>style prop</code></li><li>处理<code>DANGEROUSLY_SET_INNER_HTML prop</code></li><li>处理<code>children prop</code></li></ul><p>去掉一些当前不需要关注的功能（比如<code>ref</code>）。可以看到最主要的逻辑是调用<code>updateHostComponent</code>方法。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> workInProgress<span class="token punctuation">.</span>stateNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// update的情况</span>  <span class="token function">updateHostComponent</span><span class="token punctuation">(</span>    current<span class="token punctuation">,</span>    workInProgress<span class="token punctuation">,</span>    type<span class="token punctuation">,</span>    newProps<span class="token punctuation">,</span>    rootContainerInstance  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-typescript"><code class="language-typescript">updateHostComponent <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>    current<span class="token punctuation">:</span> Fiber<span class="token punctuation">,</span>    workInProgress<span class="token punctuation">:</span> Fiber<span class="token punctuation">,</span>    type<span class="token punctuation">:</span> Type<span class="token punctuation">,</span>    newProps<span class="token punctuation">:</span> Props<span class="token punctuation">,</span>    rootContainerInstance<span class="token punctuation">:</span> Container<span class="token punctuation">,</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// If we have an alternate, that means this is an update and we need to</span>    <span class="token comment" spellcheck="true">// schedule a side-effect to do the updates.</span>    <span class="token keyword">const</span> oldProps <span class="token operator">=</span> current<span class="token punctuation">.</span>memoizedProps<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldProps <span class="token operator">===</span> newProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// In mutation mode, this is sufficient for a bailout because</span>      <span class="token comment" spellcheck="true">// we won't touch this node even if children changed.</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// If we get updated because one of our children updated, we don't</span>    <span class="token comment" spellcheck="true">// have newProps so we'll have to reuse them.</span>    <span class="token comment" spellcheck="true">// TODO: Split the update API as separate for the props vs. children.</span>    <span class="token comment" spellcheck="true">// Even better would be if children weren't special cased at all tho.</span>    <span class="token keyword">const</span> instance<span class="token punctuation">:</span> Instance <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>stateNode<span class="token punctuation">;</span>    <span class="token keyword">const</span> currentHostContext <span class="token operator">=</span> <span class="token function">getHostContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// TODO: Experiencing an error where oldProps is null. Suggests a host</span>    <span class="token comment" spellcheck="true">// component is hitting the resume path. Figure out why. Possibly</span>    <span class="token comment" spellcheck="true">// related to `hidden`.</span>    <span class="token keyword">const</span> updatePayload <span class="token operator">=</span> <span class="token function">prepareUpdate</span><span class="token punctuation">(</span>      instance<span class="token punctuation">,</span>      type<span class="token punctuation">,</span>      oldProps<span class="token punctuation">,</span>      newProps<span class="token punctuation">,</span>      rootContainerInstance<span class="token punctuation">,</span>      currentHostContext<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// TODO: Type this specific to this type of component.</span>    workInProgress<span class="token punctuation">.</span>updateQueue <span class="token operator">=</span> <span class="token punctuation">(</span>updatePayload<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// If the update payload indicates that there is a change or if there</span>    <span class="token comment" spellcheck="true">// is a new ref we mark this as an update. All the work is done in commitWork.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>updatePayload<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">markUpdate</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>在<code>updateHostComponent</code>内部，被处理完的<code>props</code>会被赋值给<code>workInProgress.updateQueue</code>，并最终会在<code>commit</code>阶段被渲染在页面上。</p><pre class=" language-typescript"><code class="language-typescript">workInProgress<span class="token punctuation">.</span>updateQueue <span class="token operator">=</span> <span class="token punctuation">(</span>updatePayload<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中<code>updatePayload</code>为数组形式，他的偶数索引的值为变化的<code>prop key</code>，奇数索引的值为变化的<code>prop value</code>。</p><h2 id="mount-时-1"><a href="#mount-时-1" class="headerlink" title="mount 时"></a>mount 时</h2><p>同样，我们省略了不相关的逻辑。可以看到，<code>mount</code>时的主要逻辑包括三个：</p><ul><li>为<code>Fiber节点</code>生成对应的<code>DOM</code>节点</li><li>将<code>子孙DOM节点</code>插入刚生成的<code>DOM</code>节点中</li><li>与<code>update</code>逻辑中的<code>updateHostComponent</code>类似的处理<code>props</code>的过程</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// mount的情况</span><span class="token comment" spellcheck="true">// ...省略服务端渲染相关逻辑</span><span class="token keyword">const</span> currentHostContext <span class="token operator">=</span> <span class="token function">getHostContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 为fiber创建对应DOM节点</span><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">createInstance</span><span class="token punctuation">(</span>  type<span class="token punctuation">,</span>  newProps<span class="token punctuation">,</span>  rootContainerInstance<span class="token punctuation">,</span>  currentHostContext<span class="token punctuation">,</span>  workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将子孙DOM节点插入刚生成的DOM节点中</span><span class="token function">appendAllChildren</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> <span class="token keyword">false</span><span class="token punctuation">,</span> <span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// DOM节点赋值给fiber.stateNode</span>workInProgress<span class="token punctuation">.</span>stateNode <span class="token operator">=</span> instance<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 与update逻辑中的updateHostComponent类似的处理props的过程</span><span class="token keyword">if</span> <span class="token punctuation">(</span>  <span class="token function">finalizeInitialChildren</span><span class="token punctuation">(</span>    instance<span class="token punctuation">,</span>    type<span class="token punctuation">,</span>    newProps<span class="token punctuation">,</span>    rootContainerInstance<span class="token punctuation">,</span>    currentHostContext  <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">markUpdate</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>由于<code>mount</code>时只会在<code>rootFiber</code>存在<code>Placement effectTag</code>。那么<code>commit</code>阶段是如何通过一次插入<code>DOM</code>操作（对应一个<code>Placement effectTag</code>）将整棵<code>DOM</code>树插入页面的呢？<br>原因就在于<code>completeWork</code>中的<code>appendAllChildren</code>方法。<br>由于<code>completeWork</code>属于“归”阶段调用的函数，每次调用<code>appendAllChildren</code>时都会将已生成的子孙<code>DOM</code>节点插入当前生成的<code>DOM</code>节点下。那么当“归”到<code>rootFiber</code>时，我们已经有一个构建好的离屏<code>DOM</code>树。</p><h2 id="effectList"><a href="#effectList" class="headerlink" title="effectList"></a>effectList</h2><p>至此<code>render</code>阶段的绝大部分工作就完成了。<br>还有一个问题：作为<code>DOM</code>操作的依据，<code>commit</code>阶段需要找到所有有<code>effectTag</code>的<code>Fiber</code>节点并依次执行<code>effectTag</code>对应操作。难道需要在<code>commit</code>阶段再遍历一次<code>Fiber树</code>寻找<code>effectTag !== null</code>的<code>Fiber</code>节点么？<br>这显然是很低效的。<br>为了解决这个问题，在<code>completeWork</code>的上层函数<code>completeUnitOfWork</code>中，每个执行完<code>completeWork</code>且存在<code>effectTag</code>的<code>Fiber</code>节点会被保存在一条被称为<code>effectList</code>的单向链表中。<br><code>effectList</code>中第一个<code>Fiber</code>节点保存在<code>fiber.firstEffect</code>，最后一个元素保存在<code>fiber.lastEffect</code>。<br>类似<code>appendAllChildren</code>，在“归”阶段，所有有<code>effectTag</code>的<code>Fiber</code>节点都会被追加在<code>effectList</code>中，最终形成一条以<code>rootFiber.firstEffect</code>为起点的单向链表。</p><pre class=" language-typescript"><code class="language-typescript">                       nextEffect         nextEffectrootFiber<span class="token punctuation">.</span>firstEffect <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> fiber <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> fiber</code></pre><p>这样，在<code>commit</code>阶段只需要遍历<code>effectList</code>就能执行所有 effect 了。</p><blockquote><p>你可以在<a href="https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L1744" target="_blank" rel="noopener">这里</a>看到这段代码逻辑。</p></blockquote><h2 id="流程结尾"><a href="#流程结尾" class="headerlink" title="流程结尾"></a>流程结尾</h2><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FqfSwmibF4takmueZ3r0RWASaKS3.png"><br>至此，<code>render</code>阶段全部工作完成。在<code>performSyncWorkOnRoot</code>函数中<code>fiberRootNode</code>被传递给<code>commitRoot</code>方法，开启<code>commit</code>阶段工作流程。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token function">commitRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>代码见<a href="https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L1107" target="_blank" rel="noopener">这里</a>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 自顶向下学习React源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yuque-hexo插件语雀图片防盗链限制的解决方案</title>
      <link href="/osar7h/"/>
      <url>/osar7h/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><hr><p>在使用<a href="https://github.com/x-cold/yuque-hexo" target="_blank" rel="noopener">yuque-hexo</a>同步文章到博客后，由于语雀的图片由有防盗链的限制，会导致部署后，博客网站显示图片异常。<br>处理办法有两种：</p><ol><li>在语雀上使用图片的时候，避开直接复制图片到语雀。先将图片上传到自己的图床后，直接使用<code>markdown</code>的图片语法：<code>![](https://xxxx.com/a.jpg)</code>插入图片到适当位置，例如：</li></ol><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FioacWCiuPFjNteg-vR3cLc1WLxS.png"></p><ol start="2"><li>为了不破坏语雀编辑器的体验，我修改了<code>yuque-hexo</code>的源代码，发布了<code>yuqe-hexo-with-cdn</code>插件。适配了将语雀中的图片上传到腾讯云 COS 图床后，将原有的语雀图片链接替换掉。</li></ol><h1 id="yuqe-hexo-with-cdn-插件"><a href="#yuqe-hexo-with-cdn-插件" class="headerlink" title="yuqe-hexo-with-cdn 插件"></a>yuqe-hexo-with-cdn 插件</h1><p>使用文档说明：<a href="https://github.com/LetTTGACO/yuque-hexo-with-cdn" target="_blank" rel="noopener">yuqe-hexo-with-cdn</a></p><blockquote><p><strong>目前 x-code 已经将我的方案合并到主分支了，可以直接使用</strong><a href="https://github.com/x-cold/yuque-hexo" target="_blank" rel="noopener"><strong>yuque-hexo</strong></a><strong>进行配置</strong></p></blockquote><h2 id="改造思路"><a href="#改造思路" class="headerlink" title="改造思路"></a>改造思路</h2><h3 id="原-yuque-hexo-生成-md-文章简易流程"><a href="#原-yuque-hexo-生成-md-文章简易流程" class="headerlink" title="原 yuque-hexo 生成.md 文章简易流程"></a>原 yuque-hexo 生成.md 文章简易流程</h3><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fmw6JzWt77eNl8bZEjm9DfXkUzvi.png"><br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FvbBK8CcTjuw-otaGM04maJnn5bL.jpeg"></p><h3 id="yuqe-hexo-with-cdn-改造思路"><a href="#yuqe-hexo-with-cdn-改造思路" class="headerlink" title="yuqe-hexo-with-cdn 改造思路"></a>yuqe-hexo-with-cdn 改造思路</h3><p>整体思路主要是在生成<code>yuque.json</code>之前进行语雀图片的替换<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FkKB938kloJ_Q8sFG9mMSGIU1x5s.png"><br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FrYOy2OlY8r1quTwMxbUF3ditE-E.jpeg"><br>具体实现流程<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FucxIXLK1tooOCX012sNpAtppMRc.png"><br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fuji-vgBnpY7Yg3Tev-jZ-DbnDDP.jpeg"></p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// mock数据格式作为参考</span><span class="token keyword">const</span> article <span class="token operator">=</span> <span class="token punctuation">{</span>  title<span class="token punctuation">:</span> <span class="token string">"博客标题"</span><span class="token punctuation">,</span>  body<span class="token punctuation">:</span> <span class="token string">"图片1：![](https://dfas.qqc/test1.png) 图片2:![](https://dfas.qqc/test2.png)"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取语雀的图片链接的正则表达式，返回匹配到的多条记录</span><span class="token keyword">const</span> imageUrlRegExp <span class="token operator">=</span> <span class="token regex">/!\[(.*?)]\((.*?)\)/gm</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">img2Cos</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 1. 从文章中获取语雀的图片URL列表</span>  <span class="token keyword">const</span> matchYuqueImgUrlList <span class="token operator">=</span> article<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>imageUrlRegExp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// matchYuqueImgUrlList: ["![](https://dfas.qqc/test1.png)", "![](https://dfas.qqc/test2.png)"]</span>  <span class="token comment" spellcheck="true">// 如果没有匹配到，说明该文章不存在图片</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchYuqueImgUrlList<span class="token punctuation">)</span> <span class="token keyword">return</span> article<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 循环列表进行处理</span>  <span class="token keyword">const</span> promiseList <span class="token operator">=</span> matchYuqueImgUrlList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>matchYuqueImgUrl<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取真正的图片url</span>    <span class="token keyword">const</span> yuqueImgUrl <span class="token operator">=</span> <span class="token function">getImgUrl</span><span class="token punctuation">(</span>matchYuqueImgUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// yuqueImgUrl: https://dfas.qqc/test1.png#a=1</span>    <span class="token comment" spellcheck="true">// 2.将图片转成buffer文件</span>    <span class="token keyword">const</span> imgBuffer <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">img2Buffer</span><span class="token punctuation">(</span>yuqueImgUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果解析错误，说明图片有问题，直接跳过后续步骤</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>imgBuffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        originalUrl<span class="token punctuation">:</span> matchYuqueImgUrl<span class="token punctuation">,</span>        yuqueRealImgUrl<span class="token punctuation">:</span> yuqueImgUrl<span class="token punctuation">,</span>        url<span class="token punctuation">:</span> yuqueImgUrl<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3. 根据buffer文件生成唯一的hash文件名</span>    <span class="token keyword">const</span> fileName <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getFileName</span><span class="token punctuation">(</span>imgBuffer<span class="token punctuation">,</span> yuqueImgUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// fileName: abcdefg-tudnamdana.png</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 4. 检查图床中是否存在该文件</span>      <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">hasObject</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 存在：url: 腾讯云图床链接</span>      <span class="token comment" spellcheck="true">// 不存在 url: ''</span>      <span class="token comment" spellcheck="true">// 5. 如果图床已经存在，直接替换</span>      <span class="token comment" spellcheck="true">//         如果图床不存在，则先上传到图床，再将原本的语雀url进行替换</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>        url <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">uploadImg</span><span class="token punctuation">(</span>imgBuffer<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// url: 腾讯云图床链接</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 原始的语雀图片：originalUrl: ![](https://dfas.qqc/test1.png)</span>        originalUrl<span class="token punctuation">:</span> matchYuqueImgUrl<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 真正的语雀图片：yuqueRealImgUrl: https://dfas.qqc/test1.png</span>        yuqueRealImgUrl<span class="token punctuation">:</span> yuqueImgUrl<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 图床中的图片：url: 腾讯云图床链接</span>        url<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      out<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`访问COS出错，请检查配置: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 得到图片对象数组</span>  <span class="token keyword">const</span> urlList <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promiseList<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [</span>  <span class="token comment" spellcheck="true">//   {</span>  <span class="token comment" spellcheck="true">//     originalUrl: "![](https://dfas.qqc/test1.png)",</span>  <span class="token comment" spellcheck="true">//     yuqueRealImgUrl: "https://dfas.qqc/test1.png",</span>  <span class="token comment" spellcheck="true">//     url: "腾讯云图床链接1"</span>  <span class="token comment" spellcheck="true">//   },</span>  <span class="token comment" spellcheck="true">//   {</span>  <span class="token comment" spellcheck="true">//     originalUrl: "![](https://dfas.qqc/test2.png)",</span>  <span class="token comment" spellcheck="true">//     yuqueRealImgUrl: "https://dfas.qqc/test2.png",</span>  <span class="token comment" spellcheck="true">//     url: "腾讯云图床链接2"</span>  <span class="token comment" spellcheck="true">//   }</span>  <span class="token comment" spellcheck="true">// ]</span>  <span class="token comment" spellcheck="true">// 6. 将语雀图片链接进行替换</span>  urlList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>      article<span class="token punctuation">.</span>body <span class="token operator">=</span> article<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>originalUrl<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`![](</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`replace </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token punctuation">.</span>yuqueRealImgUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 7. 返回新的文章对象</span>  <span class="token keyword">return</span> article<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// article: {</span>  <span class="token comment" spellcheck="true">//   title: '博客标题',</span>  <span class="token comment" spellcheck="true">//   body: '图片1：![](腾讯云图床链接1) 图片2:![](腾讯云图床链接2)'</span>  <span class="token comment" spellcheck="true">// }</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 工具类</span><span class="token comment" spellcheck="true">// 从markdown格式的url中获取url</span><span class="token keyword">function</span> <span class="token function">getImgUrl</span><span class="token punctuation">(</span>markdownImgUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> _temp <span class="token operator">=</span> markdownImgUrl<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\!\[(.*?)]\(/</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> _temp_index <span class="token operator">=</span> _temp<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 得到真正的语雀的url</span>  <span class="token keyword">return</span> _temp<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> _temp_index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将图片转成buffer</span><span class="token comment" spellcheck="true">// 这里用到了superagent库进行转换</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">img2Buffer</span><span class="token punctuation">(</span>yuqueImgUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">await</span> superagent        <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>yuqueImgUrl<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> buffer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            buffer<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> data <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 非法图片返回null</span>      out<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`invalid img: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>yuqueImgUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 根据文件内容获取唯一文件名称</span><span class="token comment" spellcheck="true">// 这里用到了开源的七牛云的算法，详情：https://juejin.cn/post/6844903775660933133</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getFileName</span><span class="token punctuation">(</span>imgBuffer<span class="token punctuation">,</span> yuqueImgUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">getEtag</span><span class="token punctuation">(</span>imgBuffer<span class="token punctuation">,</span> <span class="token punctuation">(</span>hash<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> imgName <span class="token operator">=</span> hash<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 获取文件名后缀</span>      <span class="token keyword">const</span> imgSuffix <span class="token operator">=</span> yuqueImgUrl<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>yuqueImgUrl<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 拼接文件名</span>      <span class="token keyword">const</span> fileName <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>imgName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>imgSuffix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 返回文件名</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 检查COS是否已经存在图片，存在则返回url</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">hasObject</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// prefixKey: blog-image</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bucket<span class="token punctuation">.</span>length <span class="token operator">||</span> <span class="token operator">!</span>region<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    out<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"请检查COS配置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    cos<span class="token punctuation">.</span><span class="token function">headObject</span><span class="token punctuation">(</span>      <span class="token punctuation">{</span>        Bucket<span class="token punctuation">:</span> bucket<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 存储桶名字（必须）</span>        Region<span class="token punctuation">:</span> region<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 存储桶所在地域，必须字段</span>        Key<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefixKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//  文件名  必须</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 拼接腾讯云图床的图片URL</span>          <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token string">`https://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>bucket<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.cos.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>region<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.myqcloud.com/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefixKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 不存在返回空</span>          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 上传图片到COS</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">uploadImg</span><span class="token punctuation">(</span>imgBuffer<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    cos<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>      <span class="token punctuation">{</span>        Bucket<span class="token punctuation">:</span> bucket<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 存储桶名字（必须）</span>        Region<span class="token punctuation">:</span> region<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 存储桶所在地域，必须字段</span>        Key<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefixKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//  文件名  必须</span>        StorageClass<span class="token punctuation">:</span> <span class="token string">"STANDARD"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 上传模式（标准模式）</span>        Body<span class="token punctuation">:</span> imgBuffer<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 上传文件对象</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 返回图片链接</span>          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`https://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>Location<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="语雀的流程图-文本绘图等不适配"><a href="#语雀的流程图-文本绘图等不适配" class="headerlink" title="语雀的流程图/文本绘图等不适配"></a>语雀的流程图/文本绘图等不适配</h2><p>语雀的流程图/文本绘图等无法生成 markdown 展示，所以我的做法是，在语雀编辑器书写的时候，先编写流程图，写好了再截图，作为图片放在流程图的前面。这样生成的 md 文件就只有图片被解析出来了。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FkL8pPinDyxnak397bwQVlM57eeL.png"></p><h2 id="特殊情况下需要使用-markdown-语法的图片链接示例"><a href="#特殊情况下需要使用-markdown-语法的图片链接示例" class="headerlink" title="特殊情况下需要使用 markdown 语法的图片链接示例"></a>特殊情况下需要使用 markdown 语法的图片链接示例</h2><p>因为该插件会将匹配到的所有 markdown 语法的图片都上传到图床（包括代码块中的示例），所以在书写语雀文章时，非特殊情况不要使用该语法。或者在书写的时候，将链接非法化即可，例如：<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FkPytQbCfcYdtboEpkB4tiGh3iDz.png"><br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FnGGls9yxHv_YyeqhxKl6Z_BLOI8.png"><br>插件在处理的过程中会检测出来非法链接，就不会上传该图片了<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FolAZNE4CANdcXxPIH2mjlBbzrjG.png"></p><h1 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h1><p>如果你不想用腾讯云 COS 图床，你也可以按照这个思路，将 COS 相关的配置进行改造，上传到你自己的图床！</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语雀云端写作 Hexo+Github Actions+COS持续集成</title>
      <link href="/roeayv/"/>
      <url>/roeayv/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><hr><p>在没有遇到<a href="https://github.com/x-cold/yuque-hexo" target="_blank" rel="noopener">yuque-hexo</a>之前，我博客是 Hexo+Github Pages 的部署方式：</p><ul><li>本地配置 Hexo 源码</li><li>利用本地的 markdown 编辑器书写文章</li><li>Hexo 部署到 Github Pages/Coding Pages 上</li></ul><p>缺点也很明显：</p><ul><li>本地编辑器鱼龙混杂，使用手感一言难尽</li><li>代码存储在本地不方便</li><li>GitHub Pages 国内访问速度令人堪忧（有段时间我还双重部署在了 Coding Pages 上，但是太不稳定了）</li></ul><p>本地的编辑器我是挑了又挑，总算找到一个手感还不错的<a href="https://typora.io/" target="_blank" rel="noopener">Typora</a>，但还是限于本地编辑的局限性和不方便，就懒的在本地写博客了。<br>在试用了语雀之后，发现语雀的编辑器太好用了，功能齐全，速度也快。后来我就一直在语雀上记录各种文章，但是并没有同步到博客。所在公司团队也用语雀来记录各种技术方案等文档。就这样我的博客几乎停更了一年。</p><hr><p>直到我遇到了<a href="https://github.com/x-cold/yuque-hexo" target="_blank" rel="noopener">yuque-hexo</a>，突然就引起了我的兴趣。结合推荐的最佳实践文章，我没日没夜搞了好几天，终于搭建好了我的<a href="https://1874.cool/">新博客</a>。</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>我的新博客是基于</p><blockquote><p><strong>Hexo + 语雀 + yuque-hexo + web hook + severless + Github Actions</strong></p></blockquote><p>托管平台我选择的是</p><blockquote><p><strong>腾讯云的 COS 静态网站+自定义 CDN 加速</strong></p></blockquote><p>至于为什么选择腾讯云 COS，是因为我的云服务器、域名、图床都使用的腾讯云的服务。再加上 COS 静态网站+CDN 加速的极致体验，让我心动了。而且我这个战五渣的个人博客的访问量对于收费的 COS 来说，也没多钱，就先做个试验吧，万一哪天<del>博客火了</del>（没钱了），再换也不迟。</p><h1 id="部署流程"><a href="#部署流程" class="headerlink" title="部署流程"></a>部署流程</h1><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FvjX9uckFsBD3DDgkfoo-IZ3b8yJ.png"></p><blockquote><p>PS：在<a href="https://1874.cool/ovugli">Github Actions 持续集成 Docker 构建并部署 Node 项目到云服务器</a>中，我已经将调用云函数改为调我自己的 node 项目了，再由 node 服务调用 github actions</p></blockquote><h1 id="初始化-Hexo"><a href="#初始化-Hexo" class="headerlink" title="初始化 Hexo"></a>初始化 Hexo</h1><p>首先需要在本地初始化 hexo 仓库</p><pre class=" language-bash"><code class="language-bash">npx hexo-cli init blog</code></pre><blockquote><p>npx 可以在不全局安装依赖情况下使用 hexo-cli 的命令</p></blockquote><p>初始化 hexo 成功后可以安装你喜欢的主题等配置，这里不作赘述。</p><h1 id="安装-yuque-hexo-插件"><a href="#安装-yuque-hexo-插件" class="headerlink" title="安装 yuque-hexo 插件"></a>安装 yuque-hexo 插件</h1><p>官方文档：<a href="https://github.com/x-cold/yuque-hexo" target="_blank" rel="noopener">yuque-hexo</a></p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i yuque-hexo</code></pre><h2 id="配置语雀"><a href="#配置语雀" class="headerlink" title="配置语雀"></a>配置语雀</h2><ol><li>访问<a href="https://www.yuque.com/dashboard" target="_blank" rel="noopener">工作台</a>=&gt;账户设置=Token=&gt;新建 token 并配置好权限。<strong>Access Token 即为 YUQUE_TOKEN</strong></li></ol><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FiMisZ8z0CXkE_JhM4M3HYtVKH8Z.png"></p><ol start="2"><li>访问<a href="https://www.yuque.com/dashboard" target="_blank" rel="noopener">工作台</a>=&gt;账户设置=&gt;账户设置=&gt;个人路径，设置语雀的简易的个人路径（建议），<strong>拿到个人路径。</strong></li></ol><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FqEnqU_PHRB_3vaMUYJP2hjyTXfN.png"></p><ol start="3"><li>新建一个放置博客的知识库（可见范围为互联网可见）</li><li>进入博客知识库，设置博客知识库的路径（建议），<strong>拿到知识库的路径</strong>。</li></ol><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FmlvxdkN3QSn1fj3FDrQr6tDfi5r.png"><br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fm5RGoda0mSPPczTrWRFxT4L16DS.png"></p><h2 id="配置-hexo"><a href="#配置-hexo" class="headerlink" title="配置 hexo"></a>配置 hexo</h2><p>拿到上述的语雀个人路径和知识库路径，进行 hexo 的配置。</p><blockquote><p>package.json</p></blockquote><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"hexo:build"</span><span class="token operator">:</span> <span class="token string">"hexo generate"</span><span class="token punctuation">,</span>    <span class="token property">"hexo:clean"</span><span class="token operator">:</span> <span class="token string">"hexo clean"</span><span class="token punctuation">,</span>    <span class="token property">"deploy"</span><span class="token operator">:</span> <span class="token string">"hexo deploy"</span><span class="token punctuation">,</span>    <span class="token property">"server"</span><span class="token operator">:</span> <span class="token string">"hexo server"</span><span class="token punctuation">,</span>    <span class="token property">"hexo"</span><span class="token operator">:</span> <span class="token string">"npm run hexo:clean &amp;&amp; npm run hexo:build &amp;&amp; npm run server"</span><span class="token punctuation">,</span>    <span class="token property">"yuque:clean"</span><span class="token operator">:</span> <span class="token string">"yuque-hexo clean"</span><span class="token punctuation">,</span>    <span class="token property">"yuque:sync"</span><span class="token operator">:</span> <span class="token string">"yuque-hexo sync"</span><span class="token punctuation">,</span>    <span class="token property">"yuque"</span><span class="token operator">:</span> <span class="token string">"npm run yuque:clean &amp;&amp; npm run yuque:sync"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"yuqueConfig"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"postPath"</span><span class="token operator">:</span> <span class="token string">"source/_posts"</span><span class="token punctuation">,</span>    <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"https://www.yuque.com/api/v2"</span><span class="token punctuation">,</span>    <span class="token property">"login"</span><span class="token operator">:</span> <span class="token string">"语雀个人路径"</span><span class="token punctuation">,</span>    <span class="token property">"repo"</span><span class="token operator">:</span> <span class="token string">"知识库路径"</span><span class="token punctuation">,</span>    <span class="token property">"onlyPublished"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"onlyPublic"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="配置腾讯云-COS"><a href="#配置腾讯云-COS" class="headerlink" title="配置腾讯云 COS"></a>配置腾讯云 COS</h1><p>当我们开始时我们需要做如下准备：</p><ul><li>域名 （需要备案，不备案可临时使用 COS 提供的临时域名）</li><li>腾讯云账号 开通 COS 服务（建议使用 V5 版本 COS 控制台，如为 V4 版本可提交工单让后台升级为 V5 版本）</li></ul><p>参考资料：<a href="https://werty.cn/2019/06/hexo/%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2hexo%E5%8D%9A%E5%AE%A2%E5%88%B0%E8%85%BE%E8%AE%AF%E4%BA%91COS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/" target="_blank" rel="noopener">一键部署 hexo 博客到腾讯云 COS 对象存储</a></p><h2 id="开启静态网站"><a href="#开启静态网站" class="headerlink" title="开启静态网站"></a>开启静态网站</h2><p>访问<a href="https://console.cloud.tencent.com/cos/bucket" target="_blank" rel="noopener">腾讯云对象存储控制台</a>=&gt;基础配置=&gt;静态网站，<strong>开启静态网站功能</strong><br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FikwiN4n7oezapO3LJA6XYK6dZOQ.png"></p><h2 id="配置自定义-CDN-加速域名"><a href="#配置自定义-CDN-加速域名" class="headerlink" title="配置自定义 CDN 加速域名"></a>配置自定义 CDN 加速域名</h2><p>访问<a href="https://console.cloud.tencent.com/cos/bucket" target="_blank" rel="noopener">腾讯云对象存储控制台</a>=&gt;域名与传输管理=&gt;自定义 CDN 加速域名，<strong>配置自定义加速域名</strong><br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fl2amqnJo65UKTDg7ozmsg5amAeH.png"></p><h2 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h2><p>访问<a href="https://console.cloud.tencent.com/cns" target="_blank" rel="noopener">我的域名管理</a>=&gt;添加域名解析记录=&gt;让域名指向上面的 CNAM 域名<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FiZKKLW8VFjLpUY4DPvvCdh-kePL.png"></p><h2 id="获取配置参数"><a href="#获取配置参数" class="headerlink" title="获取配置参数"></a>获取配置参数</h2><p>首先我们需要在腾讯云控制台获取下列所需的配置参数：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>SecretId</td><td>开发者拥有的项目身份识别 ID，用以身份认证</td></tr><tr><td>SecretKey</td><td>开发者拥有的项目身份密钥</td></tr><tr><td>Bucket</td><td>COS 中用于存储数据的容器名称</td></tr><tr><td>Region</td><td>Bucket 所在的地域信息。</td></tr></tbody></table><h3 id="获取-SecretId-和-SecretKey"><a href="#获取-SecretId-和-SecretKey" class="headerlink" title="获取 SecretId 和 SecretKey"></a>获取 SecretId 和 SecretKey</h3><p>进入<a href="https://console.cloud.tencent.com/cam/overview" target="_blank" rel="noopener">访问管理</a>=&gt;<a href="https://console.cloud.tencent.com/cam/capi" target="_blank" rel="noopener">密钥管理</a>=&gt;【新增密钥】=&gt;<strong>获取 SecretId 和 SecretKey</strong></p><blockquote><p>这里建议可以新增子用户，并设置权限，获取子用户的密钥，这里不作赘述。</p></blockquote><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FhvBmhn85j6XZG2H1SeRFFfH4v21.png"></p><h3 id="获取-bucket-和-region"><a href="#获取-bucket-和-region" class="headerlink" title="获取 bucket 和 region"></a>获取 bucket 和 region</h3><p>访问<a href="https://console.cloud.tencent.com/cos/bucket" target="_blank" rel="noopener">腾讯云对象存储控制台</a>=&gt;基本信息，<strong>获取存储桶名称和所属地域</strong></p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FlY6trvKTOwRUZBKjO1N5Zs8K6N1.png"></h3><h1 id="配置-Github-Actions"><a href="#配置-Github-Actions" class="headerlink" title="配置 Github Actions"></a>配置 Github Actions</h1><p>首先我们需要在 github 新建一个私有博客仓库（以下简称<strong>博客仓库</strong>），用于存放 hexo 源码，并与本地的 hexo 做关联。<br>所需的配置参数：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>SECRET_ID</td><td>腾讯云的 SecretId</td></tr><tr><td>SECRET_KEY</td><td>腾讯云的 SecretKey</td></tr><tr><td>YUQUE_TOKEN</td><td>语雀的 Access Token</td></tr><tr><td>BUCKET</td><td>腾讯云 COS 静态网站的存储桶名称</td></tr><tr><td>REGION</td><td>腾讯云 COS 静态网站的地域名称</td></tr></tbody></table><h2 id="配置-Github"><a href="#配置-Github" class="headerlink" title="配置 Github"></a>配置 Github</h2><h3 id="获取-Github-访问-Token"><a href="#获取-Github-访问-Token" class="headerlink" title="获取 Github 访问 Token"></a>获取 Github 访问 Token</h3><p>访问<a href="https://github.com/settings/tokens/" target="_blank" rel="noopener">GIthub Token 配置</a>=&gt;Generate new token=&gt;勾选必要的参数，生成 token</p><blockquote><p><strong>注意下：这个 Token 只会出现一次，最好复制出来使用，如果忘记了，只能重新生成一个</strong></p></blockquote><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FussD8LZRmLdE4Bf7syjdq7j1Sps.png"></p><blockquote><p>Github Token 用途：</p><ul><li>用来在流水线工作时，上传语雀文章到博客仓库。</li><li>下文中需要用到这个 token 外部调用 Github Actions</li></ul></blockquote><h3 id="配置仓库-Actions-secrets"><a href="#配置仓库-Actions-secrets" class="headerlink" title="配置仓库 Actions secrets"></a>配置仓库 Actions secrets</h3><p>进入博客仓库的设置，配置 secrets。把之前获取的腾讯云的<a href="#GCUe2">SECRET_ID 和 SECRET_KEY</a>和语雀的<a href="#n3dhE">YUQUE_TOKEN</a>配置到这里。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fj3i2PVipW8AfTyzzJ8bW_voyFtR.png"></p><blockquote><p>SECRET_ID、SECRET_KEY、BUCKET、REGION 用于上传静态网站文件到 COS<br>YUQUE_TOKEN 用于拉取语雀的文章<br>GITHUB_TOKEN 不用配置，可以在 Github Actions 中直接获取</p></blockquote><h2 id="配置博客仓库"><a href="#配置博客仓库" class="headerlink" title="配置博客仓库"></a>配置博客仓库</h2><p>在根目录新增<code>.github/workflows/main.yaml</code>文件<br>这里直接上代码：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Deplo To COS<span class="token key atrule">on</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 本地测试时可以开启，部署后不建议开启，因为会涉及到更改一些配置，会多次频繁触发构建</span>    <span class="token comment" spellcheck="true"># 允许手动push触发</span>  <span class="token comment" spellcheck="true"># push:</span>  <span class="token comment" spellcheck="true">#    branches:</span>  <span class="token comment" spellcheck="true">#      - master</span>  <span class="token comment" spellcheck="true"># 允许外部仓库事件触发</span>  <span class="token key atrule">repository_dispatch</span><span class="token punctuation">:</span>    <span class="token key atrule">types</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 这里的值需要和下文的云函数的event_type保持一致</span>      <span class="token punctuation">-</span> start<span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 检查分支        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@master      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 安装node环境        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@master        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"12.x"</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 缓存依赖        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/cache@v1        <span class="token key atrule">id</span><span class="token punctuation">:</span> cache        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> node_modules          <span class="token key atrule">key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span>runner.OS<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">-</span>$<span class="token punctuation">{</span><span class="token punctuation">{</span>hashFiles('**/package<span class="token punctuation">-</span>lock.json')<span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 安装依赖        <span class="token key atrule">if</span><span class="token punctuation">:</span> steps.cache.outputs.cache<span class="token punctuation">-</span>hit <span class="token tag">!=</span> 'true'        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          export TZ='Asia/Shanghai'          npm install</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 安装COS相关依赖        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          sudo pip install coscmd          sudo pip install tccli</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 配置COS        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token key atrule">SECRET_ID</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.SECRET_ID <span class="token punctuation">}</span><span class="token punctuation">}</span>          <span class="token key atrule">SECRET_KEY</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.SECRET_KEY <span class="token punctuation">}</span><span class="token punctuation">}</span>          <span class="token key atrule">BUCKET</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.BUCKET <span class="token punctuation">}</span><span class="token punctuation">}</span>          <span class="token key atrule">REGION</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.REGION <span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          coscmd config -a $SECRET_ID -s $SECRET_KEY -b $BUCKET -r $REGION          tccli configure set secretId $SECRET_ID          tccli configure set secretKey $SECRET_KEY          tccli configure set region $REGION</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 拉取语雀的文章        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token key atrule">YUQUE_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.YUQUE_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          npm run yuque:clean          npm run yuque:sync</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 配置Git用户名邮箱        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          git config --global user.name "1874"          git config --global user.email "1225751694@qq.com"</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 提交yuque拉取的文章到GitHub仓库        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          echo `date +"%Y-%m-%d %H:%M:%S"` begin > time.txt          git add .          git commit -m "Refresh yuque json" -a</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 推送文章到仓库        <span class="token key atrule">uses</span><span class="token punctuation">:</span> ad<span class="token punctuation">-</span>m/github<span class="token punctuation">-</span>push<span class="token punctuation">-</span>action@master        <span class="token key atrule">with</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># GITHUB_TOKEN不用配置在secrets</span>          <span class="token key atrule">github_token</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.GITHUB_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 生成静态文件        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          npm run hexo:clean          npm run hexo:build</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 上传文章到cos并刷新CDN        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          coscmd upload -rfs --delete ./public/ /          tccli cdn PurgePathCache --cli-unfold-argument --Paths https://1874.cool/ --FlushType flush</span></code></pre><h1 id="配置腾讯云函数"><a href="#配置腾讯云函数" class="headerlink" title="配置腾讯云函数"></a>配置腾讯云函数</h1><blockquote><p>PS：在<a href="https://1874.cool/ovugli">Github Actions 持续集成 Docker 构建并部署 Node 项目到云服务器</a>中，我已经将调用云函数改为调我自己的 node 项目了，因为腾讯云函数现在（2022-07-16）好贵了！</p></blockquote><ol><li>访问<a href="https://console.cloud.tencent.com/scf" target="_blank" rel="noopener">云数控制台</a>=&gt;新建云函数</li><li>模版选择从头开始，函数类型选择事件函数，运行环境选择 python2.7</li><li>在线编写函数代码</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf8 -*-</span><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">main_handler</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"https://api.github.com/repos/LetTTGACO/1874/dispatches"</span><span class="token punctuation">,</span>    json <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"event_type"</span><span class="token punctuation">:</span> <span class="token string">"start"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span><span class="token string">'curl/7.52.1'</span><span class="token punctuation">,</span>              <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span>              <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/vnd.github.everest-preview+json'</span><span class="token punctuation">,</span>              <span class="token string">'Authorization'</span><span class="token punctuation">:</span> <span class="token string">'token Github访问token'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">204</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"This's OK!"</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> r<span class="token punctuation">.</span>status_code</code></pre><blockquote><p>event_type 说明<br>event_type 值需要和 Github Actions 中配置的 repository_dispatch 的 types 值保持一致<br>Authorization 说明<br>Authorization 值为 字符串 “token + <a href="#oEgKh">Github 访问 token</a>“，<strong>不要忘了加 token</strong></p></blockquote><ol start="4"><li>触发期配置=&gt;自定义创建=&gt;配置如下图所示</li></ol><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fv6EtiOMRj1v9_23wK-di7YAsKfT.png"></p><ol start="5"><li>部署完成后进入触发管理，最下面就是云函数地址</li></ol><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FkhVJCWmBWFVsqWAW3uVCw5vVuDq.png"></p><h1 id="配置语雀-webhook"><a href="#配置语雀-webhook" class="headerlink" title="配置语雀 webhook"></a>配置语雀 webhook</h1><p>访问博客知识库=&gt;设置=&gt;消息推送，选择其他渠道，设置机器人名称和上文获取到的云函数地址，选择触发条件<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fr_bBB8LiuuO4bZ-xPbS1rpXD1ir.png"></p><blockquote><p>发布文档和更新文档，需要选择文档有较大更新，推送给关注者，才会触发 webhook。<br>但是经过我的测试，一旦某一篇文章选择<strong>文档有较大更新，推送给关注者。</strong>后续的更新，不管选没选<strong>文档有较大更新，推送给关注者，</strong>都会触发 webhook。如果因为部署频繁导致出错的话，建议选择评审阶段触发。也可以每次通过测试按钮手动触发。</p></blockquote><h1 id="Done！发布文章"><a href="#Done！发布文章" class="headerlink" title="Done！发布文章"></a>Done！发布文章</h1><p>无论是发布新文章还是更新删除等等操作，只要选择文档有较大更新，推送给关注者即可自动触发。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fg0QmVZZQc9nRAGKw9fdIzw4uMsH.png"></p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="语雀图片显示异常（防盗链）的解决办法"><a href="#语雀图片显示异常（防盗链）的解决办法" class="headerlink" title="语雀图片显示异常（防盗链）的解决办法"></a>语雀图片显示异常（防盗链）的解决办法</h2><p>由于语雀的图片由有防盗链的限制，会导致部署后，博客网站显示图片异常。<br>处理办法有两种：</p><ol><li>在语雀上使用图片的时候，避开直接复制图片到语雀。先将图片上传到自己的图床后，直接使用 markdown 的图片语法：<code>![](https://xxxx.com/a.jpg)</code>插入图片到适当位置，例如：</li></ol><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FioacWCiuPFjNteg-vR3cLc1WLxS.png"></p><ol start="2"><li>为了不破坏语雀编辑器的体验，我修改了 yuque-hexo 的源代码，发布了<a href="https://github.com/LetTTGACO/yuque-hexo-with-cdn" target="_blank" rel="noopener">yuqe-hexo-with-cdn</a>插件。适配了将语雀中的图片上传到腾讯云 COS 图床后，将原有的语雀图片链接替换掉。</li></ol><h2 id="yuqe-hexo-with-cdn-插件"><a href="#yuqe-hexo-with-cdn-插件" class="headerlink" title="yuqe-hexo-with-cdn 插件"></a>yuqe-hexo-with-cdn 插件</h2><p>替换依赖<a href="https://github.com/x-cold/yuque-hexo" target="_blank" rel="noopener">yuque-hexo</a>为<a href="https://github.com/LetTTGACO/yuque-hexo-with-cdn" target="_blank" rel="noopener">yuqe-hexo-with-cdn</a></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i yuqe-hexo-with-cdn</code></pre><blockquote><p><strong>目前 x-code 已经将我的方案合并到主分支了，可以直接使用</strong><a href="https://github.com/x-cold/yuque-hexo" target="_blank" rel="noopener"><strong>yuque-hexo</strong></a><strong>进行配置</strong></p></blockquote><p>修改博客仓库的 package.json</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"hexo:build"</span><span class="token operator">:</span> <span class="token string">"hexo generate"</span><span class="token punctuation">,</span>    <span class="token property">"hexo:clean"</span><span class="token operator">:</span> <span class="token string">"hexo clean"</span><span class="token punctuation">,</span>    <span class="token property">"deploy"</span><span class="token operator">:</span> <span class="token string">"hexo deploy"</span><span class="token punctuation">,</span>    <span class="token property">"server"</span><span class="token operator">:</span> <span class="token string">"hexo server"</span><span class="token punctuation">,</span>    <span class="token property">"hexo"</span><span class="token operator">:</span> <span class="token string">"npm run hexo:clean &amp;&amp; npm run hexo:build &amp;&amp; npm run server"</span><span class="token punctuation">,</span>    <span class="token property">"yuque:clean"</span><span class="token operator">:</span> <span class="token string">"yuque-hexo clean"</span><span class="token punctuation">,</span>    <span class="token property">"yuque:sync"</span><span class="token operator">:</span> <span class="token string">"yuque-hexo sync"</span><span class="token punctuation">,</span>    <span class="token property">"yuque"</span><span class="token operator">:</span> <span class="token string">"npm run yuque:clean &amp;&amp; npm run yuque:sync"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"yuqueConfig"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"postPath"</span><span class="token operator">:</span> <span class="token string">"source/_posts"</span><span class="token punctuation">,</span>    <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"https://www.yuque.com/api/v2"</span><span class="token punctuation">,</span>    <span class="token property">"login"</span><span class="token operator">:</span> <span class="token string">"语雀个人路径"</span><span class="token punctuation">,</span>    <span class="token property">"repo"</span><span class="token operator">:</span> <span class="token string">"知识库路径"</span><span class="token punctuation">,</span>    <span class="token property">"onlyPublished"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"onlyPublic"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"imgCdn"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"bucket"</span><span class="token operator">:</span> <span class="token string">"COS存储桶名称"</span><span class="token punctuation">,</span>      <span class="token property">"region"</span><span class="token operator">:</span> <span class="token string">"COS地域名称"</span><span class="token punctuation">,</span>      <span class="token property">"prefixKey"</span><span class="token operator">:</span> <span class="token string">"blog-images"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>imgCdn 语雀图片转腾讯云 COS 图床配置说明<br>注意：开启后会将匹配到的所有的图片都上传到 COS</p><table><thead><tr><th><strong>参数名</strong></th><th><strong>含义</strong></th><th><strong>默认值</strong></th></tr></thead><tbody><tr><td>enabled</td><td>是否开启</td><td>false</td></tr><tr><td>bucket</td><td>腾讯 COS 的 bucket 名称</td><td>-</td></tr><tr><td>region</td><td>腾讯 COS 的 region(地域名称)</td><td>-</td></tr><tr><td>prefixKey</td><td>文件前缀</td><td>-</td></tr></tbody></table><blockquote><p>prefixKey 说明：<br>如果需要将图片上传到 COS 的根目录，那么 prefixKey 不用配置。<br>如果想上传到指定目录 blog/image 下，则需要配置 prefixKey 为”prefixKey”: “blog/image”。<br>目录名前后都不需要加斜杠</p></blockquote><p><strong>上传到 COS 图床也是需要腾讯云的</strong><a href="#GCUe2"><strong>SECRET_ID 和 SECRET_KEY</strong></a><strong>作为环境变量注入的，但在之前的流程中，我们已经在博客仓库的 secrets 注入了，所以这里就不需要再额外注入了。</strong><br><strong>插件更多详情介绍请移步：</strong><a href="https://github.com/LetTTGACO/yuque-hexo-with-cdn" target="_blank" rel="noopener">yuqe-hexo-with-cdn</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CI/CD </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章 React架构-JSX</title>
      <link href="/react-jsx/"/>
      <url>/react-jsx/</url>
      
        <content type="html"><![CDATA[<h1 id="React-目录结构"><a href="#React-目录结构" class="headerlink" title="React 目录结构"></a>React 目录结构</h1><hr><h2 id="顶层目录"><a href="#顶层目录" class="headerlink" title="顶层目录"></a>顶层目录</h2><p>除去配置文件和隐藏文件夹，根目录的文件夹包括三个：</p><pre class=" language-typescript"><code class="language-typescript">根目录├── fixtures        # 包含一些给贡献者准备的小型 React 测试项目├── packages        # 包含元数据（比如 <span class="token keyword">package</span><span class="token punctuation">.</span>json）和 React 仓库中所有 <span class="token keyword">package</span> 的源码（子目录 src）├── scripts         # 各种工具链的脚本，比如git、jest、eslint等</code></pre><h2 id="packages-目录"><a href="#packages-目录" class="headerlink" title="packages 目录"></a>packages 目录</h2><h3 id="react-文件夹"><a href="#react-文件夹" class="headerlink" title="react 文件夹"></a>react 文件夹</h3><p>React 的核心，包含所有全局 React API，如：</p><ul><li>React.createElement</li><li>React.Component</li><li>React.Children</li></ul><p>这些 API 是全平台通用的，它不包含 ReactDOM、ReactNative 等平台特定的代码。在 NPM 上作为单独的一个包发布。</p><h3 id="scheduler-文件夹"><a href="#scheduler-文件夹" class="headerlink" title="scheduler 文件夹"></a>scheduler 文件夹</h3><p>Scheduler（调度器）的实现。</p><h3 id="shared-文件夹"><a href="#shared-文件夹" class="headerlink" title="shared 文件夹"></a>shared 文件夹</h3><p>源码中其他模块公用的方法和全局变量，比如在 shared/ReactSymbols.js 中保存 React 不同组件类型的定义。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// ...</span><span class="token keyword">export</span> <span class="token keyword">let</span> REACT_ELEMENT_TYPE <span class="token operator">=</span> <span class="token number">0xeac7</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">let</span> REACT_PORTAL_TYPE <span class="token operator">=</span> <span class="token number">0xeaca</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">let</span> REACT_FRAGMENT_TYPE <span class="token operator">=</span> <span class="token number">0xeacb</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ...</span></code></pre><h3 id="Renderer-相关的文件夹"><a href="#Renderer-相关的文件夹" class="headerlink" title="Renderer 相关的文件夹"></a>Renderer 相关的文件夹</h3><p>包含不同平台的渲染器的实现</p><pre class=" language-typescript"><code class="language-typescript"><span class="token operator">-</span> react<span class="token operator">-</span>art<span class="token operator">-</span> react<span class="token operator">-</span>dom                 # 注意这同时是DOM和SSR（服务端渲染）的入口<span class="token operator">-</span> react<span class="token operator">-</span>native<span class="token operator">-</span>renderer<span class="token operator">-</span> react<span class="token operator">-</span>noop<span class="token operator">-</span>renderer       # 用于debug fiber（后面会介绍fiber）<span class="token operator">-</span> react<span class="token operator">-</span>test<span class="token operator">-</span>renderer</code></pre><h3 id="试验性包的文件夹"><a href="#试验性包的文件夹" class="headerlink" title="试验性包的文件夹"></a>试验性包的文件夹</h3><p>React 将自己流程中的一部分抽离出来，形成可以独立使用的包，由于他们是试验性质的，所以不被建议在生产环境使用。包括如下文件夹：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token operator">-</span> react<span class="token operator">-</span>server        # 创建自定义SSR流<span class="token operator">-</span> react<span class="token operator">-</span>client        # 创建自定义的流<span class="token operator">-</span> react<span class="token operator">-</span>fetch         # 用于数据请求<span class="token operator">-</span> react<span class="token operator">-</span>interactions  # 用于测试交互相关的内部特性，比如React的事件模型<span class="token operator">-</span> react<span class="token operator">-</span>reconciler    # Reconciler的实现，你可以用他构建自己的Renderer</code></pre><h3 id="辅助包的文件夹"><a href="#辅助包的文件夹" class="headerlink" title="辅助包的文件夹"></a>辅助包的文件夹</h3><p>React 将一些辅助功能形成单独的包。包括如下文件夹：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token operator">-</span> react<span class="token operator">-</span>is       # 用于测试组件是否是某类型<span class="token operator">-</span> react<span class="token operator">-</span>client   # 创建自定义的流<span class="token operator">-</span> react<span class="token operator">-</span>fetch    # 用于数据请求<span class="token operator">-</span> react<span class="token operator">-</span>refresh  # “热重载”的React官方实现</code></pre><h3 id="react-reconciler-文件夹"><a href="#react-reconciler-文件夹" class="headerlink" title="react-reconciler 文件夹"></a>react-reconciler 文件夹</h3><p>我们需要重点关注 react-reconciler，虽然他是一个实验性的包，内部的很多功能在正式版本中还未开放。但是他一边对接 Scheduler，一边对接不同平台的 Renderer，构成了整个 React16 的架构体系。</p><h1 id="深入理解-JSX"><a href="#深入理解-JSX" class="headerlink" title="深入理解 JSX"></a>深入理解 JSX</h1><hr><h2 id="React-CreateElement"><a href="#React-CreateElement" class="headerlink" title="React.CreateElement"></a>React.CreateElement</h2><p>JSX 在编译时会被 Babel 编译为 React.createElement 方法，查看源码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Create and return a new ReactElement of the given type. * See https://reactjs.org/docs/react-api.html#createelement */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> config<span class="token punctuation">,</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> propName<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Reserved names are extracted</span>  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> ref <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> self <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> source <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>config <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 赋值给props</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Children can be more than one argument, and those are transferred onto</span>  <span class="token comment" spellcheck="true">// the newly allocated props object.</span>  <span class="token keyword">const</span> childrenLength <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 处理 children，会被赋值给props.children</span>  <span class="token comment" spellcheck="true">// Resolve default props 处理默认值并赋值</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">&amp;&amp;</span> type<span class="token punctuation">.</span>defaultProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> defaultProps <span class="token operator">=</span> type<span class="token punctuation">.</span>defaultProps<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>propName <span class="token keyword">in</span> defaultProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">[</span>propName<span class="token punctuation">]</span> <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>        props<span class="token punctuation">[</span>propName<span class="token punctuation">]</span> <span class="token operator">=</span> defaultProps<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">ReactElement</span><span class="token punctuation">(</span>    type<span class="token punctuation">,</span>    key<span class="token punctuation">,</span>    ref<span class="token punctuation">,</span>    self<span class="token punctuation">,</span>    source<span class="token punctuation">,</span>    ReactCurrentOwner<span class="token punctuation">.</span>current<span class="token punctuation">,</span>    props  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最后，React 会返回一个包含组件数据的 ReactElement 的对象，该对象有一个属性<code>$$typeof: REACT_ELEMENT_TYPE</code>来标记他是一个 ReactElement。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> ReactElement <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>type<span class="token punctuation">,</span> key<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> self<span class="token punctuation">,</span> source<span class="token punctuation">,</span> owner<span class="token punctuation">,</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// This tag allows us to uniquely identify this as a React Element</span>    $$<span class="token keyword">typeof</span><span class="token punctuation">:</span> REACT_ELEMENT_TYPE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Built-in properties that belong on the element</span>    type<span class="token punctuation">:</span> type<span class="token punctuation">,</span>    key<span class="token punctuation">:</span> key<span class="token punctuation">,</span>    ref<span class="token punctuation">:</span> ref<span class="token punctuation">,</span>    props<span class="token punctuation">:</span> props<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Record the component responsible for creating this element.</span>    _owner<span class="token punctuation">:</span> owner<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>在 React 中有一个全局的方法<code>isValidElement</code>来校验合法的 ReactElement。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Verifies the object is a ReactElement. * See https://reactjs.org/docs/react-api.html#isvalidelement * @param {?object} object * @return {boolean} True if `object` is a ReactElement. * @final */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isValidElement</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token keyword">typeof</span> object <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">&amp;&amp;</span>    object <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>    object<span class="token punctuation">.</span>$$<span class="token keyword">typeof</span> <span class="token operator">===</span> REACT_ELEMENT_TYPE  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以发现<code>$$typeof === REACT_ELEMENT_TYPE</code>的非 null 对象就是一个合法的 ReactElement。换言之，在 React 中，所有 JSX 在运行时的返回结果（即 React.createElement()的返回值）都是 React Element。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>React Component<br>在 React 中，我们常使用 ClassComponent 与 FunctionComponent 构建组件。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">AppClass</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>p<span class="token operator">></span>KaSong<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"这是ClassComponent："</span><span class="token punctuation">,</span> AppClass<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"这是Element："</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>AppClass <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">AppFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>p<span class="token operator">></span>KaSong<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"这是FunctionComponent："</span><span class="token punctuation">,</span> AppFunc<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"这是Element："</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>AppFunc <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>ClassComponent 对应的 Element 的 type 字段为 AppClass 自身。FunctionComponent 对应的 Element 的 type 字段为 AppFunc 自身：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  $$<span class="token keyword">typeof</span><span class="token punctuation">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>  key<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  ref<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  type<span class="token punctuation">:</span> ƒ <span class="token function">AppFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  _owner<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  _store<span class="token punctuation">:</span> <span class="token punctuation">{</span>validated<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  _self<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  _source<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span></code></pre><p>但是由于 class 组件和 function 组件本质上都是 function， 所以无法通过 instanceof 区分。</p><pre class=" language-javascript"><code class="language-javascript">AppClass <span class="token keyword">instanceof</span> <span class="token class-name">Function</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">;</span>AppFunc <span class="token keyword">instanceof</span> <span class="token class-name">Function</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><p>React 通过 ClassComponent 实例原型上的 isReactComponent 变量判断是否是 ClassComponent。</p><pre class=" language-javascript"><code class="language-javascript">ClassComponent<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>isReactComponent <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="JSX-与-Fiber-节点"><a href="#JSX-与-Fiber-节点" class="headerlink" title="JSX 与 Fiber 节点"></a>JSX 与 Fiber 节点</h2><p>从上面的内容我们可以发现，JSX 是一种描述当前组件内容的数据结构，他不包含组件 schedule、reconcile、render 所需的相关信息。<br>比如如下信息就不包括在 JSX 中：</p><ul><li>组件在更新中的优先级</li><li>组件的 state</li><li>组件被打上的用于 Renderer 的标记</li><li>这些内容都包含在 Fiber 节点中。</li></ul><p>所以，在组件 mount 时，Reconciler 根据 JSX 描述的组件内容生成组件对应的 Fiber 节点。<br>在 update 时，Reconciler 将 JSX 与 Fiber 节点保存的数据对比，生成组件对应的 Fiber 节点，并根据对比结果为 Fiber 节点打上标记。</p>]]></content>
      
      
      <categories>
          
          <category> React源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 自顶向下学习React源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章 React理念</title>
      <link href="/react/"/>
      <url>/react/</url>
      
        <content type="html"><![CDATA[<h1 id="React-理念：快速响应"><a href="#React-理念：快速响应" class="headerlink" title="React 理念：快速响应"></a>React 理念：快速响应</h1><hr><p>两大制约</p><ul><li>CPU 的瓶颈：JS 脚本执行和浏览器布局、绘制不能同时执行。</li><li>IO 的瓶颈：网络延迟客观存在</li></ul><p>React 的解决办法</p><ul><li>对于 CPU 瓶颈，是需要实现时间切片，而时间切片的关键是：将同步的更新变为可中断的异步更新。</li><li>对于 IO 瓶颈，将人机交互研究的结果整合到真实的 UI 中。React 内部实现了 Suspense 功能及配套的 hook——useDeferredValue，同样需要将同步的更新变为可中断的异步更新</li></ul><h1 id="老的-React15-架构"><a href="#老的-React15-架构" class="headerlink" title="老的 React15 架构"></a>老的 React15 架构</h1><hr><p>React15 架构可以分为两层：</p><ul><li>Reconciler（协调器）—— 负责找出变化的组件</li><li>Renderer（渲染器）—— 负责将变化的组件渲染到页面上</li></ul><h2 id="Reconciler（协调器）"><a href="#Reconciler（协调器）" class="headerlink" title="Reconciler（协调器）"></a>Reconciler（协调器）</h2><p>在 React 中可以通过 this.setState、this.forceUpdate、ReactDOM.render 等 API 触发更新。<br>每当有更新发生时，Reconciler 会做如下工作：</p><ol><li>调用函数组件、或 class 组件的 render 方法，将返回的 JSX 转化为虚拟 DOM</li><li>将虚拟 DOM 和上次更新时的虚拟 DOM 对比</li><li>通过对比找出本次更新中变化的虚拟 DOM</li><li>通知 Renderer 将变化的虚拟 DOM 渲染到页面上</li></ol><h2 id="Renderer（渲染器）"><a href="#Renderer（渲染器）" class="headerlink" title="Renderer（渲染器）"></a>Renderer（渲染器）</h2><p>由于 React 支持跨平台，所以不同平台有不同的 Renderer。我们前端最熟悉的是负责在浏览器环境渲染的 Renderer —— ReactDOM。<br>除此之外，还有：</p><ul><li>ReactNative (opens new window)渲染器，渲染 App 原生组件</li><li>ReactTest (opens new window)渲染器，渲染出纯 Js 对象用于测试</li><li>ReactArt (opens new window)渲染器，渲染到 Canvas, SVG 或 VML (IE8)</li></ul><p>在每次更新发生时，Renderer 接到 Reconciler 通知，将变化的组件渲染在当前宿主环境。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>在 Reconciler 中，mount 的组件会调用 mountComponent，update 的组件会调用 updateComponent。这两个方法都会递归更新子组件。由于递归执行，所以更新一旦开始，中途就无法中断。当层级很深时，递归更新时间超过了 16ms，用户交互就会卡顿。基于以上原因，React 团队决定重写架构。</p><h1 id="新的-React16-架构"><a href="#新的-React16-架构" class="headerlink" title="新的 React16 架构"></a>新的 React16 架构</h1><hr><p>React16 架构可以分为三层：</p><ul><li>Scheduler（调度器）—— 调度任务的优先级，高优任务优先进入 Reconciler</li><li>Reconciler（协调器）—— 负责找出变化的组件</li><li>Renderer（渲染器）—— 负责将变化的组件渲染到页面上</li></ul><p>可以看到，相较于 React15，React16 中新增了 Scheduler（调度器）。</p><h2 id="Scheduler（调度器）"><a href="#Scheduler（调度器）" class="headerlink" title="Scheduler（调度器）"></a>Scheduler（调度器）</h2><p>既然我们以浏览器是否有剩余时间作为任务中断的标准，那么我们需要一种机制，当浏览器有剩余时间时通知我们。<br>其实部分浏览器已经实现了这个 API，这就是 requestIdleCallback。但是由于以下因素，React 放弃使用：</p><ul><li>浏览器兼容性</li><li>触发频率不稳定，受很多因素影响。比如当我们的浏览器切换 tab 后，之前 tab 注册的 requestIdleCallback 触发的频率会变得很低</li></ul><p>基于以上原因，React 实现了功能更完备的 requestIdleCallbackpolyfill，这就是 Scheduler。除了在空闲时触发回调的功能外，Scheduler 还提供了多种调度优先级供任务设置。</p><h2 id="Reconciler（协调器）-1"><a href="#Reconciler（协调器）-1" class="headerlink" title="Reconciler（协调器）"></a>Reconciler（协调器）</h2><p>在 React15 中 Reconciler 是递归处理虚拟 DOM 的。让我们看看 React16 的 Reconciler。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** @noinline */</span><span class="token keyword">function</span> <span class="token function">workLoopConcurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Perform work until Scheduler asks us to yield</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>workInProgress <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">shouldYield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    workInProgress <span class="token operator">=</span> <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们可以看见，更新工作从递归变成了可以中断的循环过程。每次循环都会调用 shouldYield 判断当前是否有剩余时间。<br>那么 React16 是如何解决中断更新时 DOM 渲染不完全的问题呢？<br>在 React16 中，Reconciler 与 Renderer 不再是交替工作。当 Scheduler 将任务交给 Reconciler 后，Reconciler 会为变化的虚拟 DOM 打上代表<strong>增/删/更新</strong>的标记。<br>整个 Scheduler 与 Reconciler 的工作都在内存中进行。只有当所有组件都完成 Reconciler 的工作，才会统一交给 Renderer。</p><h2 id="Renderer（渲染器）-1"><a href="#Renderer（渲染器）-1" class="headerlink" title="Renderer（渲染器）"></a>Renderer（渲染器）</h2><p>Renderer 根据 Reconciler 为虚拟 DOM 打的标记，<strong>同步</strong>执行对应的 DOM 操作。<br>更新流程：<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fhq3GdyJncpUkuH1-oekuXnLv6ip.png"></p><h1 id="Fiber-架构"><a href="#Fiber-架构" class="headerlink" title="Fiber 架构"></a>Fiber 架构</h1><p>Fiber 包含三层含义：</p><ol><li>作为架构来说，之前 React15 的 Reconciler 采用递归的方式执行，数据保存在递归调用栈中，所以被称为 stack Reconciler。React16 的 Reconciler 基于 Fiber 节点实现，被称为 Fiber Reconciler。</li><li>作为静态的数据结构来说，每个 Fiber 节点对应一个 React element，保存了该组件的类型（函数组件/类组件/原生组件…）、对应的 DOM 节点等信息。</li><li>作为动态的工作单元来说，每个 Fiber 节点保存了本次更新中该组件改变的状态、要执行的工作（需要被删除/被插入页面中/被更新…）。</li></ol><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FqMQIsi5n6zJ52TFFdK-0X-e-tsX.png"></p><h2 id="Fiber-结构"><a href="#Fiber-结构" class="headerlink" title="Fiber 结构"></a>Fiber 结构</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">FiberNode</span><span class="token punctuation">(</span>  tag<span class="token punctuation">:</span> WorkTag<span class="token punctuation">,</span>  pendingProps<span class="token punctuation">:</span> mixed<span class="token punctuation">,</span>  key<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> string<span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> TypeOfMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 作为静态数据结构的属性</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> tag<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 在函数式组件被React.memo包裹时,elementType和type不同</span>  <span class="token comment" spellcheck="true">// 对于函数式组件,type是函数本身,对于class组件,type是class</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>elementType <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 真实dom节点</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>stateNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用于连接其他Fiber节点形成Fiber树</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">return</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>sibling <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>ref <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 作为动态的工作单元的属性</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>pendingProps <span class="token operator">=</span> pendingProps<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>memoizedProps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>updateQueue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>dependencies <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>mode <span class="token operator">=</span> mode<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>effectTag <span class="token operator">=</span> NoEffect<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>nextEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>firstEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>lastEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 调度优先级相关</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>lanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>childLanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 指向该fiber在另一次更新时对应的fiber</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>alternate <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="双缓存"><a href="#双缓存" class="headerlink" title="双缓存"></a>双缓存</h2><p>当我们用 canvas 绘制动画，每一帧绘制前都会调用 ctx.clearRect 清除上一帧的画面。<br>如果当前帧画面计算量比较大，导致清除上一帧画面到绘制当前帧画面之间有较长间隙，就会出现白屏。<br>为了解决这个问题，我们可以在内存中绘制当前帧动画，绘制完毕后直接用当前帧替换上一帧画面，由于省去了两帧替换间的计算时间，不会出现从白屏到出现画面的闪烁情况。<br>这种在内存中构建并直接替换的技术叫做<strong>双缓存</strong>。</p><p>React 使用“双缓存”来完成 Fiber 树的构建与替换——对应着 DOM 树的创建与更新。</p><h2 id="双缓存-Fiber-树"><a href="#双缓存-Fiber-树" class="headerlink" title="双缓存 Fiber 树"></a>双缓存 Fiber 树</h2><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FiKZ0eyEtPEFixJB4w8bISFMMeed.png"><br>在 React 中最多会同时存在两棵 Fiber 树。当前屏幕上显示内容对应的 Fiber 树称为 current Fiber 树，正在内存中构建的 Fiber 树称为 workInProgress Fiber 树。<br>current Fiber 树中的 Fiber 节点被称为 current fiber，workInProgress Fiber 树中的 Fiber 节点被称为 workInProgress fiber，他们通过 alternate 属性连接。</p><pre class=" language-javascript"><code class="language-javascript">currentFiber<span class="token punctuation">.</span>alternate <span class="token operator">===</span> workInProgressFiber<span class="token punctuation">;</span>workInProgressFiber<span class="token punctuation">.</span>alternate <span class="token operator">===</span> currentFiber<span class="token punctuation">;</span></code></pre><p>React 应用的根节点通过使 current 指针在不同 Fiber 树的 rootFiber 间切换来完成 current Fiber 树指向的切换。</p><p>即当 workInProgress Fiber 树构建完成交给 Renderer 渲染在页面上后，应用根节点的 current 指针指向 workInProgress Fiber 树，此时 workInProgress Fiber 树就变为 current Fiber 树。</p><p>每次状态更新都会产生新的 workInProgress Fiber 树，通过 current 与 workInProgress 的替换，完成 DOM 更新。</p><h2 id="Mount-时"><a href="#Mount-时" class="headerlink" title="Mount 时"></a>Mount 时</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> add<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>p onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">add</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>num<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>首次执行 ReactDOM.render 会创建 fiberRootNode（源码中叫 fiberRoot）和 rootFiber。其中 fiberRootNode 是整个应用的根节点，rootFiber 是<App/>所在组件树的根节点。</li></ol><p>之所以要区分 fiberRootNode 与 rootFiber，是因为在应用中我们可以多次调用 ReactDOM.render 渲染不同的组件树，他们会拥有不同的 rootFiber。但是整个应用的根节点只有一个，那就是 fiberRootNode。</p><p>fiberRootNode 的 current 会指向当前页面上已渲染内容对应 Fiber 树，即 current Fiber 树。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fo6z4lTvcsAJzL6EewXlzWt4EhZ8.png"></p><pre class=" language-javascript"><code class="language-javascript">fiberRootNode<span class="token punctuation">.</span>current <span class="token operator">=</span> rootFiber<span class="token punctuation">;</span></code></pre><p>由于是首屏渲染，页面中还没有挂载任何 DOM，所以 fiberRootNode.current 指向的 rootFiber 没有任何子 Fiber 节点（即 current Fiber 树为空）。</p><p>接下来进入 render 阶段，根据组件返回的 JSX 在内存中依次创建 Fiber 节点并连接在一起构建 Fiber 树，被称为 workInProgress Fiber 树。（下图中右侧为内存中构建的树，左侧为页面显示的树）</p><p>在构建 workInProgress Fiber 树时会尝试复用 current Fiber 树中已有的 Fiber 节点内的属性，在首屏渲染时只有 rootFiber 存在对应的 current fiber（即 rootFiber.alternate）。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fkkpy_jFMhTAlAUFDiScPn8qbA4X.png"></p><ol start="3"><li>图中右侧已构建完的 workInProgress Fiber 树在 commit 阶段渲染到页面。</li></ol><p>此时 DOM 更新为右侧树对应的样子。fiberRootNode 的 current 指针指向 workInProgress Fiber 树使其变为 current Fiber 树。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FnfUByoa0rQqp2jhk1wWqMgtFuq1.png"></p><h2 id="Update-时"><a href="#Update-时" class="headerlink" title="Update 时"></a>Update 时</h2><ol><li>接下来我们点击 p 节点触发状态改变，这会开启一次新的 render 阶段并构建一棵新的 workInProgress Fiber 树。</li></ol><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FlF0VfxFlK7fuFvkoc6IQXGxiXYH.png"><br>和 mount 时一样，workInProgress fiber 的创建可以复用 current Fiber 树对应的节点数据。这个决定是否复用的过程就是 Diff 算法。</p><ol start="2"><li>workInProgress Fiber 树在 render 阶段完成构建后进入 commit 阶段渲染到页面上。渲染完毕后，workInProgress Fiber 树变为 current Fiber 树。</li></ol><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FruNGLRBbr39ui2nZXe96ZHcTnC0.png"></p>]]></content>
      
      
      <categories>
          
          <category> React源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 自顶向下学习React源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 中后台系统多页签方案</title>
      <link href="/peqmq8/"/>
      <url>/peqmq8/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在中后台管理类系统中，<strong>多页签</strong>的需求非常普遍，用户常常需要在多个页签内跳转，比如填写表单时去查询某个列表获取一些字段信息再回到表单页面填写。这样的需求在 Vue 中使用 <a href="https://v3.cn.vuejs.org/api/built-in-components.html#keep-alive" target="_blank" rel="noopener">keep-alive</a> 即可实现，但是在 React 中，React Router 切换路由后就会卸载组件，而本身并没有提供类似 keep-alive 的功能，所以实现多页签的功能就会变得格外困难。我的项目也遇到了同样的问题，这里记录一下技术调研和技术选型的过程。</p><p>React 多页签 UI 本身好实现，难点是没有官方提供类似 Vue 的 keep-alive 功能，而使用 React Router，路由切换会直接卸载组件，导致无法缓存，用户的数据和行为因此丢失了。</p><p>社区上关于多页签的需求呼声也非常高，但是如 React 社区比较出名的中后台方案 <a href="https://github.com/ant-design/ant-design-pro" target="_blank" rel="noopener">Ant Design Pro</a> 也不支持该功能，至今仍然有很多 <a href="https://github.com/ant-design/ant-design-pro/issues?q=%E5%A4%9A%E9%A1%B5%E7%AD%BE%E9%9C%80%E6%B1%82" target="_blank" rel="noopener">Issue</a> 提出这类需求：<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FuCO9hJ-9X7b-OFn_NHjdjHcbZoU.png"></p><p><a href="https://github.com/afc163" target="_blank" rel="noopener">偏右</a>大佬早在 2017 年对此做出了回应，详见 <a href="https://github.com/ant-design/ant-design-pro/issues/220" target="_blank" rel="noopener">能否提供 tab 切换模式 · Issue #220 · ant-design/ant-design-pro · GitHub</a> ，这个 Issue 虽然关闭了，但这些年仍然活跃：<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FvCuqsZHkUWinokfvz1NcpDwc5Id.png"></p><p>看 👎 的数量就知道，用户其实对这种回答很不买帐。再来看 2019 年偏右对这个问题的解释，稍微具体了些：<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FofX-2QeIqDSJCDnMrh_wshVNfkp.png"></p><h1 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h1><p>所在部门的项目是一个小程序发布平台的管理后台，用于租户小程序的代码提交、提审、发布等工作流。前端客户端是 React 16.13.1，BFF 层则是 Koa2 的 Node 端，后端则是 Go。</p><h1 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h1><p>因为开发人员和测试人员会经常对小程序进行查询、提交代码、体验等等操作，有两个痛点很明显：</p><ol><li>列表查询的搜索条件会因为切换路由而消失，特别是有些筛选条件是从数据库拿的，会在数据库和网页之间来回复制粘贴，浪费时间。</li><li>对于测试人员和开发人员来说，浏览器的标签页经常会开很多，如果我想多操作几个小程序，则需要又多开浏览器的标签页进行操作，本来就是 SPA 单页应用，所有的操作应该尽量在一个页面上完成。</li></ol><h1 id="方案选型"><a href="#方案选型" class="headerlink" title="方案选型"></a>方案选型</h1><p>经过一番调研之后，基本的思路大概有三种：</p><ol><li>使用 Redux，数据往 store 里面怼，实现页面数据的”缓存“。</li><li>改写 React Router 源码，切换路由不卸载，改为隐藏。</li><li>使用社区的轮子，当时选了 GitHub 里的两个产品： <a href="https://github.com/lanistor/react-keeper" target="_blank" rel="noopener">React Keeper</a> 和 <a href="https://github.com/CJY0208/react-router-cache-route" target="_blank" rel="noopener">react-router-cache-route</a></li></ol><p>其实每种方案都存在一些问题，最终的选择是使用了排除法。<br>第一种方案的缺点是，项目本身的接入 Redux 的操作繁琐，改造侵入性比较大，不是很好的选择。<br>第二种的思路和 <a href="https://github.com/CJY0208/react-router-cache-route" target="_blank" rel="noopener">react-router-cache-route</a> 比较像，就不想重复造轮子了。<br>第三种选用开源方案，用社区的优秀轮子：<a href="https://github.com/CJY0208/react-router-cache-route" target="_blank" rel="noopener">react-router-cache-route</a></p><p>结合目前项目的情况，不想改动点太多，所以选择了开源方案 <a href="https://github.com/CJY0208/react-router-cache-route" target="_blank" rel="noopener">react-router-cache-route</a></p><h1 id="方案实施"><a href="#方案实施" class="headerlink" title="方案实施"></a>方案实施</h1><p>多标签页需求可以拆分为两步：</p><ol><li>实现页面数据的缓存</li><li>菜单路由结合多标签 ui</li></ol><h2 id="使用react-router-cache-route实现页面的数据缓存"><a href="#使用react-router-cache-route实现页面的数据缓存" class="headerlink" title="使用react-router-cache-route实现页面的数据缓存"></a>使用<a href="https://github.com/CJY0208/react-router-cache-route" target="_blank" rel="noopener">react-router-cache-route</a>实现页面的数据缓存</h2><p>首先遇到的第一个问题就是我目前的项目中，路由用的是配置是路由，即通过<a href="https://github.com/ReactTraining/react-router" target="_blank" rel="noopener">react-router-config</a>中的<code>renderRoutes</code>将配置式路由进行转换：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">renderRoutes</span><span class="token punctuation">(</span>routes<span class="token punctuation">,</span> extraProps<span class="token punctuation">,</span> switchProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>extraProps <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    extraProps <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>switchProps <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    switchProps <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 将配置式路由生成声明式路由，生成</span>  <span class="token comment" spellcheck="true">// &lt;Switch></span>  <span class="token comment" spellcheck="true">//         &lt;Route path={} exact={}>&lt;/Route></span>  <span class="token comment" spellcheck="true">// &lt;/Switch></span>  <span class="token keyword">return</span> routes    <span class="token operator">?</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>        Switch<span class="token punctuation">,</span>        switchProps<span class="token punctuation">,</span>        routes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>route<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>Route<span class="token punctuation">,</span> <span class="token punctuation">{</span>            key<span class="token punctuation">:</span> route<span class="token punctuation">.</span>key <span class="token operator">||</span> i<span class="token punctuation">,</span>            path<span class="token punctuation">:</span> route<span class="token punctuation">.</span>path<span class="token punctuation">,</span>            exact<span class="token punctuation">:</span> route<span class="token punctuation">.</span>exact<span class="token punctuation">,</span>            strict<span class="token punctuation">:</span> route<span class="token punctuation">.</span>strict<span class="token punctuation">,</span>            render<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> route<span class="token punctuation">.</span>render                <span class="token operator">?</span> route<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>                    <span class="token function">_extends</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> props<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> extraProps<span class="token punctuation">,</span> <span class="token punctuation">{</span>                      route<span class="token punctuation">:</span> route<span class="token punctuation">,</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>                  <span class="token punctuation">)</span>                <span class="token punctuation">:</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>                    route<span class="token punctuation">.</span>component<span class="token punctuation">,</span>                    <span class="token function">_extends</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> props<span class="token punctuation">,</span> extraProps<span class="token punctuation">,</span> <span class="token punctuation">{</span>                      route<span class="token punctuation">:</span> route<span class="token punctuation">,</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>                  <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span>    <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>而<a href="https://github.com/CJY0208/react-router-cache-route" target="_blank" rel="noopener">react-router-cache-route</a>目前不支持配置式路由。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Ft59aRxMoSdz4eMGTfBLOXfG3xGx.png"><br>所以就需要对<code>renderRoutes</code>方法进行改造，在生成路由时，用他提供的 CacheRoute 替换 Route<br>用 CacheSwitch 替换 Switch。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> CacheRoute<span class="token punctuation">,</span> <span class="token punctuation">{</span> CacheSwitch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-cache-route"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 重写react-router-config中的renderRoutes方法</span><span class="token comment" spellcheck="true">// 将react-router-dom中的Switch和Route组件替换为react-router-cache-route中的CacheSwitch和CacheRoute组件</span><span class="token comment" spellcheck="true">// 用于组件的缓存，利用react-router-cache-route轮子，在切换路由时不让组件卸载，而是隐藏</span><span class="token keyword">export</span> <span class="token keyword">const</span> renderRoutes <span class="token operator">=</span> <span class="token punctuation">(</span>routes<span class="token punctuation">,</span> extraProps <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> switchProps <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> routes    <span class="token operator">?</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>        CacheSwitch<span class="token punctuation">,</span>        switchProps<span class="token punctuation">,</span>        routes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>route<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>CacheRoute<span class="token punctuation">,</span> <span class="token punctuation">{</span>            key<span class="token punctuation">:</span> route<span class="token punctuation">.</span>key <span class="token operator">||</span> i<span class="token punctuation">,</span>            path<span class="token punctuation">:</span> route<span class="token punctuation">.</span>path<span class="token punctuation">,</span>            exact<span class="token punctuation">:</span> route<span class="token punctuation">.</span>exact<span class="token punctuation">,</span>            strict<span class="token punctuation">:</span> route<span class="token punctuation">.</span>strict<span class="token punctuation">,</span>            render<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> route<span class="token punctuation">.</span>render                <span class="token operator">?</span> route<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>props<span class="token punctuation">,</span> <span class="token operator">...</span>extraProps<span class="token punctuation">,</span> route<span class="token punctuation">:</span> route <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">:</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>component<span class="token punctuation">,</span> <span class="token punctuation">{</span>                    <span class="token operator">...</span>props<span class="token punctuation">,</span>                    <span class="token operator">...</span>extraProps<span class="token punctuation">,</span>                    route<span class="token punctuation">:</span> route<span class="token punctuation">,</span>                  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span>    <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="菜单路由结合多标签-ui"><a href="#菜单路由结合多标签-ui" class="headerlink" title="菜单路由结合多标签 ui"></a>菜单路由结合多标签 ui</h2><p>ui 的逻辑参考的是<a href="https://github.com/hsl947/react-antd-multi-tabs-admin" target="_blank" rel="noopener">react-antd-multi-tabs-admin</a>。</p><h3 id="UI-界面"><a href="#UI-界面" class="headerlink" title="UI 界面"></a>UI 界面</h3><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FkGiH4KxP7eKbIfUMnPhEcx9n1Ml.png"></p><h3 id="功能点"><a href="#功能点" class="headerlink" title="功能点"></a>功能点</h3><ol><li>根据左侧菜单栏生成对应的 Tab 标签</li><li>右键可以刷新、关闭、关闭其他、关闭全部</li><li>Tab 标签页本身可以关闭，关闭后自动切换到已打开的标签页</li><li>切换标签页时保持原有的数据不会重新加载</li></ol><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h4><p>用 store 存储标签页数据。Tab 标签页是一个全局共享，考虑到数据共享的问题，将数据存储到 store 中，并在每个页面共享。</p><blockquote><p>可以考虑把当前打开的标签数据同步至 localstory 中，实现刷新后依然可以恢复已打开的标签页，但是目前感觉比较鸡肋，只有把表单数据一起同步才有实用价值。</p></blockquote><h4 id="菜单和-Tab-页同步"><a href="#菜单和-Tab-页同步" class="headerlink" title="菜单和 Tab 页同步"></a>菜单和 Tab 页同步</h4><p>因为 url 已经和菜单页同步，所以获取当前菜单最方便的方式就是从 url 中获取当前的路由，然后生成标签页，当切换标签页时，直接用 history.push 的方式改变 url，此时菜单页也会跟着变。</p><h2 id="实施"><a href="#实施" class="headerlink" title="实施"></a>实施</h2><h3 id="新建-tabPanes-tsx"><a href="#新建-tabPanes-tsx" class="headerlink" title="新建 tabPanes.tsx"></a>新建 tabPanes.tsx</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span>  FC<span class="token punctuation">,</span>  useState<span class="token punctuation">,</span>  useEffect<span class="token punctuation">,</span>  useRef<span class="token punctuation">,</span>  useCallback<span class="token punctuation">,</span>  Component<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useHistory<span class="token punctuation">,</span> useLocation <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Tabs<span class="token punctuation">,</span> Alert<span class="token punctuation">,</span> Dropdown<span class="token punctuation">,</span> Menu <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"antd"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">"@pages/miniapps"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> getKeyName <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@utils/routerUtils"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> SyncOutlined <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@ant-design/icons"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useSelector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-redux"</span><span class="token punctuation">;</span><span class="token keyword">import</span> style <span class="token keyword">from</span> <span class="token string">"./index.module.less"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> CommonObjectType<span class="token punctuation">,</span> RefType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@type/type"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useActions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@utils/hook"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> RootState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@reducers/index"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> TabPane <span class="token punctuation">}</span> <span class="token operator">=</span> Tabs<span class="token punctuation">;</span><span class="token keyword">const</span> initPane <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token string">"代码管理"</span><span class="token punctuation">,</span>    key<span class="token punctuation">:</span> <span class="token string">"miniapps"</span><span class="token punctuation">,</span>    content<span class="token punctuation">:</span> Home<span class="token punctuation">,</span>    closable<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token string">"/miniapps"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 默认激活的Tab页</span>  defaultActiveKey<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 标签页的props</span>  panesItem<span class="token punctuation">:</span> <span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    content<span class="token punctuation">:</span> Component<span class="token punctuation">;</span>    key<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    closable<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span>    path<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 激活的标签页</span>  tabActiveKey<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 多页签组件</span><span class="token keyword">const</span> TabPanes<span class="token punctuation">:</span> FC<span class="token operator">&lt;</span>Props<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 记录当前激活的Tab页</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>activeKey<span class="token punctuation">,</span> setActiveKey<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 记录当前打开的Tab页</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>panes<span class="token punctuation">,</span> setPanes<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span>CommonObjectType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span>initPane<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 记录Tab页的刷新状态</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>isReload<span class="token punctuation">,</span> setIsReload<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span><span class="token keyword">boolean</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 记录当前右键选中的Tab页</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>selectedPanel<span class="token punctuation">,</span> setSelectedPanel<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span>CommonObjectType<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用useRef记录最新的Tab页数据</span>  <span class="token keyword">const</span> pathRef<span class="token punctuation">:</span> RefType <span class="token operator">=</span> useRef<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 取出操作Tab页的action</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> layouts <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"layouts"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 从store取出当前的Tab页列表和刷新路径</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> curTab<span class="token punctuation">,</span> reloadPath <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span>state<span class="token punctuation">:</span> RootState<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>layouts  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 取出props</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> defaultActiveKey<span class="token punctuation">,</span> panesItem<span class="token punctuation">,</span> tabActiveKey <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用history进行跳转，结合react-router-cache-route会将数据进行缓存</span>  <span class="token keyword">const</span> history <span class="token operator">=</span> <span class="token function">useHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 取出当前的path，例如/miniapps /log等</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> pathname<span class="token punctuation">,</span> search <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 可能会有带参数的情况</span>  <span class="token keyword">const</span> fullPath <span class="token operator">=</span> pathname <span class="token operator">+</span> search<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 记录当前打开的tab</span>  <span class="token keyword">const</span> storeTabs <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对路径进行累加，对当前打开的路径进行全存储</span>    <span class="token keyword">const</span> pathArr <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span>prev<span class="token punctuation">:</span> CommonObjectType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">:</span> CommonObjectType<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>        <span class="token operator">...</span>prev<span class="token punctuation">,</span>        next<span class="token punctuation">.</span>path<span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将数据记录到store中</span>    layouts<span class="token punctuation">.</span><span class="token function">setTab</span><span class="token punctuation">(</span>pathArr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 从本地存储中恢复已打开的tab列表</span>  <span class="token keyword">const</span> initTabs <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> initPanes <span class="token operator">=</span> curTab<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span>prev<span class="token punctuation">:</span> CommonObjectType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> title<span class="token punctuation">,</span> tabKey<span class="token punctuation">,</span> component<span class="token punctuation">:</span> Content <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getKeyName</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>          <span class="token operator">...</span>prev<span class="token punctuation">,</span>          <span class="token punctuation">{</span>            title<span class="token punctuation">,</span>            key<span class="token punctuation">:</span> tabKey<span class="token punctuation">,</span>            content<span class="token punctuation">:</span> Content<span class="token punctuation">,</span>            closable<span class="token punctuation">:</span> tabKey <span class="token operator">!==</span> <span class="token string">"/miniapps"</span><span class="token punctuation">,</span>            path<span class="token punctuation">:</span> next<span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从路由中获取当前需要打开的Tab页</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> tabKey <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getKeyName</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置当前打开的Tab页</span>    <span class="token function">setPanes</span><span class="token punctuation">(</span>initPanes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置当前激活的Tab页</span>    <span class="token function">setActiveKey</span><span class="token punctuation">(</span>tabKey<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>pathname<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化页面</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">initTabs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>initTabs<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// tab切换</span>  <span class="token keyword">const</span> onChange <span class="token operator">=</span> <span class="token punctuation">(</span>tabKey<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setActiveKey</span><span class="token punctuation">(</span>tabKey<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 移除tab</span>  <span class="token keyword">const</span> remove <span class="token operator">=</span> <span class="token punctuation">(</span>targetKey<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> delIndex <span class="token operator">=</span> panes<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>key <span class="token operator">===</span> targetKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    panes<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>delIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 删除非当前tab</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>targetKey <span class="token operator">!==</span> activeKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> nextKey <span class="token operator">=</span> activeKey<span class="token punctuation">;</span>      <span class="token function">setPanes</span><span class="token punctuation">(</span>panes<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setActiveKey</span><span class="token punctuation">(</span>nextKey<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">storeTabs</span><span class="token punctuation">(</span>panes<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 删除当前tab，地址往前推，如果前面没有tab页就往后推</span>    <span class="token keyword">const</span> nextPath <span class="token operator">=</span> curTab<span class="token punctuation">[</span>delIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> curTab<span class="token punctuation">[</span>delIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nextPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 记录删除后的Tab页</span>    <span class="token function">setPanes</span><span class="token punctuation">(</span>panes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将数据记录到store</span>    <span class="token function">storeTabs</span><span class="token punctuation">(</span>panes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// tab点击删除操作</span>  <span class="token keyword">const</span> onEdit <span class="token operator">=</span> <span class="token punctuation">(</span>targetKey<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">any</span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    action <span class="token operator">===</span> <span class="token string">"remove"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">remove</span><span class="token punctuation">(</span>targetKey<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// tab点击，激活标签页</span>  <span class="token keyword">const</span> onTabClick <span class="token operator">=</span> <span class="token punctuation">(</span>targetKey<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> path <span class="token punctuation">}</span> <span class="token operator">=</span> panes<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span>item<span class="token punctuation">:</span> CommonObjectType<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>key <span class="token operator">===</span> targetKey    <span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> pathname<span class="token punctuation">:</span> path <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 刷新当前 tab</span>  <span class="token keyword">const</span> refreshTab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setIsReload</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">setIsReload</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    layouts<span class="token punctuation">.</span><span class="token function">reloadTab</span><span class="token punctuation">(</span>pathname <span class="token operator">+</span> search<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      layouts<span class="token punctuation">.</span><span class="token function">reloadTab</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 关闭其他或关闭所有</span>  <span class="token keyword">const</span> removeAll <span class="token operator">=</span> async <span class="token punctuation">(</span>isCloseAll<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> path<span class="token punctuation">,</span> key <span class="token punctuation">}</span> <span class="token operator">=</span> selectedPanel<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"selectedPanel"</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 关闭所有就跳转到代码管理</span>    <span class="token comment" spellcheck="true">// 关闭其他就跳转到右键选择的tab页上</span>    <span class="token comment" spellcheck="true">// 情况一：在当前激活的tab页操作关闭其他，则会保留当前的tab页；</span>    <span class="token comment" spellcheck="true">// 情况二：在其他未激活的Tab页操作关闭其他，则会跳转到鼠标操作的tab页</span>    history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>isCloseAll <span class="token operator">?</span> <span class="token string">"/miniapps"</span> <span class="token punctuation">:</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前已打开的tab页</span>    <span class="token comment" spellcheck="true">// 如果右键操作的不是代码管理页（miniapps），且选择的是关闭其他，则当前打开的Tab页是代码管理页+ 右键点击所在的页面</span>    <span class="token comment" spellcheck="true">// 否则：如果右键操作的是代码管理页（miniapps），或者选择的是关闭所有，则当前打开的Tab页是代码管理页</span>    <span class="token keyword">const</span> nowPanes <span class="token operator">=</span>      key <span class="token operator">!==</span> <span class="token string">"/miniapps"</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isCloseAll        <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>initPane<span class="token punctuation">,</span> selectedPanel<span class="token punctuation">]</span>        <span class="token punctuation">:</span> initPane<span class="token punctuation">;</span>    <span class="token function">setPanes</span><span class="token punctuation">(</span>nowPanes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果是关闭全部，就跳转到代码管理页</span>    <span class="token function">setActiveKey</span><span class="token punctuation">(</span>isCloseAll <span class="token operator">?</span> <span class="token string">"/miniapps"</span> <span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">storeTabs</span><span class="token punctuation">(</span>nowPanes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> newPath <span class="token operator">=</span> pathname <span class="token operator">+</span> search<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前的路由和上一次的一样，return</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>panesItem<span class="token punctuation">.</span>path <span class="token operator">||</span> panesItem<span class="token punctuation">.</span>path <span class="token operator">===</span> pathRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 保存这次的路由地址</span>    pathRef<span class="token punctuation">.</span>current <span class="token operator">=</span> newPath<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> index <span class="token operator">=</span> panes<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">:</span> CommonObjectType<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> _<span class="token punctuation">.</span>key <span class="token operator">===</span> panesItem<span class="token punctuation">.</span>key<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 无效的新tab，return</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      <span class="token operator">!</span>panesItem<span class="token punctuation">.</span>key <span class="token operator">||</span>      <span class="token punctuation">(</span>index <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> pathRef<span class="token punctuation">.</span>current <span class="token operator">===</span> panes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setActiveKey</span><span class="token punctuation">(</span>tabActiveKey<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 新tab已存在，重新覆盖掉（解决带参数地址数据错乱问题）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      panes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>path <span class="token operator">=</span> pathRef<span class="token punctuation">.</span>current<span class="token punctuation">;</span>      <span class="token function">setPanes</span><span class="token punctuation">(</span>panes<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setActiveKey</span><span class="token punctuation">(</span>tabActiveKey<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 添加新tab并保存起来</span>    panes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>panesItem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setPanes</span><span class="token punctuation">(</span>panes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setActiveKey</span><span class="token punctuation">(</span>tabActiveKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">storeTabs</span><span class="token punctuation">(</span>panes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>panes<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> isDisabled <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> selectedPanel<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">"/miniapps"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// tab右击菜单</span>  <span class="token keyword">const</span> menu <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Menu<span class="token operator">></span>      <span class="token operator">&lt;</span>Menu<span class="token punctuation">.</span>Item        key<span class="token operator">=</span><span class="token string">"1"</span>        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">refreshTab</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        disabled<span class="token operator">=</span><span class="token punctuation">{</span>selectedPanel<span class="token punctuation">.</span>path <span class="token operator">!==</span> fullPath<span class="token punctuation">}</span>      <span class="token operator">></span>        刷新      <span class="token operator">&lt;</span><span class="token operator">/</span>Menu<span class="token punctuation">.</span>Item<span class="token operator">></span>      <span class="token operator">&lt;</span>Menu<span class="token punctuation">.</span>Item        key<span class="token operator">=</span><span class="token string">"2"</span>        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span>domEvent<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">remove</span><span class="token punctuation">(</span>selectedPanel<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>        disabled<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">isDisabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token operator">></span>        关闭      <span class="token operator">&lt;</span><span class="token operator">/</span>Menu<span class="token punctuation">.</span>Item<span class="token operator">></span>      <span class="token operator">&lt;</span>Menu<span class="token punctuation">.</span>Item        key<span class="token operator">=</span><span class="token string">"3"</span>        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span>domEvent<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">></span>        关闭其他      <span class="token operator">&lt;</span><span class="token operator">/</span>Menu<span class="token punctuation">.</span>Item<span class="token operator">></span>      <span class="token operator">&lt;</span>Menu<span class="token punctuation">.</span>Item        key<span class="token operator">=</span><span class="token string">"4"</span>        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span>domEvent<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>        disabled<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">isDisabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token operator">></span>        全部关闭      <span class="token operator">&lt;</span><span class="token operator">/</span>Menu<span class="token punctuation">.</span>Item<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Menu<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> onRightClick <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">:</span> CommonObjectType<span class="token punctuation">,</span> panel<span class="token punctuation">:</span> object<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setSelectedPanel</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>Tabs        activeKey<span class="token operator">=</span><span class="token punctuation">{</span>activeKey<span class="token punctuation">}</span>        className<span class="token operator">=</span><span class="token punctuation">{</span>style<span class="token punctuation">.</span>tabs<span class="token punctuation">}</span>        defaultActiveKey<span class="token operator">=</span><span class="token punctuation">{</span>defaultActiveKey<span class="token punctuation">}</span>        hideAdd        onChange<span class="token operator">=</span><span class="token punctuation">{</span>onChange<span class="token punctuation">}</span>        onEdit<span class="token operator">=</span><span class="token punctuation">{</span>onEdit<span class="token punctuation">}</span>        onTabClick<span class="token operator">=</span><span class="token punctuation">{</span>onTabClick<span class="token punctuation">}</span>        type<span class="token operator">=</span><span class="token string">"editable-card"</span>      <span class="token operator">></span>        <span class="token punctuation">{</span>panes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pane<span class="token punctuation">:</span> CommonObjectType<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>          <span class="token operator">&lt;</span>TabPane            closable<span class="token operator">=</span><span class="token punctuation">{</span>pane<span class="token punctuation">.</span>closable<span class="token punctuation">}</span>            key<span class="token operator">=</span><span class="token punctuation">{</span>pane<span class="token punctuation">.</span>key<span class="token punctuation">}</span>            tab<span class="token operator">=</span><span class="token punctuation">{</span>              <span class="token operator">&lt;</span>Dropdown                overlay<span class="token operator">=</span><span class="token punctuation">{</span>menu<span class="token punctuation">}</span>                placement<span class="token operator">=</span><span class="token string">"bottomLeft"</span>                trigger<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">"contextMenu"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>              <span class="token operator">></span>                <span class="token operator">&lt;</span>span onContextMenu<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">onRightClick</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> pane<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>                  <span class="token punctuation">{</span>isReload <span class="token operator">&amp;&amp;</span>                    pane<span class="token punctuation">.</span>path <span class="token operator">===</span> fullPath <span class="token operator">&amp;&amp;</span>                    pane<span class="token punctuation">.</span>path <span class="token operator">!==</span> <span class="token string">"/401"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>                      <span class="token operator">&lt;</span>SyncOutlined title<span class="token operator">=</span><span class="token string">"刷新"</span> spin<span class="token operator">=</span><span class="token punctuation">{</span>isReload<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>                    <span class="token punctuation">)</span><span class="token punctuation">}</span>                  <span class="token punctuation">{</span>pane<span class="token punctuation">.</span>title<span class="token punctuation">}</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">/</span>Dropdown<span class="token operator">></span>            <span class="token punctuation">}</span>          <span class="token operator">></span>            <span class="token punctuation">{</span>reloadPath <span class="token operator">!==</span> pane<span class="token punctuation">.</span>path <span class="token operator">?</span> <span class="token punctuation">(</span>              <span class="token operator">&lt;</span>pane<span class="token punctuation">.</span>content path<span class="token operator">=</span><span class="token punctuation">{</span>pane<span class="token punctuation">.</span>path<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>              <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> height<span class="token punctuation">:</span> <span class="token string">"100vh"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>                <span class="token operator">&lt;</span>Alert message<span class="token operator">=</span><span class="token string">"刷新中..."</span> type<span class="token operator">=</span><span class="token string">"info"</span> <span class="token operator">/</span><span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token punctuation">)</span><span class="token punctuation">}</span>          <span class="token operator">&lt;</span><span class="token operator">/</span>TabPane<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Tabs<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> TabPanes<span class="token punctuation">;</span></code></pre><h3 id="新建-useTabActive-自定义-Hook"><a href="#新建-useTabActive-自定义-Hook" class="headerlink" title="新建 useTabActive 自定义 Hook"></a>新建 useTabActive 自定义 Hook</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> noNewTab <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"/login"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不需要新建 tab的页面</span><span class="token keyword">interface</span> <span class="token class-name">PanesItemProps</span> <span class="token punctuation">{</span>  title<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  content<span class="token punctuation">:</span> Component<span class="token punctuation">;</span>  key<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  closable<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span>  path<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> useTabActive <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> pathname<span class="token punctuation">,</span> search <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>panesItem<span class="token punctuation">,</span> setPanesItem<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span>PanesItemProps<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// @ts-ignore</span>    content<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    key<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    closable<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> pathRef<span class="token punctuation">:</span> RefType <span class="token operator">=</span> useRef<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>tabActiveKey<span class="token punctuation">,</span> setTabActiveKey<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"miniapps"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 记录标签页</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> tabKey<span class="token punctuation">,</span> title<span class="token punctuation">,</span> component<span class="token punctuation">:</span> Content <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getKeyName</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 新tab已存在或不需要新建tab，return</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">===</span> pathRef<span class="token punctuation">.</span>current <span class="token operator">||</span> noNewTab<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setTabActiveKey</span><span class="token punctuation">(</span>tabKey<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 记录新的路径，用于下次更新比较</span>    <span class="token keyword">const</span> newPath <span class="token operator">=</span> search <span class="token operator">?</span> pathname <span class="token operator">+</span> search <span class="token punctuation">:</span> pathname<span class="token punctuation">;</span>    pathRef<span class="token punctuation">.</span>current <span class="token operator">=</span> newPath<span class="token punctuation">;</span>    <span class="token function">setPanesItem</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      title<span class="token punctuation">,</span>      content<span class="token punctuation">:</span> Content<span class="token punctuation">,</span>      key<span class="token punctuation">:</span> tabKey<span class="token punctuation">,</span>      closable<span class="token punctuation">:</span> tabKey <span class="token operator">!==</span> <span class="token string">"/miniapps"</span><span class="token punctuation">,</span>      path<span class="token punctuation">:</span> newPath<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTabActiveKey</span><span class="token punctuation">(</span>tabKey<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>pathname<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> panesItem<span class="token punctuation">,</span> tabActiveKey <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="将原来的-content-内容组件进行替换"><a href="#将原来的-content-内容组件进行替换" class="headerlink" title="将原来的 content 内容组件进行替换"></a>将原来的 content 内容组件进行替换</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token punctuation">{</span> panesItem<span class="token punctuation">,</span> tabActiveKey <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useTabActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>Layout<span class="token punctuation">.</span>Content<span class="token operator">></span>  <span class="token operator">&lt;</span>TabPanes    defaultActiveKey<span class="token operator">=</span><span class="token string">"miniapps"</span>    panesItem<span class="token operator">=</span><span class="token punctuation">{</span>panesItem<span class="token punctuation">}</span>    tabActiveKey<span class="token operator">=</span><span class="token punctuation">{</span>tabActiveKey<span class="token punctuation">}</span>   <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Layout<span class="token punctuation">.</span>Content<span class="token operator">></span></code></pre><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="routes-路由重复渲染"><a href="#routes-路由重复渲染" class="headerlink" title="routes 路由重复渲染"></a>routes 路由重复渲染</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  BrowserRouter as Router<span class="token punctuation">,</span>  Switch<span class="token punctuation">,</span>  Route<span class="token punctuation">,</span>  Redirect<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> RouteConfigComponentProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-config"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> renderRoutes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@utils/routerUtils"</span><span class="token punctuation">;</span><span class="token keyword">import</span> config <span class="token keyword">from</span> <span class="token string">"@utils/config"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useDispatch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-redux"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">"@layouts/default"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Autho <span class="token keyword">from</span> <span class="token string">"@components/autho"</span><span class="token punctuation">;</span><span class="token keyword">import</span> NotFined <span class="token keyword">from</span> <span class="token string">"@components/errorPage/404"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useActions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@utils/hook"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 合并路由</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token operator">...</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@pages/manager_develop/router"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">,</span>  <span class="token operator">...</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@pages/miniapps/router"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">,</span>  <span class="token operator">...</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@pages/templates/router"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">,</span>  <span class="token operator">...</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@pages/log/router"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">,</span>  <span class="token operator">...</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@pages/dashboard/router"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">,</span>  <span class="token operator">...</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@pages/operations/router"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span> exact<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> NotFined <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> loginRoute <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@pages/login/router"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">;</span>type RouteComponentType <span class="token operator">=</span> React<span class="token punctuation">.</span>ComponentType<span class="token operator">&lt;</span>RouteConfigComponentProps<span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span><span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">const</span> Root<span class="token punctuation">:</span> RouteComponentType <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 取出操作Tab页的action</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> layouts <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"layouts"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  window<span class="token punctuation">.</span>router <span class="token operator">=</span> props<span class="token punctuation">;</span>  window<span class="token punctuation">.</span>dispatch <span class="token operator">=</span> dispatch<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>props<span class="token punctuation">.</span>route<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// @ts-ignore</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>pathname <span class="token operator">===</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span>router<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>homeUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    layouts<span class="token punctuation">.</span><span class="token function">setTab</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"/miniapps"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// （1）这里渲染了一次</span>  <span class="token keyword">return</span> <span class="token function">renderRoutes</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>route<span class="token punctuation">.</span>routes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> rootRoutes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    component<span class="token punctuation">:</span> Root<span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"首页"</span><span class="token punctuation">,</span>    routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token operator">...</span>loginRoute<span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// （2）这里渲染了一次</span>        component<span class="token punctuation">:</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>          <span class="token operator">&lt;</span>Layout key<span class="token operator">=</span><span class="token string">"root_layout"</span><span class="token operator">></span>            <span class="token punctuation">{</span>props<span class="token punctuation">.</span>route <span class="token operator">&amp;&amp;</span> <span class="token function">renderRoutes</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>route<span class="token punctuation">.</span>routes<span class="token punctuation">)</span><span class="token punctuation">}</span>          <span class="token operator">&lt;</span><span class="token operator">/</span>Layout<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token operator">...</span>routes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token operator">...</span>item<span class="token punctuation">,</span>            component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">const</span> C <span class="token operator">=</span> item<span class="token punctuation">.</span>component<span class="token punctuation">;</span>              <span class="token keyword">return</span> <span class="token punctuation">(</span>                <span class="token operator">&lt;</span>Autho block<span class="token operator">=</span><span class="token string">"nav"</span> funcCode<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>menuCode<span class="token punctuation">}</span><span class="token operator">></span>                  <span class="token operator">&lt;</span>C <span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>Autho<span class="token operator">></span>              <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> RouterMap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Router basename<span class="token operator">=</span><span class="token punctuation">{</span>config<span class="token punctuation">.</span>routerBaseName<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* (3)这里渲染了一次*/</span><span class="token punctuation">}</span>      <span class="token punctuation">{</span><span class="token function">renderRoutes</span><span class="token punctuation">(</span>rootRoutes<span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> RouterMap<span class="token punctuation">;</span></code></pre><p>这里一共在三个地方调用了<code>renderRoutes(rootRoutes)</code>进行了组件渲染，而且<code>rootRoutes</code>的结构比较诡异：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"首页"</span><span class="token punctuation">,</span>    routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">"/login"</span><span class="token punctuation">,</span>        exact<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            path<span class="token punctuation">:</span> <span class="token string">"/operations/error"</span><span class="token punctuation">,</span>            exact<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">"错误日志"</span><span class="token punctuation">,</span>            menuCode<span class="token punctuation">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            path<span class="token punctuation">:</span> <span class="token string">"/operations/errorinfo"</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">"错误详情"</span><span class="token punctuation">,</span>            menuCode<span class="token punctuation">:</span> <span class="token string">"errorinfo"</span><span class="token punctuation">,</span>            exact<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            path<span class="token punctuation">:</span> <span class="token string">"/operations/performance"</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">"性能监控"</span><span class="token punctuation">,</span>            menuCode<span class="token punctuation">:</span> <span class="token string">"performance"</span><span class="token punctuation">,</span>            exact<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            path<span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>            exact<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>参考 cms 的路由结构：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>        exact<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">"/register_customer"</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> <span class="token string">"customer"</span><span class="token punctuation">,</span>        title<span class="token punctuation">:</span> <span class="token string">"集团客户"</span><span class="token punctuation">,</span>        exact<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">"/region_customer"</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> <span class="token string">"customer"</span><span class="token punctuation">,</span>        title<span class="token punctuation">:</span> <span class="token string">"区域客户"</span><span class="token punctuation">,</span>        exact<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">"/user_project_visit"</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> <span class="token string">"customer"</span><span class="token punctuation">,</span>        title<span class="token punctuation">:</span> <span class="token string">"项目客户"</span><span class="token punctuation">,</span>        exact<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>        exact<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>或者另一种嵌套结构：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"首页"</span><span class="token punctuation">,</span>    routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">"/operations/error"</span><span class="token punctuation">,</span>        exact<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> <span class="token string">"错误日志"</span><span class="token punctuation">,</span>        menuCode<span class="token punctuation">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">"/operations/errorinfo"</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> <span class="token string">"错误详情"</span><span class="token punctuation">,</span>        menuCode<span class="token punctuation">:</span> <span class="token string">"errorinfo"</span><span class="token punctuation">,</span>        exact<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">"/operations/performance"</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> <span class="token string">"性能监控"</span><span class="token punctuation">,</span>        menuCode<span class="token punctuation">:</span> <span class="token string">"performance"</span><span class="token punctuation">,</span>        exact<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>        exact<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h2 id="Layout-布局组件耦合严重"><a href="#Layout-布局组件耦合严重" class="headerlink" title="Layout 布局组件耦合严重"></a>Layout 布局组件耦合严重</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Layout</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> minHeight<span class="token punctuation">:</span> <span class="token string">"100vh"</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token string">"100%"</span><span class="token punctuation">,</span> overflow<span class="token punctuation">:</span> <span class="token string">"hidden"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Sider</span>    <span class="token attr-name">collapsible</span>    <span class="token attr-name">collapsed</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>collapsed<span class="token punctuation">}</span></span>    <span class="token attr-name">onCollapse</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>setCollapsed<span class="token punctuation">}</span></span>    <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> position<span class="token punctuation">:</span> <span class="token string">"fixed"</span><span class="token punctuation">,</span> zIndex<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token string">"100%"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>  <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> display<span class="token punctuation">:</span> <span class="token string">"flex"</span><span class="token punctuation">,</span> padding<span class="token punctuation">:</span> <span class="token number">16</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>platforms<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Select</span>          <span class="token attr-name">onSelect</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>platforms<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>component_id <span class="token operator">===</span> id<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span></span><span class="token attr-name">}</span>          <span class="token attr-name">defaultValue</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>component_id<span class="token punctuation">}</span></span>          <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>env<span class="token punctuation">}</span></span>        <span class="token punctuation">></span></span>          <span class="token punctuation">{</span>platforms<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Select.Option</span>              <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>opt<span class="token punctuation">.</span>component_id<span class="token punctuation">}</span></span>              <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>opt<span class="token punctuation">.</span>component_id<span class="token punctuation">}</span></span>              <span class="token attr-name">title</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>opt<span class="token punctuation">.</span>component_name<span class="token punctuation">}</span></span>            <span class="token punctuation">></span></span>              <span class="token punctuation">{</span>opt<span class="token punctuation">.</span>component_name<span class="token punctuation">}</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Select.Option</span><span class="token punctuation">></span></span>          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Select</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LogoutOutlined</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>logout<span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>logut<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">{</span><span class="token function">renderMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Sider</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Layout</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> marginLeft<span class="token punctuation">:</span> collapsed <span class="token operator">?</span> <span class="token string">"80px"</span> <span class="token punctuation">:</span> <span class="token string">"200px"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Layout.Content</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TabPanes</span>        <span class="token attr-name">defaultActiveKey</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>miniapps<span class="token punctuation">"</span></span>        <span class="token attr-name">panesItem</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>panesItem<span class="token punctuation">}</span></span>        <span class="token attr-name">tabActiveKey</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>tabActiveKey<span class="token punctuation">}</span></span>      <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Layout.Content</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Footer</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> textAlign<span class="token punctuation">:</span> <span class="token string">"center"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Copyright ©<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Footer</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Layout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Layout</span><span class="token punctuation">></span></span></code></pre><p>可以看到，布局组件嵌套了包括小程序平台的业务组件逻辑，我这次也把 Tab 组件嵌套进去了，耦合有点强，后续维护成本高，后面考虑从路由出发，重新梳理下结构。<br>对比 cms 的布局组件，就具有相对高的通用性</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>common-layout-default<span class="token punctuation">"</span></span>  <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> background<span class="token punctuation">:</span> props<span class="token punctuation">.</span>bgColor <span class="token operator">||</span> <span class="token string">"#fff"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Header</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>    <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>common-layouts-side-styles<span class="token punctuation">"</span></span>    <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> maxWidth<span class="token punctuation">:</span> props<span class="token punctuation">.</span>maxWidth<span class="token punctuation">,</span> minWidth<span class="token punctuation">:</span> props<span class="token punctuation">.</span>minWidth <span class="token punctuation">}</span><span class="token punctuation">}</span></span>  <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>layout-side<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SideNavigation</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SideNavigation</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>layout-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h1 id="需要测试的功能点"><a href="#需要测试的功能点" class="headerlink" title="需要测试的功能点"></a>需要测试的功能点</h1><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FkGiH4KxP7eKbIfUMnPhEcx9n1Ml.png"></p><h2 id="登录相关"><a href="#登录相关" class="headerlink" title="登录相关"></a>登录相关</h2><ul><li>直接输入…/login 进行登录后标签页功能</li><li>正常退出后重新登录后标签页功能</li></ul><h2 id="权限相关"><a href="#权限相关" class="headerlink" title="权限相关"></a>权限相关</h2><ul><li>无页面权限时的标签页功能</li><li>目前路由和标签页是全匹配新建的，只有当路由完全一致时才会新建标签页，否则会显示无权限，例如<code>.../p-yunke-ai-third-platform/operations/error</code>和<code>.../p-yunke-ai-third-platform/operations/error/</code>，多了一个<code>/</code>都不行</li></ul><h2 id="标签页功能"><a href="#标签页功能" class="headerlink" title="标签页功能"></a>标签页功能</h2><p>默认代码管理页面为默认页面，无法关闭。</p><ul><li><p>新增标签页</p><blockquote><p>点击左侧菜单，如果打开的是不同的页面，则会新建 tab</p></blockquote></li><li><p>关闭标签页</p></li><li><p>刷新当前页</p><blockquote><p>只有在当前激活的标签页才能进行刷新页面的操作</p></blockquote></li><li><p>关闭其它标签</p></li><li><p>关闭全部标签</p><blockquote><p>规则：在当前已打开的 tab 页， 如果右键操作的不是代码管理页（miniapps），且选择的是关闭其他，则当前打开的 Tab 页是代码管理页+ 右键点击所在的页面<br>否则：如果右键操作的是代码管理页（miniapps），或者选择的是关闭所有，则当前保留的 Tab 页是代码管理页</p></blockquote></li></ul><h2 id="页面数据缓存"><a href="#页面数据缓存" class="headerlink" title="页面数据缓存"></a>页面数据缓存</h2><p>目前支持在不同标签页切换时不会清空表单数据，但是刷新依然会清空（代码管理页面除外，单独做了刷新后依旧可以缓存数据）</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域场景汇总</title>
      <link href="/fgligg/"/>
      <url>/fgligg/</url>
      
        <content type="html"><![CDATA[<h1 id="Access-Control-Allow-Origin-相关"><a href="#Access-Control-Allow-Origin-相关" class="headerlink" title="Access-Control-Allow-Origin 相关"></a>Access-Control-Allow-Origin 相关</h1><h2 id="问题出现"><a href="#问题出现" class="headerlink" title="问题出现"></a>问题出现</h2><p>No ‘Access-Control-Allow-Origin’ header is present on the requested resource，但是 status 200 OK<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fipa7Fg68MI7orwWfEZmwY-oNzX4.png"></p><pre><code>Access to XMLHttpRequest at &#39;http://xxx/get&#39; from origin &#39;http://ccc&#39; has been blocked by CORS policy: Response to preflight request doesn&#39;t pass access control check: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.</code></pre><p>这种现象是服务器端后台允许 OPTIONS 请求,并且接口也允许 OPTIONS 请求,但是头部匹配时出现不匹配现象.<br>比如 origin 头部检查不匹配,比如少了一些头部的支持(如常见的 X-Requested-With 头部),然后服务端就会将 response 返回给前端,前端检测到这个后就触发 XHR.onerror,导致前端控制台报错.<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FkHkJ6Q9H_zop1YV_KAhWivdtRhD.png"></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>增加跨域中间件：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Context <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"koa"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 跨域白名单 */</span><span class="token keyword">enum</span> WhiteList <span class="token punctuation">{</span>  DEV <span class="token operator">=</span> <span class="token string">'http://dev-xxx.com:6666'</span><span class="token punctuation">,</span>  TEST_HTTP <span class="token operator">=</span> <span class="token string">'http://test.com'</span><span class="token punctuation">,</span>  TEST_HTTPS <span class="token operator">=</span> <span class="token string">'https://test.com'</span><span class="token punctuation">,</span>  PROD_HTTP <span class="token operator">=</span> <span class="token string">'http://prod.com'</span><span class="token punctuation">,</span>  PROD_HTTPS <span class="token operator">=</span> <span class="token string">'https://prod.com'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 跨域中间件 * @param ctx 上下文拿到Origin来判断是否是跨域请求 * @param next 如果是跨域就设置允许的源和Headers,再放行 */</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">CORSMiddleware</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> Context<span class="token punctuation">,</span> next<span class="token punctuation">:</span> <span class="token punctuation">(</span>err<span class="token operator">?</span><span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Promise<span class="token operator">&lt;</span>any<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span>any<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取 Origin 请求头，只有非简单请求时，浏览器才会带上Origin字段来标识</span>  <span class="token keyword">const</span> requestOrigin <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'Origin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 不管有没有跨域都要设置 Vary: Origin</span>  ctx<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'Vary'</span><span class="token punctuation">,</span> <span class="token string">'Origin'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> whiteList <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>WhiteList<span class="token punctuation">)</span> <span class="token keyword">as</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 1.如果没有设置，说明没有跨域，跳过</span>  <span class="token comment" spellcheck="true">// 2.或者 不在域名白名单中这直接跳过</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>requestOrigin <span class="token operator">||</span> <span class="token operator">!</span>whiteList<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>requestOrigin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 设置响应头</span>  ctx<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> requestOrigin<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 跨域解决</span>  ctx<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Headers'</span><span class="token punctuation">,</span> <span class="token string">'Content-Type, Authorization, X-Requested-With'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Methods'</span><span class="token punctuation">,</span> <span class="token string">'PUT, POST, GET, DELETE, OPTIONS'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 该字段可选，用来指定本次预检请求的有效期，单位为秒。</span>  <span class="token comment" spellcheck="true">// 当请求方法是PUT或DELETE等特殊方法或者Content-Type字段的类型是application/json时，服务器会提前发送一次请求进行验证</span>  <span class="token comment" spellcheck="true">// 下面的的设置只本次验证的有效时间，即在该时间段内服务端可以不用进行验证</span>  ctx<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Max-Age"</span><span class="token punctuation">,</span> <span class="token string">'86400'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面向BUG开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于接口的请求的一些思考</title>
      <link href="/epmi4g/"/>
      <url>/epmi4g/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在优化小程序发布平台的时候，当时研究代码的时候，发现同事写的一段代码，是用来做异步任务切割的，当时很好奇这个任务切割可以解决什么问题。</p><h1 id="调研"><a href="#调研" class="headerlink" title="调研"></a>调研</h1><p>由于微信那边的限制，一次性只能同时发起 6 个接口请求，如果发起的更多就会报错。所以才有了这个任务切割的代码，但是在我实际的测试过程中发现，同时发起的 6 个请求，其实还是串行执行的，上一个结束之后才会调用下一个，然后我就对比了各个方式的调用结果。</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="一次性发送-100-个请求"><a href="#一次性发送-100-个请求" class="headerlink" title="一次性发送 100 个请求"></a>一次性发送 100 个请求</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://localhost:18740/users/1"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FqXLYewoSqF2lUHzTtHkn4eZqlQL.png"></p><h2 id="await-串行调用-100-个接口"><a href="#await-串行调用-100-个接口" class="headerlink" title="await 串行调用 100 个接口"></a>await 串行调用 100 个接口</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://localhost:18740/users/1"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fm_bNFGmIkCQEzLsQMtBVnydBvV7.png"></p><h2 id="分组调用，等待上一组接口全部返回再调用下一组"><a href="#分组调用，等待上一组接口全部返回再调用下一组" class="headerlink" title="分组调用，等待上一组接口全部返回再调用下一组"></a>分组调用，等待上一组接口全部返回再调用下一组</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> flatJobs <span class="token operator">=</span> <span class="token punctuation">(</span>jobs<span class="token punctuation">,</span> concurrent_count<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> concurrentCount <span class="token operator">=</span> concurrent_count <span class="token operator">||</span> <span class="token number">6</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> jobs<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span>queues<span class="token punctuation">,</span> c<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> concurrentCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        queues<span class="token punctuation">[</span>queues<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> queues<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      queues<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> queues<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> runSerialJobsQueue <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>jobs<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;</span> jobs<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> part_res <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>      jobs<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>part_res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">++</span>p<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://localhost:18740/users/1"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> rows <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> jobs <span class="token operator">=</span> rows<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">post</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> res <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> j <span class="token operator">=</span> <span class="token function">flatJobs</span><span class="token punctuation">(</span>jobs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">runSerialJobsQueue</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fg43nh7sWluHTdS1FccEUWY6ye5d.png"></p><h2 id="连接程池调用，只要有连接调用结束释放连接，便开始新的连接"><a href="#连接程池调用，只要有连接调用结束释放连接，便开始新的连接" class="headerlink" title="连接程池调用，只要有连接调用结束释放连接，便开始新的连接"></a>连接程池调用，只要有连接调用结束释放连接，便开始新的连接</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncPool</span><span class="token punctuation">(</span>poolLimit<span class="token punctuation">,</span> array<span class="token punctuation">,</span> iteratorFn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// if (shouldAssert) {</span>  <span class="token comment" spellcheck="true">//   assertType(poolLimit, "poolLimit", ["number"]);</span>  <span class="token comment" spellcheck="true">//   assertType(array, "array", ["array"]);</span>  <span class="token comment" spellcheck="true">//   assertType(iteratorFn, "iteratorFn", ["function"]);</span>  <span class="token comment" spellcheck="true">// }</span>  <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> executing <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">iteratorFn</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>poolLimit <span class="token operator">&lt;=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> e <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> executing<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>executing<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      executing<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>executing<span class="token punctuation">.</span>length <span class="token operator">>=</span> poolLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span>executing<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://localhost:18740/users/1"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token function">asyncPool</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> post<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FmjVFdQv6FKc8HpFVo4Ciy3bU9h6.png"></p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>可以看出，无论是先循环中一次性跑完异步请求，还是 await 串行去跑接口，或者说分组用 promise.all 去执行，或者用线程池去执行，100 个接口的用时都几乎没有差别。那就有了新的疑问，既然还是一个个处理的，为什么超过 6 个，微信就给限制了，反正也是一个个处理的。</p><p>经过分析，其实这 100 个接口虽然是同时发起，也就是并发的，但是却不是同时执行（并行）的，微信既限制了并发量，也限制了并行量，所以才导致了这样的结果。</p><p>当然，微信去限制并发和并行是为了安全考虑的，一次性发送太多接口，会导致系统炸了！</p>]]></content>
      
      
      <categories>
          
          <category> 胡说 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码的马斯洛金字塔</title>
      <link href="/xelwzw/"/>
      <url>/xelwzw/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.dein.fr/2015-02-18-maslows-pyramid-of-code-review.html" target="_blank" rel="noopener">原文链接</a><br>马斯洛金字塔是美国心理学家马斯洛提出的一个心理学模型，认为人类的心理需求从下往上分为 5 个层次，一旦实现了下层的需求，就会追求上一层的需求。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fsf3MQRcEQsb-ZJ2yZl4r64rucYf.jpeg"><br>这五个层次依次是：生理需求、安全需求、社交需求、尊严需求、自我实现。<br>代码质量也可以用金字塔模型表示，从下往上有五个层次。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FkmB_FgFNpCt2MD6Gls4vx0lhrNH.jpeg"><br><strong>第一层：正确</strong>（Correct）<br>代码是否执行预期的工作？是否考虑了边缘情况？是否经过充分测试？是否有可维护性？是否有可接受的性能？<br><strong>第二层：安全</strong>（Secure）<br>代码是否存在漏洞？数据是否安全存储？个人识别信息（PII）是否得到正确处理？是否对用户的输入进行了全面的验证？<br><strong>第三层：可读</strong>（Readable）<br>代码是否易于阅读和理解？测试足够简洁吗？变量、函数、类的名称是否适当？使用领域模型是否可以清晰地映射现实世界，以减少认知负担？是否使用一致的编码风格约定？<br><strong>第四层：优雅</strong>（Elegant）<br>代码是否利用了众所周知的编程模式？能否更简单简洁地实现所需的功能？你会为编写这些代码感到兴奋吗？你为这些代码感到骄傲吗？<br><strong>第五层：利他主义</strong>（Altruist）<br>别人能否从这些代码学到东西？这些代码是否会激励其他工程师进行改进？它是否会让世界变成一个更好的地方？</p>]]></content>
      
      
      <categories>
          
          <category> 胡说 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>探究npm 依赖管理</title>
      <link href="/zqsrm2/"/>
      <url>/zqsrm2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其实之前就有疑惑过,npm 依赖之间是怎么处理的,怎么才能相互依赖而又不重复，怎么处理不同版本依赖的问题等等，乱成一锅粥。出现错误要怎么解决? 哪些警告要额外注意一下?今天就来研究下。</p><h1 id="npm-安装机制"><a href="#npm-安装机制" class="headerlink" title="npm 安装机制"></a>npm 安装机制</h1><h2 id="A-和-B-同时依赖-C，这个包会被安装在哪里呢？"><a href="#A-和-B-同时依赖-C，这个包会被安装在哪里呢？" class="headerlink" title="A 和 B 同时依赖 C，这个包会被安装在哪里呢？"></a>A 和 B 同时依赖 C，这个包会被安装在哪里呢？</h2><p>假如有 A 和 B 两个包，两个包都依赖 C 这个包，npm 2 会依次递归安装 A 和 B 两个包及其子依赖包到 node_modules 中。执行完毕后，我们会看到 <code>./node_modules</code> 这层目录只含有这两个子目录：</p><pre><code>node_modules/├─┬ A│ ├── C├─┬ B│ └── C</code></pre><p>如果使用 npm 3 来进行安装的话，<code>./node_modules</code> 下的目录将会包含三个子目录：</p><pre><code>node_modules/├─┬ A├─┬ B├─┬ C</code></pre><p>为什么会出现这样的区别呢？这就要从 npm 的工作方式说起了：</p><h2 id="npm-2-和-npm-3-模块安装机制的差异"><a href="#npm-2-和-npm-3-模块安装机制的差异" class="headerlink" title="npm 2 和 npm 3 模块安装机制的差异"></a>npm 2 和 npm 3 模块安装机制的差异</h2><p>虽然目前最新的 npm 版本是 npm 7，但 npm 2 到 npm 3 的版本变更中实现了目录打平，与其他版本相比差别较大。因此，让我们具体看下这两个版本的差异。</p><p>npm 2 在安装依赖包时，采用简单的递归安装方法。执行 <code>npm install</code> 后，npm 根据 dependencies 和 devDependencies 属性中指定的包来确定第一层依赖，npm 2 会根据第一层依赖的子依赖，递归安装各个包到子依赖的 node_modules 中，直到子依赖不再依赖其他模块。执行完毕后，我们会看到 <code>./node_modules</code> 这层目录中包含有我们 package.json 文件中所有的依赖包，而这些依赖包的子依赖包都安装在了自己的 node_modules 中 ，形成类似于下面的依赖树：<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FppqBFUwkpGrtMkNTny7Uyg-k99C.png"><br>这样的目录有较为明显的好处：<br>1）层级结构非常明显，可以清楚的在第一层的 node_modules 中看到我们安装的所有包的子目录；<br>2）在已知自己所需包的名字以及版本号时，可以复制粘贴相应的文件到 node_modules 中，然后手动更改 package.json 中的配置；<br>3）如果想要删除某个包，只需要简单的删除 package.json 文件中相应的某一行，然后删除 node_modules 中该包的目录；<br>但是这样的层级结构也有较为明显的缺陷，当我的 A，B，C 三个包中有相同的依赖 D 时，执行 <code>npm install</code> 后，D 会被重复下载三次，而随着我们的项目越来越复杂，node_modules 中的依赖树也会越来越复杂，像 D 这样的包也会越来越多，造成了大量的冗余；在 windows 系统中，甚至会因为目录的层级太深导致文件的路径过长，触发文件路径不能超过 280 个字符的错误；</p><p>为了解决以上问题，npm 3 的 node_modules 目录改成了更为扁平状的层级结构，尽量把依赖以及依赖的依赖平铺在 node_modules 文件夹下共享使用。</p><h2 id="npm-3-对于同一依赖的不同版本会怎么处理呢？"><a href="#npm-3-对于同一依赖的不同版本会怎么处理呢？" class="headerlink" title="npm 3 对于同一依赖的不同版本会怎么处理呢？"></a>npm 3 对于同一依赖的不同版本会怎么处理呢？</h2><p>npm 3 会遍历所有的节点，逐个将模块放在 node_modules 的第一层，当发现有重复模块时，则丢弃， 如果遇到某些依赖版本不兼容的问题，则继续采用 npm 2 的处理方式，前面的放在 node_modules 目录中，后面的放在依赖树中。举个例子： A，B，依赖 D(v 0.0.1)，C 依赖 D(v 0.0.2):<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FvZO2pj5R9JpsDppNn2DYZf1FUJL.png"><br>但是 npm 3 会带来一个新的问题：由于在执行 npm install 的时候，按照 package.json 里依赖的顺序依次解析，上图如果 C 的顺序在 A，B 的前边，node_modules 树则会改变，会出现下边的情况：<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FrLv9LO5MkYZIBkL3Im9UhLVBupA.png"><br>由此可见，npm 3 并未完全解决冗余的问题，甚至还会带来新的问题。</p><h1 id="为什么会出现-package-lock-json-呢？"><a href="#为什么会出现-package-lock-json-呢？" class="headerlink" title="为什么会出现 package-lock.json 呢？"></a>为什么会出现 package-lock.json 呢？</h1><h2 id="package-json-的不足之处"><a href="#package-json-的不足之处" class="headerlink" title="package.json 的不足之处"></a>package.json 的不足之处</h2><p>npm install 执行后，会生成一个 node_modules 树，在理想情况下， 希望对于同一个 package.json 总是生成完全相同 node_modules 树。在某些情况下，确实如此。但在多数情况下，npm 无法做到这一点。有以下两个原因：<br>1）某些依赖项自上次安装以来，可能已发布了新版本 。比如：A 包在团队中第一个人安装的时候是 1.0.5 版本，package.json 中的配置项为 <code>A: &#39;^1.0.5&#39;</code> ；团队中第二个人把代码拉下来的时候，A 包的版本已经升级成了 1.0.8，根据 package.json 中的<a href="http://semver.org/" target="_blank" rel="noopener"> semver-range version</a> 规范，此时第二个人 npm install 后 A 的版本为 1.0.8； 可能会造成因为依赖版本不同而导致的 bug；<br>2）针对 1）中的问题，可能有的小伙伴会想，把 A 的版本号固定为 <code>A: &#39;1.0.5&#39;</code> 不就可以了吗？但是这样的做法其实并没有解决问题， 比如 A 的某个依赖在第一个人下载的时候是 2.1.3 版本，但是第二个人下载的时候已经升级到了 2.2.5 版本，此时生成的 node_modules 树依旧不完全相同 ，固定版本只是固定来自身的版本，依赖的版本无法固定。</p><h2 id="针对-package-json-不足的解决方法"><a href="#针对-package-json-不足的解决方法" class="headerlink" title="针对 package.json 不足的解决方法"></a>针对 package.json 不足的解决方法</h2><p>为了解决上述问题以及 npm 3 的问题，在 npm 5.0 版本后，npm install 后都会自动生成一个 package-lock.json 文件 ，当包中有 package-lock.json 文件时，npm install 执行时，如果 package.json 和 package-lock.json 中的版本兼容，会根据 package-lock.json 中的版本下载；如果不兼容，将会根据 package.json 的版本，更新 package-lock.json 中的版本，已保证 package-lock.json 中的版本兼容 package.json。</p><h2 id="package-lock-json-文件的结构"><a href="#package-lock-json-文件的结构" class="headerlink" title="package-lock.json 文件的结构"></a>package-lock.json 文件的结构</h2><p>package-lock.json 文件中的 name、version 与 package.json 中的 name、version 一样，描述了当前包的名字和版本，dependencies 是一个对象，该对象和 node_modules 中的包结构一一对应，对象的 key 为包的名称，值为包的一些描述信息， 根据 <a href="https://docs.npmjs.com/configuring-npm/package-lock-json.html#requires" target="_blank" rel="noopener">package-lock-json 官方文档</a>，主要的结构如下：</p><ul><li><code>version</code> ：包版本，即这个包当前安装在 <code>node_modules</code> 中的版本</li><li><code>resolved</code> ：包具体的安装来源</li><li><code>integrity</code> ：包 <code>hash</code> 值，验证已安装的软件包是否被改动过、是否已失效</li><li><code>requires</code> ：对应子依赖的依赖，与子依赖的 <code>package.json</code> 中 <code>dependencies</code> 的依赖项相同</li><li><code>dependencies</code> ：结构和外层的 <code>dependencies</code> 结构相同，存储安装在子依赖 <code>node_modules</code> 中的依赖包</li></ul><p>需要注意的是，并不是所有的子依赖都有 <code>dependencies</code> 属性，只有子依赖的依赖和当前已安装在根目录的 <code>node_modules</code> 中的依赖冲突之后，才会有这个属性。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FjshiUK2y-rCBSHN8bC4cWnmNrve.png"></p><h2 id="package-lock-json-文件的作用"><a href="#package-lock-json-文件的作用" class="headerlink" title="package-lock.json 文件的作用"></a>package-lock.json 文件的作用</h2><ul><li>在团队开发中，确保每个团队成员安装的依赖版本是一致的，确定一棵唯一的 node_modules 树；</li><li>node_modules 目录本身是不会被提交到代码库的，但是 package-lock.json 可以提交到代码库，如果开发人员想要回溯到某一天的目录状态，只需要把 package.json 和 package-lock.json 这两个文件回退到那一天即可 。</li><li>由于 package-lock.json 和 node_modules 中的依赖嵌套完全一致，可以更加清楚的了解树的结构及其变化。</li><li>在安装时，npm 会比较 node_modules 已有的包，和 package-lock.json 进行比较，如果重复的话，就跳过安装 ，从而优化了安装的过程。</li></ul><h1 id="依赖的区别与使用场景"><a href="#依赖的区别与使用场景" class="headerlink" title="依赖的区别与使用场景"></a>依赖的区别与使用场景</h1><p>npm 目前支持以下几类依赖包管理包括</p><ul><li>dependencies</li><li>devDependencies 开发环境依赖包</li><li>optionalDependencies 可选择的依赖包</li><li>peerDependencies 同等依赖</li><li>bundledDependencies 捆绑依赖包</li></ul><h3 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h3><p>无论在开发环境还是在生产环境都必须使用的依赖，是最常用的依赖包管理对象，例如 React，typescript，Axios 等，通过 <code>npm install XXX</code> 下载的包都会默认安装在 dependencies 对象中，也可以使用 <code>npm install XXX -S</code> 下载 dependencies 中的包；<br>插件下 dependencies 中的依赖会在安装插件时全部安装</p><h3 id="devDependencies"><a href="#devDependencies" class="headerlink" title="devDependencies"></a>devDependencies</h3><p>指可以在开发环境使用的依赖，例如 eslint，@types 类型定义文件等，通过 <code>npm install XXX -D</code> 下载的包都会在 devDependencies 对象中；<br>dependencies 和 devDependencies 最大的区别是在打包运行时，执行  <code>npm install</code>  时默认会把所有依赖全部安装，但是如果使用  <code>npm install --production</code>  时就只会安装 dependencies 中的依赖，如果是 node 服务项目，就可以采用这样的方式用于服务运行时安装和打包，减少包大小。</p><h3 id="optionalDependencies"><a href="#optionalDependencies" class="headerlink" title="optionalDependencies"></a>optionalDependencies</h3><p>指的是可以选择的依赖，当你希望某些依赖即使下载失败或者没有找到时，项目依然可以正常运行或者 npm 继续运行的时，就可以把这些依赖放在 optionalDependencies 对象中.<br>但是 optionalDependencies 会覆盖 dependencies 中的同名依赖包，所以不要把一个包同时写进两个对象中。</p><p>optionalDependencies 就像是我们的代码的一种保护机制一样，如果包存在的话就走存在的逻辑，不存在的就走不存在的逻辑。<br>eg: 图片压缩插件在 windows 和 mac 上的问题</p><h3 id="peerDependencies"><a href="#peerDependencies" class="headerlink" title="peerDependencies"></a>peerDependencies</h3><p>用于指定你当前的插件兼容的宿主必须要安装的包的版本，这个是什么意思呢？举个例子 🌰：我们常用的 react 组件库 <a href="https://ant.design/index-cn" target="_blank" rel="noopener">ant-design@4.x</a> 的 package.json 中的配置如下：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"peerDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"react"</span><span class="token operator">:</span> <span class="token string">">=16.9.0"</span><span class="token punctuation">,</span>    <span class="token property">"react-dom"</span><span class="token operator">:</span> <span class="token string">">=16.9.0"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>假设我们创建了一个名为 project 的项目，在此项目中我们要使用 <a href="https://ant.design/index-cn" target="_blank" rel="noopener">ant-design@4.x</a> 这个 UI 库，此时我们的项目就必须先安装 React &gt;= 16.9.0 和 React-dom &gt;= 16.9.0 的版本。</p><blockquote><p>注意:<br>在 npm 2 中，当我们下载 <a href="https://ant.design/index-cn" target="_blank" rel="noopener">ant-design@4.x</a><a href="/3.x"> </a> 时，peerDependencies 中指定的依赖会随着 <a href="https://ant.design/index-cn" target="_blank" rel="noopener">ant-design@4.x</a> 一起被强制安装，所以我们不需要在宿主项目的 package.json 文件中指定 peerDependencies 中的依赖，但是在 npm 3 以后，不会再强制安装 peerDependencies 中所指定的包，而是通过警告的方式来提示我们，此时就需要手动在 package.json 文件中手动添加依赖。<img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FtJGli5eh8Ec5L4Y71ZKCyXD4CB4.png"></p></blockquote><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>通常是在插件开发的场景下，你的插件需要某些依赖的支持，但是你又没必要去安装，因为插件的宿主会去安装这些依赖，你就可以用 peerDependencies 去声明一下需要依赖的插件和版本，如果出问题 npm 就会有警告来提醒使用者去解决版本冲突问题。</p><h3 id="bundledDependencies"><a href="#bundledDependencies" class="headerlink" title="bundledDependencies"></a>bundledDependencies</h3><p>捆绑依赖。这个依赖项与其他几种依赖项不同，他不是一个键值对的对象，而是一个数组，数组里是包名的字符串，例如：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"project"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"bundleDependencies"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"axios"</span><span class="token punctuation">,</span> <span class="token string">"lodash"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>当使用 npm install 时,这两个依赖和所需要的依赖都会安装. 当使用 npm pack 的方式来打包时，上述的例子会生成一个 project-1.0.0.tgz 的文件，在使用了 bundledDependencies 后，打包时会把 Axios 和 Lodash 这两个依赖一起放入包中，之后有人使用 <code>npm install project-1.0.0.tgz</code> 下载包时，Axios 和 Lodash 这两个依赖也会被安装。</p><p>需要注意的是安装之后 Axios 和 Lodash 这两个包的信息在 dependencies 中，并且不包括版本信息。</p><pre class=" language-json"><code class="language-json"><span class="token property">"bundleDependencies"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"axios"</span><span class="token punctuation">,</span>    <span class="token string">"lodash"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"axios"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>  <span class="token property">"lodash"</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h4 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h4><p>依赖包通常是从 npm 仓库中安装的。而 bundledDependencies 这是用在以下几个场景:</p><ul><li>复用不是来自 npm 仓库或已修改的第三方库</li><li>将自己的项目作为模块复用</li><li>与模块一起发布一些文件</li></ul><p>这样就不必创建和维护自己的 npm 插件，但可以获得与 npm 包相同的结果。</p><h4 id="不适用场景"><a href="#不适用场景" class="headerlink" title="不适用场景"></a>不适用场景</h4><p>如果是处理软件版本锁定问题, package-lock.json 是更好的选择.</p><h1 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h1><h2 id="问题出现"><a href="#问题出现" class="headerlink" title="问题出现"></a>问题出现</h2><p>最近有个项目在初始化的过程中，加入了公司统一的 Eslint 管理，需要用到两个依赖包。</p><pre class=" language-json"><code class="language-json"><span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"@yunke/eslint-config-react-ts"</span><span class="token operator">:</span> <span class="token string">"^1.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"@yunke/yunke-setting-plugin"</span><span class="token operator">:</span> <span class="token string">"^1.1.0"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span></code></pre><p>但是在 windows 电脑上，会报<code>import/order</code>的 Eslint 顺序错误，在 mac 电脑上则没有出现这种情况。在研究依赖包的时候发现，<code>eslint-plugin-import</code>的版本出了点问题，<code>@yunke/eslint-config-react-ts</code>的配置中，需要的版本是<code>&gt;=2.22.1</code>，而实际在项目中被安装的版本确是<code>2.20.1</code>，而导致版本安装不对的原因则是因为项目中使用的<code>react-scripts</code>插件指定需要 2.20.1 的版本，但是疑惑点来了，为什么两个插件需要的插件版本不一样却只安装一个呢。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FjJR8rxYO7ZQRtx_seEzGDzhqD_C.png"><br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FjF-sSjh9dvabFPWjnO7QPEvH3SI.png"></p><h2 id="探究"><a href="#探究" class="headerlink" title="探究"></a>探究</h2><p>随后仔细研究了<code>@yunke/eslint-config-react-ts</code>和<code>react-scripts</code>的<code>package.json</code>，发现一个重要的问题，也是上面提到过的，<code>@yunke/eslint-config-react-ts</code>所依赖的<code>eslint-plugin-import</code>插件是放在 peerDependencies 中定义的，而在 npm3 以上的版本中，不会自动下载这里面的依赖，而是会以 warning 的方式提示出来，需要宿主插件手动在<code>package.json</code>中定义并安装，而<code>react-scripts</code>所依赖的<code>eslint-plugin-import</code>插件是放在 dependencies 中的，所以会被下载下来，不需要定义。</p><h3 id="yunke-eslint-config-react-ts-的依赖"><a href="#yunke-eslint-config-react-ts-的依赖" class="headerlink" title="@yunke/eslint-config-react-ts 的依赖"></a>@yunke/eslint-config-react-ts 的依赖</h3><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FtlEPncJ3tAO00_vP9VfGTVAjdg1.png"></p><h3 id="react-scripts-的依赖"><a href="#react-scripts-的依赖" class="headerlink" title="react-scripts 的依赖"></a>react-scripts 的依赖</h3><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FiROfU6ox--W3IX0HgXHo4GQtDY4.png"></p><p>值得注意的是，npm 在分析依赖的时候，会把依赖拍平，但是像这同一依赖的不同版本的处理会像上面分析的一样，react-scripts 会讲自己所依赖的版本放在自己的 node_modules 中，而@yunke/eslint-config-react-ts 说要求的在宿主上安装这个依赖后，则会直接放到宿主的 node_modules 中去。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FvZO2pj5R9JpsDppNn2DYZf1FUJL.png"><br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fm7ernHzfWVFRckdzn5Tjt3WBKL9.png"></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>在宿主插件，也就是项目中的<code>package.json</code>中重新引入<code>eslint-plugin-import</code>插件并定义版本号为<code>&gt;=2.22.1</code>即可，重新<code>yarn install</code>后就会安装符合<code>@yunke/eslint-config-react-ts</code>所需要的版本，至此错误消失。</p><h2 id="新的疑问"><a href="#新的疑问" class="headerlink" title="新的疑问"></a>新的疑问</h2><p>其实在<code>yarn install</code>时，不单单是提示<code>eslint-plugin-import</code>的版本不对，还有一些其他的插件的版本也不符合要求，例如 typescript 的版本过低等问题。这里就引申出一个问题，到底哪些依赖需要放到 peerDependencies 中，哪些依赖需要放到 dependencies 中，这也是一个值得思考的问题。</p><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FtJGli5eh8Ec5L4Y71ZKCyXD4CB4.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> 依赖分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大文件pdf预览解决方案</title>
      <link href="/owidng/"/>
      <url>/owidng/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近在项目中遇到一个很有意思的图册业务需求：</p><ul><li>用户在后台上传 pdf 图册文件，前台可以进行 pdf 浏览，浏览方式为左右翻页模式（默认 pdf 是从上到下的），还有其他玩法，本质是花样看图（翻页电子书）。</li><li>后续又产生了付费需求：可以预览前 5 页，后面图册浏览需要付费查阅。</li></ul><h1 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h1><p>基于上述业务，我们简单进行需求拆解：</p><ul><li>pdf 文件大小，需要考虑文件的上传速度和页面预览速度</li><li>浏览方式，要求灵活性，所以要做成图片化浏览</li></ul><h2 id="方案-1"><a href="#方案-1" class="headerlink" title="方案 1"></a>方案 1</h2><ul><li>文件存储采用阿里云 oss 存储，前端服务直接跟 oss 存储交互，实现前端上传与下载，效率最大化（没有中间商赚差价）</li><li>技术上选择 pdf.js + canvas；上传时，前端解析 pdf 文件后，按页读流，利用 canvas 转化为图片后上传；浏览时，直接对每页的图片进行读取并呈现；</li></ul><p>然而在实践过程中出现了预料之中的问题：由于后台上传的 pdf 大多都是几十甚至几百页的 pdf，从 oss 拿到 pdf 链接后，前端 canvas 进行渲染展示的速度相当感人，无法达到产品经理的要求。<br>问题分析:</p><ul><li>前端工作量大，时间不足。</li><li>更深入思考技术细节：切图后的清晰度问题、图片压缩问题、图片命名规则问题、网络某个图片上传失败问题、大文件 OOM 问题等。</li></ul><h2 id="方案-2"><a href="#方案-2" class="headerlink" title="方案 2"></a>方案 2</h2><p>基于以上问题，我们对方案进行改进：</p><ul><li>前端直接将 pdf 进行分片上传至 oss，保留了原 pdf，后续即便出现未知 pdf 故障也可以脚本处理（如图片清晰度问题）</li><li>后端新增 pdf 处理服务，从 oss 获取 pdf 后处理切图后，再将图片上传 oss</li><li>前端根据约定规则获取图片信息并呈现</li></ul><p>这样做的好处就是：</p><ul><li>前端专注于呈现，屏蔽了一些不必要的数据处理细节</li></ul><p>当然也有个缺点：</p><ul><li>用户上传 pdf 后立即进行预览，文件太大的情况下，后端还在处理中，前端可能获取不到图片</li></ul><p>当然了，最后考虑到使用场景，图册 pdf 制作需要时间，更新频率不会太高；我们保证其最终可见性，目前是足以支撑业务的。<br>不过在实践过程中，还是出现了一个小问题：<br>前端在预览 pdf 时，需要知道 pdf 的总页数，本来是由后端在解析 pdf 的时候顺便拿到 pdf 的页数后更新到数据库中，但是由于 oom 问题，需要前端在上传的时候拿到总页数后提交给后端。</p><h1 id="前端方案"><a href="#前端方案" class="headerlink" title="前端方案"></a>前端方案</h1><p>所以就还是需要前端借助 pdfjs 这个插件来解决问题：<br>先安装依赖：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i pdfjs-dist -S</code></pre><p>在上传 pdf 的时候进行解析，拿到 pdf 的总页数：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> PDFJS <span class="token keyword">from</span> <span class="token string">'pdfjs-dist'</span><span class="token keyword">import</span> pdfjsWorker <span class="token keyword">from</span> <span class="token string">'pdfjs-dist/build/pdf.worker.entry'</span><span class="token comment" spellcheck="true">// 这里一定要设置！</span>PDFJS<span class="token punctuation">.</span>GlobalWorkerOptions<span class="token punctuation">.</span>workerSrc <span class="token operator">=</span> pdfjsWorker<span class="token comment" spellcheck="true">// 常用于上传的接口</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">upload</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// OSS上传逻辑</span>  <span class="token operator">...</span>  <span class="token operator">...</span>  <span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">file2Array</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>file<span class="token punctuation">)</span>  <span class="token keyword">const</span> pdfDocument <span class="token operator">=</span> <span class="token keyword">await</span> PDFJS<span class="token punctuation">.</span><span class="token function">getDocument</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 这样就可以拿到pdf的总页数了</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>filePageSize <span class="token operator">=</span> pdfDocument<span class="token punctuation">.</span>numPages  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>filePageSize<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 这里要借助一个工具类将file文件转为Uint8Array</span><span class="token keyword">function</span> <span class="token function">file2Array</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  reader<span class="token punctuation">.</span><span class="token function">readAsArrayBuffer</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    reader<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ArrayBuffer转Uint8Array</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    reader<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h1 id="后端方案"><a href="#后端方案" class="headerlink" title="后端方案"></a>后端方案</h1><h2 id="技术选型-1"><a href="#技术选型-1" class="headerlink" title="技术选型"></a>技术选型</h2><p>java 实现 pdf 处理的技术现有技术大概有几种：pdfbox、PDFRenderer、jpedal、itext、ICEPDF。</p><ul><li>pdfbox：是 appach 出品，开源、免费、今年还在更新。</li><li>PDFRenderer：sum 出品，只有一个 2012 年版本<a href="https://mvnrepository.com/artifact/com.sun.pdfview/pdfrenderer/0.9.1-patched" target="_blank" rel="noopener">0.9.1-patched</a>，不大行的样子</li><li>jpedal：收费</li><li>itext：<a href="https://github.com/itext/itext7/blob/develop/LICENSE.md" target="_blank" rel="noopener">AGPL</a> / <a href="https://itextpdf.com/sales" target="_blank" rel="noopener">商业软件的</a>双重许可。AGPL 是免费/开源软件许可证。这并不意味着该软件是<a href="https://en.wikipedia.org/wiki/Gratis_versus_libre" target="_blank" rel="noopener">免费的</a>！</li><li>ICEPDF：切图后质量不大行，有水印的 pdf，切图后水印会特别清晰。</li></ul><p>基于以上调研，最终选择了 pdfbox。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="java-awt-AWTError-Assistive-Technology-not-found-org-GNOME-Accessibility-AtkWrapper"><a href="#java-awt-AWTError-Assistive-Technology-not-found-org-GNOME-Accessibility-AtkWrapper" class="headerlink" title="java.awt.AWTError: Assistive Technology not found: org.GNOME.Accessibility.AtkWrapper"></a>java.awt.AWTError: Assistive Technology not found: org.GNOME.Accessibility.AtkWrapper</h3><h4 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h4><p>本地正常，无此问题，pass 部署后第一次调用 pdf 处理时报 error 错误。</p><h4 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h4><ul><li>根据报错信息初步判断，这应该是某个类不存在。（大意是说该辅助技术不存在）</li><li>追溯内部代码，pdf 处理后生成图片使用 java.awt.toolkit 工具包。</li><li>其初始化采用单例模式，如果有配置 Assistive Technology（辅助技术），则会实例化该辅助技术。</li></ul><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><ul><li>toolkit 类内部会基于 spi 机制加载辅助技术 assistive_technologies，该辅助技术非必须。</li><li>该配置文件在 jdk/accessibility.properties 中。</li><li>本地是 jdk 为 jdk1.8.0_221，无配置 assistive_technologies，无加载问题</li><li>代码构建平台上基础镜像 jdk 为： java-8-openjdk，其内部配置 assistive_technologies，却无引入具体类，导致第一次初始化时异常。</li><li>所以，<strong>这是一起由 jdk 版本不同/环境不同、引发的问题</strong>。</li></ul><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><ul><li>第一种：修改 jdk/accessibility.properties 配置： 注释 assistive_technologies</li><li>第二种：因为内部初始化为单例模式，初始化后 toolkit 对象存在则不在初始化，预先初始化。</li></ul><h3 id="java-lang-OutOfMemoryError-Java-heap-space"><a href="#java-lang-OutOfMemoryError-Java-heap-space" class="headerlink" title="java.lang.OutOfMemoryError: Java heap space"></a>java.lang.OutOfMemoryError: Java heap space</h3><h4 id="现象-1"><a href="#现象-1" class="headerlink" title="现象"></a>现象</h4><p>上传一个 188M pdf 文件时，在某几页的处理会出现 OOM 堆内存溢出</p><blockquote><p>造成 OutOfMemoryError 原因一般有 2 种：</p><ul><li>内存泄露，对象已经死了，无法通过垃圾收集器进行自动回收，通过找出泄露的代码位置和原因，才好确定解决方案；</li><li>内存溢出，内存中的对象都还必须存活着，这说明 Java 堆分配空间不足，检查堆设置大小（-Xmx 与-Xms），检查代码是否存在对象生命周期太长、持有状态时间过长的情况。</li></ul></blockquote><h4 id="排查-1"><a href="#排查-1" class="headerlink" title="排查"></a>排查</h4><ul><li>启动加入参数：-XX:+HeapDumpOnOutOfMemoryError， 进行对 OOM 日志 dump</li><li>OOM 后进行日志分析，其占用空间为 2 部分：<ul><li>第一部分：原 pdf 所需内存。</li><li>第二部分：每一页的 pdf 转图片过程需要的内存。（主要内存占用在此部分）</li></ul></li><li>针对第一部分，官方倒是有一个配置：MemoryUsageSetting.<em>setupTempFileOnly</em>();<ul><li>即原 pdf 暂存在外存中，而非内存，减轻主内存暂用。</li></ul></li><li>针对第二部分<ul><li>取某一页的 pdf 流，进行解析；解析后的像素数据写入 BufferedImage 中，在调用原生 java.awt.image 画图生成。</li><li>内部涉及 pdf 的解析、渲染+渲染算法、是否允许下采样等等。</li></ul></li></ul><p>最终定位到，部分页后绘制成图所需的内存巨大，pdf 越是精致，越是巨大。这个跟图像的着色、轮廓、纹理、像素点、边缘锯齿、抖动等相关。这里水有点深，概念上就有分辨率、容量、清晰度、像素、矢量图、位图、栅格化、插值算法。<br>总之，一套流程下来，我们发现某些 pdf 的转化确实需要巨大的内存，典型的空间复杂度高。所以，这是个正常内存溢出，并非某些流或对象未及时关闭，本质上还是需要扩大虚拟机堆内存。<br>经测试，某 24M 的单页 pdf 图，转化成图片大约需要 800M 内存。（就是这么夸张！）</p><h4 id="优化总结"><a href="#优化总结" class="headerlink" title="优化总结"></a>优化总结</h4><ul><li><code>PDDocument.load(file, MemoryUsageSetting.setupTempFileOnly())</code>将 pdf 暂存在本地磁盘，即省出了内存空间；像 100M 的 pdf 就能省 100M 内存呢</li><li><code>PDFRenderer.renderImageWithDPI(i，72)；</code>降低 dpi，减少 dpi 比例，也可以一定程度上优化，但在呈现上跟原图比会有所缩放。</li><li><code>PDFRenderer``.setSubsamplingAllowed(``true``);</code>允许下采样，下采样可以在更快、更小的内存密集型情况下使用，但它也可能导致质量的损失，尤其是针对高空间频率的图像</li><li>通过-Xmx 增加最大堆内存，终极大法，扩大内存</li></ul><p>pdfbox 官方也有 oom 问题的处理建议，如下：</p><blockquote><p><strong>I’m getting an OutOfMemoryError. What can I do?</strong><br>The memory footprint depends on the PDF itself and on the resolution you use for rendering. Some possible options:</p><ul><li>increase the <code>-Xmx</code> value when starting java</li><li>use a scratch file by loading files with this code <code>PDDocument.load(file, MemoryUsageSetting.setupTempFileOnly())</code></li><li>be careful not to hold your images after rendering them, e.g. avoid putting all images of a PDF into a <code>List</code></li><li>don’t forgot to close your <code>PDDocument</code> objects</li><li>decrease the scale when calling <code>PDFRenderer.renderImage()</code>, or the dpi value when calling <code>PDFRenderer.renderImageWithDPI()</code></li><li>disable the cache for <code>PDImageXObject</code> objects by calling <code>PDDocument.setResourceCache()</code> with a cache object that is derived from <code>DefaultResourceCache</code> and whose call <code>public void put(COSObject indirect, PDXObject xobject)</code> does nothing. Be aware that this will slow down rendering for PDF files that have an identical image in several pages (e.g. a company logo or a background). More about this can be read in <a href="https://issues.apache.org/jira/browse/PDFBOX-3700" target="_blank" rel="noopener">PDFBOX-3700</a>.</li></ul></blockquote><h1 id="文件加密设计"><a href="#文件加密设计" class="headerlink" title="文件加密设计"></a>文件加密设计</h1><p>一个 pdf，可能含 200+的页码，切成图片后分开存放，即产生 200+记录。如果存储在库里，有点浪费空间，同时还是能通过接口规则获取数据。如果单纯的通过统一路径后加 1、2、3、4，也是很容易的推导后续的数据。所以需要制定内部加密规则。</p><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><p>明文  + 规则（密钥）  -&gt; 密文  （典型的对称加密的加密段)<br><strong>明文</strong>为 uuid：如数据库存放格式：/fileUrl/<strong>68428de9168548f3a9da61a6ee5faaf3</strong>  ,   黑体部分即明文<br><strong>规则</strong>： 即密钥：rule = “zxcvbnmlkjhgfdsa”<br><strong>密文</strong>： 为具体的 oss 文件名：<code>/fileUrl/``**6**``**g**``**8428de9168548f3a9da61a6ee5faaf**``**1**</code> ，这是第一页/张，<code>/fileUrl/`**68**`**z**`**428de9168548f3a9da61a6ee5faaf**</code>**2**`  ,   这是第二页/张</p><h2 id="加密规则"><a href="#加密规则" class="headerlink" title="加密规则"></a>加密规则</h2><h3 id="java-版"><a href="#java-版" class="headerlink" title="java 版"></a>java 版</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * pdfHelper * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PdfHelper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * uuid规则构造器     * 原理：去除最后一位字符，再取剩下最后一位字符为起始值，经过规则转换后，插入第i个位置；     * 规则：ruleMark     * 如ABCD,1 -> C ABC 1     * 如ABCD,2 -> D ABC 2     *     * @param sourceUuid 源id     * @param pageNum    页码 第n页     * @return 规则后的uuid     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">uuidBuilder</span><span class="token punctuation">(</span>String sourceUuid<span class="token punctuation">,</span> <span class="token keyword">int</span> pageNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String splitUuid <span class="token operator">=</span> sourceUuid<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> sourceUuid<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String publicMark <span class="token operator">=</span> splitUuid<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>splitUuid<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String ruleMark <span class="token operator">=</span> <span class="token function">ruleMark</span><span class="token punctuation">(</span>publicMark<span class="token punctuation">,</span> pageNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> pageNum<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">></span> splitUuid<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            index <span class="token operator">=</span> index <span class="token operator">-</span> splitUuid<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> splitUuid<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">+</span> ruleMark <span class="token operator">+</span> splitUuid<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> pageNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">ruleMark</span><span class="token punctuation">(</span>String mark<span class="token punctuation">,</span> <span class="token keyword">int</span> pageNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String rule <span class="token operator">=</span> <span class="token string">"qwertyuiopasdfghjklzxcvbnm1234567890"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>mark<span class="token punctuation">)</span> <span class="token operator">+</span> pageNum<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">></span> rule<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            index <span class="token operator">=</span> index <span class="token operator">-</span> rule<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="javascript-版"><a href="#javascript-版" class="headerlink" title="javascript 版"></a>javascript 版</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * uuid规则构造器 * 原理：去除最后一位字符，再取剩下最后一位字符为起始值，经过规则转换后，插入第i个位置； * 规则：ruleMark * 如ABCD,1 -> C ABC 1 * 如ABCD,2 -> D ABC 2 * * @param sourceUuid 源id * @param pageNum 页码 第n页 * @return string 规则后的uuid */</span><span class="token keyword">function</span> <span class="token function">uuidBuilder</span><span class="token punctuation">(</span>sourceUuid<span class="token punctuation">,</span> pageNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> ruleMark <span class="token operator">=</span> <span class="token punctuation">(</span>mark<span class="token punctuation">,</span> pageNum<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> rule <span class="token operator">=</span> <span class="token string">"qwertyuiopasdfghjklzxcvbnm1234567890"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>mark<span class="token punctuation">)</span> <span class="token operator">+</span> pageNum<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">></span> rule<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      index <span class="token operator">=</span> index <span class="token operator">-</span> rule<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> c <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> splitUuid <span class="token operator">=</span> sourceUuid<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> sourceUuid<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> publicMark <span class="token operator">=</span> splitUuid<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>splitUuid<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> ruleMarkV <span class="token operator">=</span> <span class="token function">ruleMark</span><span class="token punctuation">(</span>publicMark<span class="token punctuation">,</span> pageNum<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> index <span class="token operator">=</span> pageNum<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">></span> splitUuid<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    index <span class="token operator">=</span> index <span class="token operator">-</span> splitUuid<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    splitUuid<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">+</span>    ruleMarkV <span class="token operator">+</span>    splitUuid<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span>    pageNum  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> uuidBuilder<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Vue </tag>
            
            <tag> pdf预览 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack配置-多进程/多实例解析资源</title>
      <link href="/kolyq9/"/>
      <url>/kolyq9/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>年末了，趁着项目排期相对空闲，抽空阅读<a href="https://github.com/gwuhaolin" target="_blank" rel="noopener">吴浩麟</a>老师的<a href="https://webpack.wuhaolin.cn/" target="_blank" rel="noopener">《深入浅出 Webpack》</a>这本书，准备搞一搞 webpack 中的点点滴滴，出一个 webpack 优化专题。刚好最近在想着做一个适合团队内部的前端中后台脚手架，来学习学习嘿嘿。</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="在-webpack4-0-中使用-hard-source-webpack-plugin"><a href="#在-webpack4-0-中使用-hard-source-webpack-plugin" class="headerlink" title="在 webpack4.0 中使用 hard-source-webpack-plugin"></a>在 webpack4.0 中使用 hard-source-webpack-plugin</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hard-source-webpack-plugin -D</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// webpack.config.js</span><span class="token keyword">const</span> HardSourceWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'hard-source-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// ...</span>  output<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// ...</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HardSourceWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>具体配置可以参考官方文档<a href="https://github.com/mzgoddard/hard-source-webpack-plugin" target="_blank" rel="noopener">hard-source-webpack-plugin</a></p><h2 id="在-webpack5-0-中使用-cache-选项"><a href="#在-webpack5-0-中使用-cache-选项" class="headerlink" title="在 webpack5.0 中使用 cache 选项"></a>在 webpack5.0 中使用 cache 选项</h2><p>在 webpack5.0 中，此插件的实现已内置到 cache 选项中，所以不能在 5.0 版本中使用，会报错！！<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FoiMFr2CMDshCw_MGF4WeqIKUYQA.png"><br>因为在 webpack5.0，这个依赖被删除了！<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FmDnTPy5j_FwsIp5D0jp-34_JaJm.png"><br>我在<a href="https://github.com/mzgoddard/hard-source-webpack-plugin/issues/514" target="_blank" rel="noopener">issue</a>中找到了可以使用 cache 选项来配置。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FpZWmwu0ixR5JgawCmB6DeAn_3f-.png"><br>使用说明：<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FvUqfwsno_MaITg4zneUPJyBrysU.png"><br>具体配置文档请参考<a href="https://webpack.js.org/configuration/other-options/#cache" target="_blank" rel="noopener">webpack5.0#cache</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
            <tag> 静态资源优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Vue中维护路由跳转记录</title>
      <link href="/hemk59/"/>
      <url>/hemk59/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在 vue 中我们可以用<code>this.$router.go(-1)</code>返回上一个路由，但无法拿到上个路由的路由地址，这样就出现一个问题就是如果我上个路由是中转页面，作用就是跳到下个页面，这个时候的<code>this.$router.go(-1)</code>就不起作用，进入了死循环。<br>所以网上找了下一个比较好的办法就是利用路由守卫，维护自己的路由跳转记录。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li>实现一个<code>Vue</code>工具<code>history.js</code>，通过堆栈的方式维护页面跳转的历史记录，控制返回跳转。</li><li>扩展一个获取上个路由的方法。</li><li>在全局路由<code>router.js</code>中，实例化路由前，通过原型扩展<code>router</code>的<code>goBack()</code>方法</li><li>在<code>router</code>路由守卫<code>afterEach</code>的生命周期中存放历史记录。</li></ol><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// src/utils/history.js</span><span class="token keyword">const</span> History <span class="token operator">=</span> <span class="token punctuation">{</span>  _history<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 历史记录堆栈</span>  <span class="token function">install</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 提供Vue插件所需安装方法</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">"$routerHistory"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> History<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 入栈</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_history<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">canBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_history<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">lastHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_history<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span>      <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_history<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_history<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span>      <span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> History<span class="token punctuation">;</span></code></pre><p>在路由实例化之前，扩展<code>back()</code>方法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// src/router/index.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> History <span class="token keyword">from</span> <span class="token string">"./utils/history"</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>History<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实例化之前，扩展Router</span>Router<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>goBack <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>isBack <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>在路由全局<code>afterEach</code>中记录跳转历史</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// src/router/index.js</span><span class="token keyword">import</span> History <span class="token keyword">from</span> <span class="token string">"./utils/history"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// afterEach记录历史记录</span>router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>router<span class="token punctuation">.</span>isBack<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 后退</span>    History<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    router<span class="token punctuation">.</span>isBack <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    router<span class="token punctuation">.</span>transitionName <span class="token operator">=</span> <span class="token string">"route-back"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    History<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    router<span class="token punctuation">.</span>transitionName <span class="token operator">=</span> <span class="token string">"route-forward"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在页面中使用</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$routerHistory<span class="token punctuation">.</span><span class="token function">lastHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"/router"</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">goback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tinymce-Vue初体验</title>
      <link href="/sbgn9r/"/>
      <url>/sbgn9r/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>最近有需求需要用到富文本编辑器，而且需要将上传/粘贴的图片上传到阿里云 OSS 上。在简单体验了几个富文本编辑器之后，决定选用 Tinymce。<br>Tinymce-Vue 里面的坑还是挺多的，花了两天时间终于把一些简单的坑填上了，基本上算是满足了需求。这里来简单讲一下在项目中使用 <code>Tinymce-Vue</code> 的经过。</p><h1 id="Tinymce-Vue-插件安装"><a href="#Tinymce-Vue-插件安装" class="headerlink" title="Tinymce-Vue 插件安装"></a>Tinymce-Vue 插件安装</h1><pre class=" language-shell"><code class="language-shell">npm install @tinymce/tinymce-vue -Dnpm install tinymce -D</code></pre><p>安装成功之后，在<code>node_modules</code>目录中，找到<code>tinymce</code>中的<code>skins</code>目录，将其拷贝到<code>static</code>或者<code>public</code>目录下。为了结构清晰，我外层包了<code>tinymce</code>目录。</p><blockquote><p>踩坑 ①：用不同版本的<code>vue-cli</code>创建出来的项目，默认静态公共资源的目录是不一样的。<code>vue-cli2</code>的默认静态公共资源目录为<code>static</code>，但是<code>vue-cli3</code>默认为<code>public</code>。拷贝的时候根据自己项目的配置注意下</p></blockquote><p>由于<code>tinymce</code>默认是英文界面，如果需要下载<a href="https://www.tiny.cloud/get-tiny/language-packages/" target="_blank" rel="noopener">中文的语言包</a>，可以去官网下载。下载之后将其放在<code>public/tinymce/</code>下。同样的，为了结构清晰，我将其放在了<code>langs</code>目录下。</p><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FpED8KkqnzMbNRqZOs9ZVhyaxrnB.png"></p><h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><p>在组件中初始化<code>Tinymce.vue</code>组件，并引入需要用到的依赖。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 引入基本文件</span><span class="token keyword">import</span> tinymce <span class="token keyword">from</span> <span class="token string">"tinymce/tinymce"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Editor <span class="token keyword">from</span> <span class="token string">"@tinymce/tinymce-vue"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 引入主题文件</span><span class="token keyword">import</span> <span class="token string">"tinymce/themes/silver"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 引入你需要的插件</span><span class="token keyword">import</span> <span class="token string">"tinymce/plugins/paste"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//粘贴插件，很强大，配置后可以粘贴图片</span><span class="token keyword">import</span> <span class="token string">"tinymce/plugins/image"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//上传图片的插件</span><span class="token keyword">import</span> <span class="token string">"tinymce/plugins/table"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//表格</span><span class="token keyword">import</span> <span class="token string">"tinymce/plugins/wordcount"</span><span class="token punctuation">;</span></code></pre><p>由于<code>Editor-vue</code>也是官方封装的组件，所以需要注册组件使用。</p><pre class=" language-javascript"><code class="language-javascript">components<span class="token punctuation">:</span> <span class="token punctuation">{</span>  Editor<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用组件，代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tinymce-editor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>editor</span>      <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tinymceFlag<span class="token punctuation">"</span></span>      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>editor<span class="token punctuation">"</span></span>      <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myValue<span class="token punctuation">"</span></span>      <span class="token attr-name">:init</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tinymceInit<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>editor</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleSubmit<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>{{ label }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a-button</span>    <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// 引入基本文件</span>  <span class="token comment" spellcheck="true">// eslint-disable-next-line no-unused-vars</span>  <span class="token keyword">import</span> tinymce <span class="token keyword">from</span> <span class="token string">"tinymce/tinymce"</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> Editor <span class="token keyword">from</span> <span class="token string">"@tinymce/tinymce-vue"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 引入主题样式</span>  <span class="token keyword">import</span> <span class="token string">"tinymce/themes/silver"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 引入你需要的插件</span>  <span class="token keyword">import</span> <span class="token string">"tinymce/plugins/paste"</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token string">"tinymce/plugins/image"</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token string">"tinymce/plugins/table"</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> OSS <span class="token keyword">from</span> <span class="token string">"@/utils/oss.js"</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> v1 <span class="token keyword">from</span> <span class="token string">"uuid"</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"Tinymce"</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        tinymceFlag<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        myValue<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        isShowFileDlg<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        tinymceInit<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    props<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 基本路径，默认为空根目录，如果你的项目发布后的地址为目录形式，</span>      <span class="token comment" spellcheck="true">// 即abc.com/tinymce，baseUrl需要配置成tinymce，不然发布后资源会找不到</span>      <span class="token comment" spellcheck="true">// 我也不知道为啥要设置baseUrl，我目前没有遇到这个问题。等遇到再说</span>      baseUrl<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 定义允许上传的图片类型</span>      accept<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">"image/jpeg, image/png"</span><span class="token punctuation">,</span>        type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 最大上传图片大小</span>      maxSize<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token number">5242880</span><span class="token punctuation">,</span>        type<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 偶尔会需要禁用富文本</span>      disabled<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> Boolean<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 设置默认需要的拓展</span>      plugins<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Array<span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">"image table wordcount"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 可以按照自己需要配置默认需要的组件</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 设置默认菜单栏 ‘|’ 用来分隔功能</span>      toolbar<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Array<span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>          <span class="token string">"undo redo | formatselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | image table"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 自己项目需要做一个类似提交表单的按钮</span>      label<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">"提交"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 设置默认宽度</span>      width<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">"1200"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 设置默认高度</span>      height<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      Editor<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 定义self防止this调用时指向性问题</span>      <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      self<span class="token punctuation">.</span>tinymceInit <span class="token operator">=</span> <span class="token punctuation">{</span>        fontsize_formats<span class="token punctuation">:</span>          <span class="token string">"11px 12px 14px 16px 18px 24px 36px 48px 50px 56px 60px 64px"</span><span class="token punctuation">,</span>        language_url<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`/tinymce/langs/zh_CN.js`</span></span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设置中文语言的路径，我的是/public下的tinymce</span>        skin_url<span class="token punctuation">:</span> <span class="token string">"/tinymce/skins/ui/oxide"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// skin路径</span>        language<span class="token punctuation">:</span> <span class="token string">"zh_CN"</span><span class="token punctuation">,</span>        width<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span>        browser_spellcheck<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 拼写检查</span>        branding<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 去水印</span>        statusbar<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 隐藏编辑器底部的状态栏</span>        paste_data_images<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 允许粘贴图像</span>        menubar<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 隐藏最上方menu</span>        plugins<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>plugins<span class="token punctuation">,</span>        toolbar<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>toolbar<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 设置图片上传时的上传函数，支持图片复制粘贴前上传到指定服务器然后返回url到富文本</span>        images_upload_handler<span class="token punctuation">:</span> <span class="token punctuation">(</span>blobInfo<span class="token punctuation">,</span> success<span class="token punctuation">,</span> failure<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>blobInfo<span class="token punctuation">.</span><span class="token function">blob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>size <span class="token operator">></span> self<span class="token punctuation">.</span>maxSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">failure</span><span class="token punctuation">(</span><span class="token string">"文件体积不能超过"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Mb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>accept<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>blobInfo<span class="token punctuation">.</span><span class="token function">blob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">uploadPic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">failure</span><span class="token punctuation">(</span><span class="token string">"图片格式错误, 仅支持"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>accept <span class="token operator">+</span> <span class="token string">"格式的图片"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 异步上传到OSS</span>          <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">uploadPic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//值得注意的是，测试时，微信截图后直接在富文本进行粘贴后会出现OSS文件类型报错，需要传入Buffer流或者Blob文件，可blobInfo.blob()按道理应该是blob才对，可还是报错，无奈做了一个blobInfo.blob()的带的File文件对象 ==》 ArrayBuffer流 ==》 Buffer流 才使得OSS能够识别。</span>              <span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              reader<span class="token punctuation">.</span><span class="token function">readAsArrayBuffer</span><span class="token punctuation">(</span>blobInfo<span class="token punctuation">.</span><span class="token function">blob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// File文件对象 ==》 ArrayBuffer流</span>              reader<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 引入UUID防止文件覆盖</span>                <span class="token keyword">const</span> fileName <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">v1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>blobInfo<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>                self<span class="token punctuation">.</span>client                  <span class="token comment" spellcheck="true">// ArrayBuffer流 ==》 Buffer流 ==》 OSS.put()</span>                  <span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token function">toBuffer</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 得到OSS返回的url</span>                    result<span class="token punctuation">.</span>url <span class="token operator">=</span> result<span class="token punctuation">.</span>res<span class="token punctuation">.</span>requestUrls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 将上传完成的状态抛出</span>                    self<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"on-upload-complete"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 抛出 'on-upload-complete' 钩子</span>                    <span class="token comment" spellcheck="true">// 返回url</span>                    <span class="token function">success</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 失败</span>                    <span class="token function">failure</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 封装的OSS的错误提示（ak失效时触发）</span>              <span class="token keyword">await</span> self<span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"上传配置已失效，重新加载中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>              <span class="token function">failure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// ArrayBuffer流 ==》 Buffer流</span>            <span class="token keyword">function</span> <span class="token function">toBuffer</span><span class="token punctuation">(</span>ab<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span>ab<span class="token punctuation">.</span>byteLength<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">const</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>ab<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buf<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> view<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">return</span> buf<span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">myValue</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">activated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 当使用keep-alive时，在切换标签页再切回来会出现富文本key缺少无法使用的情况，在这个里做一个处理，让每次的key不一样</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>tinymceFlag<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 自己的业务需求需要一个提交按钮，将值传回父组件</span>      <span class="token function">handleSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"submit"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myValue<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 封装的OSS的初始化方法</span>      client<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> OSS<span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.tinymce-editor</span> </span><span class="token punctuation">{</span>    <span class="token selector">margin-left: 30px;    <span class="token class">.button</span> </span><span class="token punctuation">{</span>      <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>      <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><blockquote><p>坑 ②：当使用<code>keep-alive</code>时，富文本会出现<code>key</code>重复的问题<br>坑 ③：微信截图完直接粘贴图片后<code>blobInfo.blob()</code>生成一个不能被<code>OSS</code>识别的<code>File</code>对象，需要<code>File</code>文件对象 ==》 <code>ArrayBuffer</code>流 ==》 <code>Buffer</code>流 才能被<code>OSS</code>识别</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 富文本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发规范之Eslint</title>
      <link href="/ar658s/"/>
      <url>/ar658s/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>前端代码规范已经折麽我无数次了，每次接别人的项目，一打开项目一片红，更要命的是用<code>eslint --fix</code> 也无济于事，不是和 Prettier 冲突，就是和 Editorconfig 冲突，格式化出来的代码依然报错。偏偏项目还使用了<code>lint-staged</code>，导致经常代码经常因为代码格式问题提交不上去！</p><p>我自己一直以来都习惯用 WebStorm 来开发，其他大部分人都用的 VSCode ，因为开发工具的配置差异，导致别人的 VSCode 代码检查不报错，而到了我的手上就一片红。</p><p>来来回回折腾了几个项目后，我决定统一团队的开发规范，并适配因为开发工具而导致代码检查差异！</p><p>在踩坑了几个日夜后，终于搞出了一套代码规范，不仅能适配各个开发工具，也能在此基础上规范团队的代码规范。</p><h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><p>此次采用的方案是 Eslint + Prettier 的组合， Eslint 采用的是腾讯  AlloyTeam 创立的一套  ESLint   规则<a href="https://github.com/AlloyTeam/eslint-config-alloy" target="_blank" rel="noopener">eslint-config-alloy</a> ，自 2017 年 8 月发布第一个版本以来，不知不觉中已经收获到 <code>1.8k stars</code>，超过了 <a href="https://github.com/google/eslint-config-google" target="_blank" rel="noopener">eslint-config-google</a>，成为了世界上排名第三的  ESLint   规范。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="设计理念"><a href="#设计理念" class="headerlink" title="设计理念"></a>设计理念</h3><ul><li>样式相关的规则交给 <a href="https://prettier.io/" target="_blank" rel="noopener">Prettier</a> 管理</li><li>传承 ESLint 的理念，帮助大家建立自己的规则</li></ul><h3 id="样式相关的规则交给-Prettier-管理"><a href="#样式相关的规则交给-Prettier-管理" class="headerlink" title="样式相关的规则交给 Prettier 管理"></a>样式相关的规则交给 <a href="https://prettier.io/" target="_blank" rel="noopener">Prettier</a> 管理</h3><p>Prettier 是一个代码格式化工具，相比于 ESLint 中的代码格式规则，它提供了更少的选项，但是却更加专业。</p><p>如今 Prettier 已经成为前端项目中的必备工具，eslint-config-alloy 也没有必要再去维护 ESLint 中的代码格式相关的规则了，所以我们在 v3 版本中彻底去掉了所有 Prettier 相关的规则，用 ESLint 来检查它更擅长的逻辑错误。</p><p>至于缩进要两个空格还是四个空格，末尾要不要分号，可以在项目的 <code>.prettierrc.js</code> 中去配置，当然也提供了一份推荐的 Prettier 配置供大家参考。</p><h3 id="传承-ESLint-的理念，帮助大家建立自己的规则"><a href="#传承-ESLint-的理念，帮助大家建立自己的规则" class="headerlink" title="传承 ESLint 的理念，帮助大家建立自己的规则"></a>传承 <a href="https://eslint.org/docs/about/#philosophy" target="_blank" rel="noopener">ESLint 的理念</a>，帮助大家建立自己的规则</h3><p>大家还记得 ESLint 是怎么打败 JSHint 成为最受欢迎的 js 代码检查工具吗？就是因为 ESLint 推崇的插件化、配置化，满足了不同团队不同技术栈的个性的需求。</p><p>所以 eslint-config-alloy 也传承了 ESLint 的设计理念，不会强调必须要使用我们这套规则，而是通过文档、示例、测试、网站等方便大家参考 alloy 的规则，在此基础上做出自己的个性化。</p><p>由于 React/Vue/TypeScript 插件的文档没有中文化（或中文的版本很滞后），所以 alloy 的文档很大程度上帮助了国内开发者理解和配置个性化的规则。</p><p>实际上国内有很多团队或个人公开的 ESLint 配置，都参考了 alloy 的文档。</p><h3 id="为什么要重复造轮子"><a href="#为什么要重复造轮子" class="headerlink" title="为什么要重复造轮子"></a>为什么要重复造轮子</h3><p>其实我们团队最开始使用 airbnb 规则，但是由于它过于严格，部分规则还是需要个性化，导致后来越改越多，最后决定重新维护一套。经过两年多的打磨，现在 eslint-config-alloy 已经非常成熟与先进，也受到了公司内外很多团队的欢迎。</p><h3 id="为什么不用-standard"><a href="#为什么不用-standard" class="headerlink" title="为什么不用 standard"></a>为什么不用 standard</h3><p>standard 规范认为大家不应该浪费时间在个性化的规范了，而应该整个社区统一一份规范。这种说法有一定道理，但是它是与 ESLint 的设计理念背道而驰的。</p><h3 id="相比于-airbnb-规则有什么优势"><a href="#相比于-airbnb-规则有什么优势" class="headerlink" title="相比于 airbnb 规则有什么优势"></a>相比于 airbnb 规则有什么优势</h3><ul><li>eslint-config-alloy 拥有官方维护的 vue、typescript、react+typescript 规则，相比之下 airbnb 的 vue 和 typescript 都是第三方维护的</li><li>先进性，保证能够与时俱进，前面已经重点提到了</li><li>方便个性化定制，包含中文讲解和网站示例</li></ul><h3 id="你这个确实很好，我还是会选择-airbnb"><a href="#你这个确实很好，我还是会选择-airbnb" class="headerlink" title="你这个确实很好，我还是会选择 airbnb"></a>你这个确实很好，我还是会选择 airbnb</h3><p>没关系，eslint-config-alloy 从设计理念上就相信不同团队不同项目可以有不同的配置，虽然你选择使用 airbnb，但是当你有个性化配置需求的时候，还是可以来我们<a href="https://alloyteam.github.io/eslint-config-alloy/?language=zh-CN" target="_blank" rel="noopener">网站</a>上参考一下哦~</p><h2 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h2><h3 id="安装相关依赖"><a href="#安装相关依赖" class="headerlink" title="安装相关依赖"></a>安装相关依赖</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev eslint@7.17.0 babel-eslint@10.1.0 vue-eslint-parser@7.3.0 eslint-config-alloy@3 eslint-config-prettier@7.1.0 eslint-plugin-prettier@3.3.1 eslint-plugin-vue@7.4.1 vue-eslint-parser@7.3.0</code></pre><h3 id="依赖版本"><a href="#依赖版本" class="headerlink" title="依赖版本"></a>依赖版本</h3><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"eslint"</span><span class="token operator">:</span> <span class="token string">"7.17.0"</span><span class="token punctuation">,</span>  <span class="token property">"babel-eslint"</span><span class="token operator">:</span> <span class="token string">"10.1.0"</span><span class="token punctuation">,</span>  <span class="token property">"eslint-config-alloy"</span><span class="token operator">:</span> <span class="token string">"^3.10.0"</span><span class="token punctuation">,</span>  <span class="token property">"eslint-config-prettier"</span><span class="token operator">:</span> <span class="token string">"^7.1.0"</span><span class="token punctuation">,</span>  <span class="token property">"eslint-plugin-prettier"</span><span class="token operator">:</span> <span class="token string">"^3.3.1"</span><span class="token punctuation">,</span>  <span class="token property">"eslint-plugin-vue"</span><span class="token operator">:</span> <span class="token string">"7.4.1"</span><span class="token punctuation">,</span>  <span class="token property">"vue-eslint-parser"</span><span class="token operator">:</span> <span class="token string">"^7.3.0"</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意：可以看到我使用的依赖基本都是最新的版本，原因是之前版本比较低，出现了很多找不到相关规则的 error。最后网上找了好久才发现 npm 默认安装的版本相对较低，导致出现了兼容性问题，直到升级到了高版本后才解决。</p></blockquote><h3 id="eslintrc-js"><a href="#eslintrc-js" class="headerlink" title=".eslintrc.js"></a>.eslintrc.js</h3><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  root<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  parserOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    parser<span class="token punctuation">:</span> <span class="token string">"babel-eslint"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  env<span class="token punctuation">:</span> <span class="token punctuation">{</span>    browser<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    es6<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">extends</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// https://github.com/AlloyTeam/eslint-config-alloy</span>    <span class="token string">"eslint-config-alloy/vue"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// https://github.com/vuejs/eslint-plugin-vue</span>    <span class="token string">"plugin:vue/essential"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 结合.prettierrc.js中的规则来检查代码，这个一定要加！</span>    <span class="token string">"plugin:prettier/recommended"</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// required to lint *.vue files</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"vue"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// add your custom rules here</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 让prettier找出代码中的格式问题</span>    <span class="token string">"prettier/prettier"</span><span class="token punctuation">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 这个顺序不知道为啥，明明不用配置时，.vue文件template标签在script前面默认应该也是可以的，但是我这边不行，所以自定义了一下</span>    <span class="token string">"vue/component-tags-order"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">"error"</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        order<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"template"</span><span class="token punctuation">,</span> <span class="token string">"script"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"style"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><blockquote><p>因为大部分规则都继承于<code>eslint-config-alloy/vue</code>，所以代码的语法错误已经不需要我自己去规定了，</p></blockquote><h3 id="prettierrc-js"><a href="#prettierrc-js" class="headerlink" title=".prettierrc.js"></a>.prettierrc.js</h3><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 一行最多 120 字符</span>  printWidth<span class="token punctuation">:</span> <span class="token number">120</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 使用 2 个空格缩进</span>  tabWidth<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 不使用缩进符，而使用空格</span>  useTabs<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 行尾不需要有分号</span>  semi<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 使用单引号</span>  singleQuote<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 对象的 key 仅在必要时用引号</span>  quoteProps<span class="token punctuation">:</span> <span class="token string">"as-needed"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// jsx 不使用单引号，而使用双引号</span>  jsxSingleQuote<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 末尾需要有逗号</span>  trailingComma<span class="token punctuation">:</span> <span class="token string">"all"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 大括号内的首尾需要空格</span>  bracketSpacing<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// jsx 标签的反尖括号需要换行</span>  jsxBracketSameLine<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 箭头函数，只有一个参数的时候，也需要括号</span>  arrowParens<span class="token punctuation">:</span> <span class="token string">"always"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 每个文件格式化的范围是文件的全部内容</span>  rangeStart<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  rangeEnd<span class="token punctuation">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 不需要写文件开头的 @prettier</span>  requirePragma<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 不需要自动在文件开头插入 @prettier</span>  insertPragma<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 使用默认的折行标准</span>  proseWrap<span class="token punctuation">:</span> <span class="token string">"preserve"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 根据显示样式决定 html 要不要折行</span>  htmlWhitespaceSensitivity<span class="token punctuation">:</span> <span class="token string">"css"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// vue 文件中的 script 和 style 内不用缩进</span>  vueIndentScriptAndStyle<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 换行符使用 lf</span>  endOfLine<span class="token punctuation">:</span> <span class="token string">"lf"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 格式化嵌入的内容</span>  embeddedLanguageFormatting<span class="token punctuation">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="开发工具适配"><a href="#开发工具适配" class="headerlink" title="开发工具适配"></a>开发工具适配</h2><h3 id="WebStorm"><a href="#WebStorm" class="headerlink" title="WebStorm"></a>WebStorm</h3><p>用 WebStorm 的前端 er 一定不会太差！！<br>我个人一直非常推荐 WebStorm，用起来非常顺手！开箱即用，特别是 git 的使用，甩开 VSCode 几条街。<br>WebStorm 配合 ESLint 需要去设置中设置 Eslint 为自动装配，使其使用项目中的<code>.eslintrc.js</code>去检查代码。</p><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FjT0UiCzAxSVIDI4wilba7UNQen0.png"></p><h3 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h3><p>当然 VSCode 也是一款不错的开发工具，得力于丰富的插件市场，如果调教的够好，未来可能会比 WebStorm 更优秀。<br>VSCode 配合 ESLint 需要 ESLint 及 Prettier 等相关插件。</p><h4 id="在-VSCode-中使用"><a href="#在-VSCode-中使用" class="headerlink" title="在 VSCode 中使用"></a>在 VSCode 中使用</h4><p>在 VSCode 中，默认 ESLint 并不能识别 <code>.vue</code>、<code>.ts</code> 或 <code>.tsx</code> 文件，需要在「文件 =&gt; 首选项 =&gt; 设置」里做如下配置：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"eslint.validate"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"javascript"</span><span class="token punctuation">,</span>    <span class="token string">"javascriptreact"</span><span class="token punctuation">,</span>    <span class="token string">"vue"</span><span class="token punctuation">,</span>    <span class="token string">"typescript"</span><span class="token punctuation">,</span>    <span class="token string">"typescriptreact"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h4 id="保存时自动修复-ESLint-错误"><a href="#保存时自动修复-ESLint-错误" class="headerlink" title="保存时自动修复 ESLint 错误"></a>保存时自动修复 ESLint 错误</h4><p>如果想要开启「保存时自动修复」的功能，你需要配置 <code>.vscode/settings.json</code>：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"eslint.validate"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"javascript"</span><span class="token punctuation">,</span>    <span class="token string">"javascriptreact"</span><span class="token punctuation">,</span>    <span class="token string">"vue"</span><span class="token punctuation">,</span>    <span class="token string">"typescript"</span><span class="token punctuation">,</span>    <span class="token string">"typescriptreact"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"editor.codeActionsOnSave"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"source.fixAll.eslint"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="VSCode-中的-autoFixOnSave-没有效果"><a href="#VSCode-中的-autoFixOnSave-没有效果" class="headerlink" title="VSCode 中的 autoFixOnSave 没有效果"></a>VSCode 中的 autoFixOnSave 没有效果</h4><p>如果需要针对 <code>.vue</code>、<code>.ts</code> 和 <code>.tsx</code> 文件开启 ESLint 的 autoFix，则需要配置成：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"eslint.autoFixOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"eslint.validate"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"javascript"</span><span class="token punctuation">,</span>    <span class="token string">"javascriptreact"</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"vue"</span><span class="token punctuation">,</span>      <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"typescript"</span><span class="token punctuation">,</span>      <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"typescriptreact"</span><span class="token punctuation">,</span>      <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>至此，大部分的配置已经结束。</p><p>结束也是开始，团队中开发规范的制定落地一定是慢慢打磨的结果。每个团队有每个团队自己的风格，未来更多的是需要针对各自团队搭配出一套适合自己的代码规范。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码规范 </tag>
            
            <tag> Eslint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack-dev-server启动找不到config-yargs</title>
      <link href="/fqx1vy/"/>
      <url>/fqx1vy/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在我接触前端以来，用的都是脚手架或者是别人封装好的前端框架。对于<code>webpack</code>，我一直处于一知半解的状态，去年在搭建多页面构建的时候，一直搞定不了多页面构建的问题。考虑到后面还会来搭建<code>webpack</code>，所以最近学学<code>webpack</code>，结果一上来就出错，一脸懵逼。</p><h1 id="出现异常"><a href="#出现异常" class="headerlink" title="出现异常"></a>出现异常</h1><p>安装的都是最新版本的<code>webpack</code>及相关依赖。</p><pre><code>&quot;devDependencies&quot;: {    &quot;@babel/core&quot;: &quot;^7.12.10&quot;,    &quot;@babel/preset-env&quot;: &quot;^7.12.11&quot;,    &quot;@babel/preset-react&quot;: &quot;^7.12.10&quot;,    &quot;babel-loader&quot;: &quot;^8.2.2&quot;,    &quot;css-loader&quot;: &quot;^5.0.1&quot;,    &quot;file-loader&quot;: &quot;^6.2.0&quot;,    &quot;html-webpack-plugin&quot;: &quot;^4.5.1&quot;,    &quot;less&quot;: &quot;^4.0.0&quot;,    &quot;less-loader&quot;: &quot;^7.2.1&quot;,    &quot;react&quot;: &quot;^17.0.1&quot;,    &quot;react-dom&quot;: &quot;^17.0.1&quot;,    &quot;style-loader&quot;: &quot;^2.0.0&quot;,    &quot;url-loader&quot;: &quot;^4.1.1&quot;,    &quot;webpack&quot;: &quot;^5.11.1&quot;,    &quot;webpack-cli&quot;: &quot;^4.3.1&quot;,    &quot;webpack-dev-server&quot;: &quot;^3.11.1&quot;  }</code></pre><p>在运行 <code>webpack-dev-server --open</code> 时，报错如下：</p><pre><code>&gt; webpack-dev-server --openinternal/modules/cjs/loader.js:979  throw err;  ^Error: Cannot find module &#39;webpack-cli/bin/config-yargs&#39;Require stack:- /Users/xxx/workSpace/webpack/node_modules/webpack-dev-server/bin/webpack-dev-server.js    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:976:15)    at Function.Module._load (internal/modules/cjs/loader.js:859:27)    at Module.require (internal/modules/cjs/loader.js:1036:19)    at require (internal/modules/cjs/helpers.js:72:18)    at Object.&lt;anonymous&gt; (/Users/fangpengfei/workSpace/webpack/node_modules/webpack-dev-server/bin/webpack-dev-server.js:65:1)    at Module._compile (internal/modules/cjs/loader.js:1147:30)    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1167:10)    at Module.load (internal/modules/cjs/loader.js:996:32)    at Function.Module._load (internal/modules/cjs/loader.js:896:14)    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:71:12) {  code: &#39;MODULE_NOT_FOUND&#39;,  requireStack: [    &#39;/Users/xxx/workSpace/webpack/node_modules/webpack-dev-server/bin/webpack-dev-server.js&#39;  ]}</code></pre><h1 id="异常原因"><a href="#异常原因" class="headerlink" title="异常原因"></a>异常原因</h1><p>去<code>Google</code>后发现都是让重新安装低版本的<code>webpack-cli</code>，因为版本不兼容！想了想不对劲啊，既然版本不兼容，为什么不解决呢，看了下出现问题的时间都是去年甚至前年了，难道官方就不考虑解决吗？这个解决办法我不接受。按照国际惯例，我去<code>Github</code>上的<a href="https://github.com/webpack/webpack-dev-server/issues/2759" target="_blank" rel="noopener">webpack-dev-server Issues</a>去寻找答案，果然不出我所料：</p><pre><code>Yes - webpack-dev-server does not work with webpack-cli v4Can you try ? webpack serve</code></pre><p>在<code>webpack-cli v4</code> 中已经不支持用<code>webpack-dev-server</code>直接调用了！<br>应该   用<code>webpack serve</code>来替换<code>webpack-dev-server</code></p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>当然是使用新版本的启动方法啊！</p><pre><code>&quot;scripts&quot;: {    &quot;build&quot;: &quot;webpack&quot;,    &quot;watch&quot;: &quot;webpack --watch&quot;,    &quot;dev&quot;: &quot;webpack serve --open&quot;, // 相当于旧版本的webpack-dev-server --open  },</code></pre><blockquote><p>注意：是<code>webpack serve</code> 而不是<code>webpack server</code>，不要多一个 <code>r</code><br>顺带附上<a href="https://webpack.docschina.org/configuration/dev-server/" target="_blank" rel="noopener">webpack-dev-server</a>的新版本文档，文档里面也换成了新的启动方式。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面向BUG开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置重定向和Https的实践</title>
      <link href="/hryfur/"/>
      <url>/hryfur/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在<code>docker</code>容器化越来越流行的今天，安装各种环境和软件都越来越方便。然而我的腾讯云服务器却依旧使用的是较为原始的<code>yum</code>等安装方式，后来换成了宝塔一键式安装后，网站也稳定运行着，也没有再去管了。然而今天发现云服务的内存占用都快满了，然而我还想安装一些其他环境。所以为了进一步榨干云服务的性能，我选择重装系统，全部利用<code>docker</code>的方式去安装各种环境。不过今天只记录下安装<code>nginx</code>及其一些配置时爬过的坑。</p><p>我的博客<code>blog.letttgaco.cn</code>，是部署在<code>GitHub Pages</code>上的，但是域名备案时是备案的<code>www.letttgaco.cn</code>，所以我是想利用<code>nginx</code>的重定向功能，将<code>www.letttgaco.cn</code>重定向到我的博客去。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>在 dns 解析中，<code>blog.letttgaco.cn</code>已经指向的是<code>github</code>（GitHub Pages 已设置强制 HTTPS 访问），现在需要将<code>www.letttgaco.cn</code>的<code>dns</code>解析指向云服务器上，然后由云服务器上部署的 Nginx 去监听 80 端口和 443 端口，将其重定向/转发至<code>https://blog.letttgaco.cn</code>。</p><h1 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h1><p>我的云服务器为腾讯云服务器，系统为 CentOS7.6(64 位)，自带 50G 系统盘。<br>在<code>dns</code>解析中将<code>www.letttgaco.cn</code>指向云服务器的对外 IP 地址。</p><h1 id="安装并配置-Nginx"><a href="#安装并配置-Nginx" class="headerlink" title="安装并配置 Nginx"></a>安装并配置 Nginx</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><pre class=" language-sh"><code class="language-sh">|--root                   // root（家）目录|  |--app                 // 各个程序所在目录|  |  |--nginx            // 各个程序所在目录|  |  |  |--conf|  |  |  |  |--nginx.conf // nginx自定义配置文件|  |  |  |--html          // 网页根目录|  |  |  |--logs          // 日志文件|  |  |  |--ssl           // 各个域名的证书存放地址nginx.conf|  |--nginx_run.sh        // sh自动化命令</code></pre><p>按照以上目录结构创建相应的文件夹和文件</p><pre class=" language-sh"><code class="language-sh">mkdir /root/app/nginx/conf -ptouch /root/app/nginx/conf/nginx.confmkdir /root/app/nginx/html -pmkdir /root/app/nginx/logs -pmkdir /root/app/nginx/ssl -ptouch /root/nginx_run.sh</code></pre><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="不需要-SSL"><a href="#不需要-SSL" class="headerlink" title="不需要 SSL"></a>不需要 SSL</h3><p>如果只需要将<code>http://www.letttgaco.cn</code>重定向到<code>https://blog.letttgaco.cn</code>，那就只需要配置 80 端口。</p><pre class=" language-sh"><code class="language-sh">vim /root/app/nginx/conf/nginx.conf</code></pre><pre><code>server {    listen       80;    server_name  www.letttgaco.cn;    rewrite /.* https://blog.letttgaco.cn$uri permanent;}</code></pre><p>重定向的<code>url</code>是会发生变更，如果是需要隐式转发，则可以进行如下配置：</p><pre><code>server {    listen 80;    server_name www.letttgaco.cn;    large_client_header_buffers 4 128k;    location / {        #开启对http1.1支持        proxy_http_version 1.1;        #设置Connection为空串,以禁止传递头部到后端        #http1.0中默认值Connection: close        proxy_set_header Connection &quot;&quot;;        proxy_pass https://blog.letttgaco.cn;    }}</code></pre><h3 id="需要-SSL"><a href="#需要-SSL" class="headerlink" title="需要 SSL"></a>需要 SSL</h3><p>如果也需要将<code>https://www.letttgaco.cn</code>也进行重定向，那么就需要进行额外的证书配置</p><h4 id="申请-SSL-证书"><a href="#申请-SSL-证书" class="headerlink" title="申请 SSL 证书"></a>申请 SSL 证书</h4><p>首先先去腾讯云去申请<code>www.letttgaco.cn</code>的 SSL 证书，主要有两个文件：</p><ul><li><code>1_www.letttgaco.cn_bundle.crt</code></li><li><code>2_www.letttgaco.cn.key</code></li></ul><p>将证书下载下来并上传到<code>/root/app/nginx/ssl</code>中，</p><blockquote><p>备注：<a href="https://cloud.tencent.com/document/product/400/35244" target="_blank" rel="noopener">腾讯云 SSL 部署文档</a></p></blockquote><h4 id="配置-conf-文件"><a href="#配置-conf-文件" class="headerlink" title="配置 conf 文件"></a>配置 conf 文件</h4><pre><code>server {    listen 80;    #SSL 访问端口号为 443    listen 443 ssl;    #填写绑定证书的域名    server_name www.letttgaco;    #证书文件名称    ssl_certificate /ssl/1_www.letttgaco.cn_bundle.crt;    #私钥文件名称    ssl_certificate_key /ssl/2_www.letttgaco.cn.key;    ssl_session_timeout 5m;    #请按照以下协议配置    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;    ssl_prefer_server_ciphers on;        # 重定向    rewrite /.* https://blog.letttgaco.cn$uri permanent;}</code></pre><h2 id="启动-Nginx"><a href="#启动-Nginx" class="headerlink" title="启动 Nginx"></a>启动 Nginx</h2><h3 id="不需要-SSL-1"><a href="#不需要-SSL-1" class="headerlink" title="不需要 SSL"></a>不需要 SSL</h3><pre class=" language-sh"><code class="language-sh">docker run -p 80:80 --name nginx -v /root/app/nginx/html/:/usr/share/nginx/html -v /root/app/nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf -v /root/app/nginx/logs/:/var/log/nginx/  --privileged=true -d nginx:1.19.3</code></pre><h3 id="需要-SSL-1"><a href="#需要-SSL-1" class="headerlink" title="需要 SSL"></a>需要 SSL</h3><pre class=" language-sh"><code class="language-sh">docker run -p 80:80 -p 443:443 --name nginx -v /root/app/nginx/html/:/usr/share/nginx/html -v /root/app/nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf -v /root/app/nginx/logs/:/var/log/nginx/ -v /root/app/nginx/ssl/:/ssl/ --privileged=true -d nginx:1.19.3</code></pre><blockquote><p><code>-p 80:80</code> 将 80 端口映射到主机 80 端口</p><p><code>--name nginx</code> 别名，可以使用别名操作 nginx 容器</p><p><code>-v /root/app/nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf</code> 将主机的配置文件挂载到容器中，使 nginx 容器使用主机中的自定义配置文件</p><p><code>--privileged=true</code> 获取宿主机 root 权限</p><p><code>nginx:1.19.3</code> 指定 nginx 的版本，防止后续有坑</p></blockquote><h1 id="自动化启动-Nginx"><a href="#自动化启动-Nginx" class="headerlink" title="自动化启动 Nginx"></a>自动化启动 Nginx</h1><p>为了启动<code>Nginx</code>方便，我在这里写了一个简单的<code>nginx_run.sh</code>的脚本：</p><pre class=" language-sh"><code class="language-sh">docker stop nginxdocker rm nginxdocker run -p 80:80 -p 443:443 --name nginx -v /root/app/nginx/html/:/usr/share/nginx/html -v /root/app/nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf -v /root/app/nginx/logs/:/var/log/nginx/ -v /root/app/nginx/ssl/:/ssl/ --privileged=true -d nginx:1.19.3</code></pre><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>至此，我的网站终于可以实现<code>http</code>和<code>https</code>的重定向了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack配置-图片优化</title>
      <link href="/ulvcm5/"/>
      <url>/ulvcm5/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>图片是大部分网页的重要组成部分，一般情况下，我们不会太关注这方面的问题，需要显示图片直接一个 <code>img</code> 标签搞定。但实际上，无论是对于提高加载速度，还是对于优化用户体验，优化图片都是一个重要的手段。<br>图片优化分成两个方面：</p><ol><li>图片压缩。在保证视觉效果的情况下，减少图片的体积。这个很有效，1M 和 100K 的图片，肉眼看起来几乎差不多，但却省了 90% 的流量，大大提高了加载速度。</li><li>响应式图片。根据客户端的情况，选择最合适的图片返回给用户。用户是一个 500px 的设备，那么返回 1000px 的图给他就是浪费（假设物理像素和 CSS 像素是一比一）。</li></ol><h1 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h1><p>压缩的第一步是筛选出需要压缩的图片。如果图片本身就已经足够小了，那么再压缩的意义就不大。<br>而对于这些足够小的图片，我们就可以将其转换成雪碧图<strong>（CssSprites）</strong>或者<code>base64</code>编码来存储，而关于这两者的使用场景这里可以看一下这两篇文章（<a href="https://www.cnblogs.com/joyho/articles/3715275.html" target="_blank" rel="noopener">不要滥用雪碧图 sprite</a>和<a href="https://www.cnblogs.com/coco1s/p/4375774.html" target="_blank" rel="noopener">玩转图片 Base64 编码</a>）。</p><h2 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h2><p>这里我采用的是 webpack 里的<code>url-loader</code>插件进行处理，对于小于 1kb 的图片，将其转换成<code>base64</code>编码进行存储。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpe?g|gif|svg)$/</span><span class="token punctuation">,</span>  use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>      loader<span class="token punctuation">:</span> <span class="token string">"url-loader"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 它封装了file-loader，所以可以使用两个loader的全部配置属性</span>      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>        limit<span class="token punctuation">:</span> <span class="token number">1024</span><span class="token punctuation">,</span>        esModule<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        outputPath<span class="token punctuation">:</span> <span class="token string">'images'</span> <span class="token comment" spellcheck="true">// 设置图片的输出路径</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><blockquote><p><strong>参数说明</strong> &gt; <code>limit</code>是转换成 Base64 的图片大小的零界点设置，单位为 Byte，小于该数值的将进行转换。<br><code>esModule</code>是针对是否使用模块化框架的用户设定参数，默认为 true。如果项目中没有使用模块化框架，建议要将这个属性关闭，避免出现图片资源超过 limit，就变成[object Module]的问题。<br><code>outputPath</code>图片输出路径，将优化后的图片统一输出到该路径。</p></blockquote><h2 id="image-webpack-loader"><a href="#image-webpack-loader" class="headerlink" title="image-webpack-loader"></a>image-webpack-loader</h2><p>接下来就是压缩大一点的图片了，使用<a href="https://github.com/tcoopman/image-webpack-loader" target="_blank" rel="noopener">image-webpack-loader</a>进行进一步处理。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpe?g|gif|webp|svg)$/</span><span class="token punctuation">,</span>  use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>      loader<span class="token punctuation">:</span> <span class="token string">"url-loader"</span><span class="token punctuation">,</span>      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>        limit<span class="token punctuation">:</span> <span class="token number">1024</span><span class="token punctuation">,</span>        esModule<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        outputPath<span class="token punctuation">:</span> <span class="token string">'images'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      loader<span class="token punctuation">:</span> <span class="token string">'image-webpack-loader'</span><span class="token punctuation">,</span>      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>        mozjpeg<span class="token punctuation">:</span> <span class="token punctuation">{</span>          progressive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          quality<span class="token punctuation">:</span> <span class="token number">70</span> <span class="token comment" spellcheck="true">// 数值越高，质量越好</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        optipng<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// enabled: false,</span>          OptimizationLevel<span class="token punctuation">:</span> <span class="token number">4</span> <span class="token comment" spellcheck="true">// 默认是3</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        pngquant<span class="token punctuation">:</span> <span class="token punctuation">{</span>          enabled：<span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// quality: [0.75,0.95],</span>          <span class="token comment" spellcheck="true">// speed: 4</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        gifsicle<span class="token punctuation">:</span> <span class="token punctuation">{</span>          interlaced<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 默认：false 隔行扫描gif进行渲染</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// webp: {</span>        <span class="token comment" spellcheck="true">//   quality: 75</span>        <span class="token comment" spellcheck="true">// }</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><blockquote><p>如文档所说，<a href="https://github.com/tcoopman/image-webpack-loader" target="_blank" rel="noopener">image-webpack-loader</a>随附以下优化器，默认情况下会自动启用这些优化器：</p><ul><li><a href="https://github.com/imagemin/imagemin-mozjpeg" target="_blank" rel="noopener">mozjpeg</a> — 压缩 JPEG 图像</li><li><a href="https://github.com/kevva/imagemin-optipng" target="_blank" rel="noopener">optipng</a> — 压缩 PNG 图像</li><li><a href="https://github.com/imagemin/imagemin-pngquant" target="_blank" rel="noopener">pngquant</a> — 压缩 PNG 图像</li><li><a href="https://github.com/kevva/imagemin-svgo" target="_blank" rel="noopener">svgo</a> — 压缩 SVG 图像</li><li><a href="https://github.com/kevva/imagemin-gifsicle" target="_blank" rel="noopener">gifsicle</a> — 压缩 GIF 图像</li></ul><p>和可选的优化器：</p><ul><li><a href="https://github.com/imagemin/imagemin-webp" target="_blank" rel="noopener">webp</a> —将 JPG 和 PNG 图像压缩为 WEBP</li></ul><p>可以通过指定禁用默认优化器<code>optimizer.enabled: false</code>，并将其放在选项中即可启用可选优化器。</p></blockquote><h3 id="imagemin-mozjpeg"><a href="#imagemin-mozjpeg" class="headerlink" title="imagemin-mozjpeg"></a><a href="https://github.com/imagemin/imagemin-mozjpeg" target="_blank" rel="noopener">imagemin-mozjpeg</a></h3><p>JPEG 根据显示方式的不同，分为两种：Progressive JPEG 和 Baseline JPEG。<br>Progressive JPEG 会先加载模糊的整张图片，然后变的越来越清晰。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fk_-bMzWW6DrevC_kqIB1zGKiRgZ.jpg"><br>而 Baseline JPEG 会先清晰地加载图片的一部分，然后慢慢显示剩余的部分。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FjOjOygtOL0EeKqbIJJOrjot6rNB.jpg"></p><p>从视觉效果来说，Progressive JPEG 自然更好一些。但它也有一些缺点，比如它的解码速度比 Baseline JPEG 要慢，占用的 CPU 时间更多。<br>如果是桌面浏览器，这点性能问题自然无所谓，但是如果是移动端，就不得不考虑。工程本来就是权衡的艺术。<br>默认情况下，MozJPEG 生成的是 Progressive JPEG，可以通过 <a href="https://github.com/imagemin/imagemin-mozjpeg#progressive" target="_blank" rel="noopener">选项</a> 调整。</p><h3 id="optipng"><a href="#optipng" class="headerlink" title="optipng"></a><a href="https://github.com/imagemin/imagemin-optipng" target="_blank" rel="noopener">optipng</a></h3><p>在研究文档的过程中发现一个有趣的问题，也可能是官网无意中的行为（真的吗？），官方文档为了说明其 API 中的禁用指定优化器功能<code>optimizer.enabled: false</code>，就在文档中写了这么一段代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// optipng.enabled: false will disable optipng</span>    optipng<span class="token punctuation">:</span> <span class="token punctuation">{</span>        enabled<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  pngquant<span class="token punctuation">:</span> <span class="token punctuation">{</span>    quality<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.65</span><span class="token punctuation">,</span> <span class="token number">0.90</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    speed<span class="token punctuation">:</span> <span class="token number">4</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>本来是一个举例说明，结果在我 google 的几乎所有用户的 webpack 配置中，大家都把<code>optipng</code>这个优秀的压缩工具给禁用了 QAQ。<br>实际上在压缩质量上来说，<code>optipng</code>是无损压缩，采用的是基于 LZ/Huffman 的 DEFLATE 算法，以减少图片 IDAT chunk 区域的数据来实现压缩图片，同样是无损压缩的工具还有<a href="https://pngcrush.com/" target="_blank" rel="noopener"><strong>pngcrush</strong></a><strong>、</strong><a href="https://www.oschina.net/translate/4-free-tools-to-optimize-and-compress-png-images-without-loosing-quality?print" target="_blank" rel="noopener"><strong>pngout</strong></a><strong>、advpng</strong>。<br>而<a href="https://github.com/kornelski/pngquant" target="_blank" rel="noopener">pngquant</a>和<a href="https://tinify.cn/" target="_blank" rel="noopener"><strong>tinypng</strong></a><strong>、</strong><a href="https://github.com/kornelski/ImageAlpha" target="_blank" rel="noopener"><strong>ImageAlpha</strong></a><strong>、</strong><a href="https://github.com/stuart/pngnq" target="_blank" rel="noopener"><strong>pngnq</strong></a>等都是有损压缩，采用的是 quantization 算法，将 24 位的 PNG 图片转换为 8 位的 PNG 图片，减少图片的颜色数来实现图片压缩；<br>具体可以参考<a href="https://www.jianshu.com/p/83d00a7e2a4b" target="_blank" rel="noopener">Laya 图片压缩</a>对于各个压缩工具的对比情况。<br>但是呢，一般有损压缩的压缩率会大大高于无损压缩。就如 png 和 jpg 两者来说，png 格式可以进行无损压缩，质量好、支持透明但是体积大，jpg 的质量相对差一点但是体积很小，两者体积相差几乎在 70%以上。所以具体的权衡取舍还是看个人实际应用场景。</p><h3 id="pngquant"><a href="#pngquant" class="headerlink" title="pngquant"></a><a href="https://github.com/imagemin/imagemin-pngquant" target="_blank" rel="noopener">pngquant</a></h3><p>正如上面所说，它是一个有损压缩，我这里为了演示，暂时禁用了它。</p><blockquote><p><strong>参数说明(引用自</strong><a href="https://www.jianshu.com/p/83d00a7e2a4b" target="_blank" rel="noopener"><strong>Laya 图片压缩</strong></a><strong>)：</strong> 1.<code>quality</code>参数的作用是保证图片经过优化处理后，图片质量的取值范围（0<del>1）。取值越小，表示压缩比率越大，同时的图片的质量也就越差。在测试过程中发现，当设置最低取值为 0.60 或 0.65 时，部分图片的质量会严重下降，因此最终选择了 0.70 作为最低值。 2.<code>speed</code>参数的设置决定了图片优化的执行速度，取值范围为 1</del>10，默认值为 4。其中 10 的执行速度最快，对应的压缩比率最小；而 1 的执行速度最慢，对应的压缩比率最大。在测试过程中发现，无论我设置哪一个值它们的执行时间都差不多，不过压缩比率确实 1 的最大，10 的最小。<br>实测效果：<br>在设置 quality 的取值范围为 0.70~0.95，以及 speed 为 4 的情况下，可以在尽可能不影响图片质量的前提下去缩减文件的大小。<br>在测试过程中，我们以 PNG-8 品质为 256 的图片为例，最终的图片输出可以降低 70%左右的大小（从 3.78KB 缩减到 1.13KB）。</p></blockquote><h3 id="gifsicle"><a href="#gifsicle" class="headerlink" title="gifsicle"></a><a href="https://github.com/imagemin/imagemin-gifsicle" target="_blank" rel="noopener">gifsicle</a></h3><p>gifsicle 一共有 4 个参数配置，我一般常用的就 interlaced，即隔行扫描进行渲染，图片会自上而下渐进式加载。<br>在上文中提到的 Progressive 和 Baseline 的区别中，progressive 等同于<code>interlaced</code>，baseline 等同于 <code>not interlaced</code>，所以取舍自己决定。</p><blockquote><p>参数说明<br><code>optimizationLevel</code>是优化级别，默认值为 1，取值范围在 1-3。优化级别的高低决定图片的质量，较高的级别需要更长的时间，但可能会有更好的效果。<br>文档中给出了 3 种取值所做的事：<br>1：仅存储每个图像的更改部分<br>2：还使用透明度进一步缩小文件。<br>3：尝试几种优化方法（通常速度较慢，有时效果更好）。<br><code>colors</code>是颜色减少的高低设置，是将每个输出 GIF 中的不同颜色数量减少到指定数值或者更少，取值范围在 2-256 之间。<br><code>buffer</code>是利用缓冲进行优化。</p></blockquote><h3 id="webp"><a href="#webp" class="headerlink" title="webp"></a><a href="https://github.com/imagemin/imagemin-webp" target="_blank" rel="noopener">webp</a></h3><p>最后来看一下该插件的可选优化器 Webp。</p><blockquote><p><strong>参数说明</strong> &gt; <code>quality</code>质量参数，将品质因数设置在<code>0</code>和之间<code>100</code>。是最常用，大多数场景下也只需要调整这一个参数即可。<br>其他参数可以参考<a href="https://github.com/imagemin/imagemin-webp#api" target="_blank" rel="noopener">官方文档</a> &gt; <strong>注意，在实际的使用中，发现这里存在一个容易被忽视的坑。</strong> &gt; <strong>image-webpack-loader 里的 webp 优化器只是针对已有的 webp 文件进行质量上的优化（或者说就不起作用，如果有研究出来的大佬麻烦评论告知哈），并不能把前面的 png/jpg 转成 webp。官方文档有点误导到大家，导致许多图片优化的教程都把这个当成 webp 转换器，然而我实际试了下，并不能=.=。</strong></p></blockquote><p>至于 webp 的优化过程，我将在下文<code>优雅地使用WebP图片</code>中详细介绍。</p><h1 id="响应式图片"><a href="#响应式图片" class="headerlink" title="响应式图片"></a>响应式图片</h1><p>所谓响应式图片，关键就一点：<strong>根据客户端的情况返回最适合客户端的图片</strong>。</p><p>那么，在准备部署响应式图片的时候，会存在哪些情况呢？</p><ul><li>是否希望根据客户端情况返回不同的图片 <strong>内容</strong>?</li><li>是否希望根据客户端情况返回不同的图片 <strong>格式</strong>？</li><li>是否希望根据客户端情况返回不同的图片 <strong>尺寸</strong> ？</li><li>是否希望优化高 <strong>分辨率</strong> 设备的体验？</li></ul><p>在 <code>picture</code> 标签出来之前，这些只能通过 JS 来实现，不仅代码而且丑陋能力也不全。但是现在，针对这些问题，我们有了一个完整的优雅的解决方案。</p><h2 id="picture-标签"><a href="#picture-标签" class="headerlink" title="picture 标签"></a>picture 标签</h2><p><code>picture</code> 是 HTML5 新引入的标签，基本用法如下。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picture</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picture</span><span class="token punctuation">></span></span></code></pre><p>我们可以这样理解，<code>picture</code> 标签会从 <code>source</code> 中选择最合适的一个，然后将它的 URL 赋值给 <code>img</code>。对于不认识 <code>picture</code> 的旧浏览器，他们会忽略 <code>picture</code>，只渲染 <code>img</code>，一切都不会有问题。<br>注意：<code>**picture**</code>** 标签最后一定要包含一个 <strong><code>**img**</code></strong> 标签，否则，什么都不会显示。**<br>现在我们逐一来看 <code>picture</code> 是怎样解决上面的四个问题。</p><h2 id="动态内容"><a href="#动态内容" class="headerlink" title="动态内容"></a>动态内容</h2><p>根据客户端的情况，我们来返回完全不同的两张图。这个很简单，使用 <code>source</code> 标签的 <code>media</code> 属性即可。<br>如下代码会在小于 1024px 的时候显示 <code>img-center.jpg</code>，而在大于等于 1024px 的时候显示 <code>img-full.jpg</code>。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picture</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(min-width: 1024px)<span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img-full.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img-center.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picture</span><span class="token punctuation">></span></span></code></pre><h2 id="动态尺寸"><a href="#动态尺寸" class="headerlink" title="动态尺寸"></a>动态尺寸</h2><p>如果希望浏览器能根据情况去请求不同尺寸的图片，我们需要提供两个信息：</p><ul><li>有哪些尺寸的图片</li><li>图片显示的时候是什么尺寸</li></ul><p>下面的代码中，我们首先使用 <code>srcset</code> 属性指定有哪些图片，分别是图片名和图片的尺寸，这里注意单位不用 <code>px</code> 而是 <code>w</code>，用于表示图片的固有宽度。<br><code>sizes</code> 属性告诉浏览器，这个图片在不同的条件下会是什么样的宽度。这个属性用于给到浏览器提示，并不会真正的指定 <code>img</code> 的宽度，我们还是需要另外使用 CSS 来指定。<br>这样，给定一个视口宽度，浏览器可以得知图片需要的宽度，然后根据 DPI 情况，在所有可选图片中选择最合适的一个。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img-400.jpg<span class="token punctuation">"</span></span>  <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(min-width: 640px) 60vw, 100vw<span class="token punctuation">"</span></span>  <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>    img-200.jpg   200w,    img-400.jpg   400w,    img-800.jpg   800w,    img-1200.jpg 1200w  <span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h2 id="动态分辨率"><a href="#动态分辨率" class="headerlink" title="动态分辨率"></a>动态分辨率</h2><p>动态分辨率其实是动态尺寸的一种简化情况。<br>根据显示器的 DPI 返回同一张图片的不同分辨率版本可以直接利用 <code>img</code> 标签的 <code>srcset</code> 属性。<br>使用了如下的代码，浏览器会自动根据显示器的 DPI 来决定下载图片的哪个版本。<br>在低 DPI 设备上，例如桌面显示器，浏览器会使用 img-200.jpg，而在高 DPI 设备上，例如手机，浏览器会使用 img-400.jpg。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img-200.jpg, img-300.jpg 1.5x, img-400.jpg 2x<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img-400.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector">img </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>当然，我们也可以组合这几个选项。</p><ul><li>视口 &gt;= 1280px 时<ul><li>根据视口的具体宽度，返回不同尺寸的 <em>img-full</em> 图片</li><li>如果客户端支持 WebP，返回 WebP 格式</li></ul></li><li>视口 &lt; 1280px 时<ul><li>根据视口的具体宽度，返回不同尺寸的 <em>img</em> 图片</li></ul></li><li>如果客户端支持 WebP，返回 WebP 格式</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picture</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span>    <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(min-width: 1280px)<span class="token punctuation">"</span></span>    <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50vw<span class="token punctuation">"</span></span>    <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>      img-full-200.webp   200w,      img-full-400.webp   400w,      img-full-800.webp   800w,      img-full-1200.webp 1200w,      img-full-1600.webp 1600w,      img-full-2000.webp 2000w    <span class="token punctuation">"</span></span>    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/webp<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span>    <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(min-width: 1280px)<span class="token punctuation">"</span></span>    <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50vw<span class="token punctuation">"</span></span>    <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>      img-full-200.jpg   200w,      img-full-400.jpg   400w,      img-full-800.jpg   800w,      img-full-1200.jpg 1200w,      img-full-1600.jpg 1800w,      img-full-2000.jpg 2000w    <span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span>    <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(min-width: 640px) 60vw, 100vw<span class="token punctuation">"</span></span>    <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>      img-200.webp   200w,      img-400.webp   400w,      img-800.webp   800w,      img-1200.webp 1200w,      img-1600.webp 1600w,      img-2000.webp 2000w    <span class="token punctuation">"</span></span>    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/webp<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>    <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img-400.jpg<span class="token punctuation">"</span></span>    <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(min-width: 640px) 60vw, 100vw<span class="token punctuation">"</span></span>    <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>      img-200.jpg   200w,      img-400.jpg   400w,      img-800.jpg   800w,      img-1200.jpg 1200w,      img-1600.jpg 1600w,      img-2000.jpg 2000w    <span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picture</span><span class="token punctuation">></span></span></code></pre><p>这里强烈建议自己动手，结合 <a href="https://placeholder.com/" target="_blank" rel="noopener">placeholder.com</a> 网站，生成一些图片来测试。毕竟，纸上得来终觉浅。</p><h1 id="优雅地使用-WebP-图片"><a href="#优雅地使用-WebP-图片" class="headerlink" title="优雅地使用 WebP 图片"></a>优雅地使用 WebP 图片</h1><p>在使用 webp 图片之前，我们先来了解下 webp 格式的图片到底是怎样的。<br>参考<a href="https://blog.liuguofeng.com/tag/%E5%9B%BE%E7%89%87" target="_blank" rel="noopener">将之前的项目图片进行了压缩</a>这篇文章的说明：</p><p><a href="https://developers.google.com/speed/webp/" target="_blank" rel="noopener">WebP</a>是 Google 推出的一种相对较新的格式，旨在通过编码<a href="https://en.wikipedia.org/wiki/Lossless_compression" target="_blank" rel="noopener">无损</a>和<a href="https://en.wikipedia.org/wiki/Lossy_compression" target="_blank" rel="noopener">有损</a>格式的图像来提供较小的文件大小，使其成为 JPEG 和 PNG 的绝佳替代品。<br>WebP 图像的视觉质量通常与 JPEG 和 PNG 相当，但通常文件大小要小得多。例如，当我将屏幕截图从上面转换为 WebP 时，我得到了一个 88 KB 的文件，其质量与 913 KB 的原始图像相当。<strong>减少 90％！</strong><br>看一看下面三张图，你能分辨的出来吗？</p><ul><li><a href="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/20200419232154.png" target="_blank" rel="noopener">原始图片</a></li><li><a href="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/20200419232255.png" target="_blank" rel="noopener">优化后的图片</a></li><li><a href="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/20200419232329.webp" target="_blank" rel="noopener">webp 图片</a></li></ul><p>就个人而言，视觉质量具有可比性，您所获得的节省很难被忽视。现在我们已经确定了尽可能使用 WebP 格式的价值，但是要注意是它不能完全取代 JPEG 和 PNG。根据<a href="https://caniuse.com/#search=WebP" target="_blank" rel="noopener">caniuse.com</a>提供的数据显示，虽然浏览器中的 WebP 支持已经很普遍了，但是需要足够高的版本号才可支持。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FiPJ5-pU_jPgEpBXUujF9z2nNzgs.png"><br>截止撰稿日(2020-04-20)，只有 Safari 还在试验中，也算是即将支持 webp 图片了。至于 IE 浏览器嘛，emmmm….一言难尽<img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FmguFO0BL22hZqoWWJIcrzSCJFkD.svg"><br>数据显示，全球有 77.63%的用户使用支持 WebP 的浏览器。这意味着，通过提供 WebP 图像，您可以为 77.63%的客户提高网页速度。<br>所以，在客户端支持的情况下，我们应该尽可能地使用 WebP 格式。</p><h2 id="picture-标签兼容优化"><a href="#picture-标签兼容优化" class="headerlink" title="picture 标签兼容优化"></a>picture 标签兼容优化</h2><h3 id="优化流程"><a href="#优化流程" class="headerlink" title="优化流程"></a>优化流程</h3><p>在开始讲针对 webp 图片的优化前，我想先梳理下开发流程。<br>这里需要分两种情况：</p><ol><li>全新网站的兼容优化</li><li>针对已有网站的兼容优化。</li></ol><p>如果是全新网站，而且设计师把各种图片都给到你了，那就完全不用担心图片转换问题，可以直接运用<code>picture</code>标签书写兼容格式，我这里就不再赘述。<br>而本文主要讲的就是在图片格式不全的情况下，甚至是对已有目录的静态网站进行优化时该怎样的开发流程。<br>第一个是顺序，在上面我尝试了在构建的同时利用 image-webpack-loader 可选的 webp 转换器，直接对现有 jpg/png 图片转换失败后，就暂时无法在缺失 webp 图片的情况下直接进行改造。<br>所以现在的思路是：</p><ol><li>将现有的图片全部转换成 webp 格式。</li><li>将已有的 img 标签全部替换成 picture 标签。</li><li>利用 webpack 的 html-loader 识别出所有图片格式的路径后并将其 hash 重命名后打包到同一文件夹下。</li></ol><p>下面将具体展开谈一下针对单入口的页面和多入口的页面的处理。</p><h3 id="单入口页面"><a href="#单入口页面" class="headerlink" title="单入口页面"></a>单入口页面</h3><p>对于单入口单页面的话，网站所用的图片原则上都只在一个文件夹。假设一个单页面网站的目录结构是这样的：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token operator">|</span><span class="token operator">--</span>dist                                  <span class="token comment" spellcheck="true">//打包后的路径</span><span class="token operator">|</span><span class="token operator">--</span>src                                  <span class="token comment" spellcheck="true">//项目源代码目录</span><span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>css                              <span class="token comment" spellcheck="true">//存放css样式表</span><span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>images                      <span class="token comment" spellcheck="true">//存放网页所需的所有图片</span><span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>js                              <span class="token comment" spellcheck="true">//存放javaScript代码</span><span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>index<span class="token punctuation">.</span>html              <span class="token comment" spellcheck="true">//网页入口</span><span class="token operator">|</span><span class="token operator">--</span>webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js      <span class="token comment" spellcheck="true">//webpack的配置文件</span><span class="token operator">|</span><span class="token operator">--</span>package<span class="token punctuation">.</span>json                  <span class="token comment" spellcheck="true">//项目元数据，依赖包等信息</span><span class="token operator">|</span><span class="token operator">--</span>package<span class="token operator">-</span>loack<span class="token punctuation">.</span>json   <span class="token comment" spellcheck="true">//依赖包具体版本信息</span><span class="token operator">|</span><span class="token operator">--</span>webp<span class="token punctuation">.</span>js                           <span class="token comment" spellcheck="true">//下文中提到的转换图片的js</span></code></pre><p>我们可以使用<code>imagemin-webp</code>官方文档所提供的方法：使用了<code>imagemin</code>和<code>imagemin-webp</code>来转换 jpg/png。<br>在根目录中新建<code>webp.js</code>文件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> imageminWebp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"imagemin-webp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> imagemin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"imagemin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imagemin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"src/images/*.{jpg,png}"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  destination<span class="token punctuation">:</span> <span class="token string">"src/images"</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token function">imageminWebp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      quality<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样就可以在根目录运行<code>node webp.js</code>，把项目中的所有 jpg/png 转成 webp 格式图片并存放到原图片目录下，然后就可以对原有 img 标签进行改造，加上 webp 格式的图片。</p><h3 id="多入口页面"><a href="#多入口页面" class="headerlink" title="多入口页面"></a>多入口页面</h3><p>对于让人头疼的多入口页面来说，配置起来就复杂的多。首先我们先约定一下多入口页面的目录结构。</p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>多入口也就意味着多出口，不但 html 网页可能分布在不同的文件夹下，不同网页所需的图片/css/js 也被存放到对应网页的不同文件夹下。假设一个多入口页面的目录结构如下：</p><pre class=" language-csharp"><code class="language-csharp">webpack<span class="token operator">|</span><span class="token operator">--</span>dist                                  <span class="token comment" spellcheck="true">//打包后的路径</span><span class="token operator">|</span><span class="token operator">--</span>src                                  <span class="token comment" spellcheck="true">//项目源代码目录</span><span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>common                        <span class="token comment" spellcheck="true">//存放各个页面都有可能用到的组件库（基本不变更）</span><span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>jquery<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>swiper<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js<span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>css                              <span class="token comment" spellcheck="true">//存放css样式表</span><span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>index<span class="token punctuation">.</span>scss          <span class="token comment" spellcheck="true">//index页面所需的样式表</span><span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>about<span class="token punctuation">.</span>scss          <span class="token comment" spellcheck="true">//about页面所需的样式表</span><span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>common<span class="token punctuation">.</span>scss      <span class="token comment" spellcheck="true">//通用样式表</span><span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>images                      <span class="token comment" spellcheck="true">//存放网页所需的所有图片</span><span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>index                  <span class="token comment" spellcheck="true">//index页面所需的图片</span><span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>header1<span class="token punctuation">.</span>png<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>banner1<span class="token punctuation">.</span>png<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>a1<span class="token punctuation">.</span>jpg<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>about                  <span class="token comment" spellcheck="true">//about页面所需的图片</span><span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>header1<span class="token punctuation">.</span>png<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>banner1<span class="token punctuation">.</span>png<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>a1<span class="token punctuation">.</span>jpg<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>common                  <span class="token comment" spellcheck="true">//可复用的图片</span><span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>logo<span class="token punctuation">.</span>png<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>footer<span class="token punctuation">.</span>png<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>wechat<span class="token punctuation">.</span>svg<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>js                              <span class="token comment" spellcheck="true">//存放javaScript代码</span><span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>index<span class="token punctuation">.</span>js              <span class="token comment" spellcheck="true">//index页面的js文件</span><span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>about<span class="token punctuation">.</span>js              <span class="token comment" spellcheck="true">//index页面的js文件</span><span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>common<span class="token punctuation">.</span>js          <span class="token comment" spellcheck="true">//可复用的js</span><span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>index<span class="token punctuation">.</span>html              <span class="token comment" spellcheck="true">//网站首页html</span><span class="token operator">|</span>  <span class="token operator">|</span><span class="token operator">--</span>about<span class="token punctuation">.</span>html              <span class="token comment" spellcheck="true">//关于网站html</span><span class="token operator">|</span><span class="token operator">--</span>webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js      <span class="token comment" spellcheck="true">//webpack的配置文件</span><span class="token operator">|</span><span class="token operator">--</span>package<span class="token punctuation">.</span>json                  <span class="token comment" spellcheck="true">//项目元数据，依赖包等信息</span><span class="token operator">|</span><span class="token operator">--</span>package<span class="token operator">-</span>loack<span class="token punctuation">.</span>json   <span class="token comment" spellcheck="true">//依赖包具体版本信息</span></code></pre><p>可以看出，较为复杂的就是图片了。由于多个页面所需的图片数量非常多，在开发的过程中很难保证图片起名的不重复，所以最理想的就是放在不同文件夹下了。<br>但是新的问题出现了：webpack 常用于将不同文件都打包至同一目录下，如果打包后命名重复导致文件被覆盖了怎么办？<br>当然，webpack 也给出了几乎完美的解决方案：将文件进行 hash 重命名后输出，这样就几乎不会导致重名覆盖问题的发生。<br>可是，又一个棘手的问题发生了：<br>上文我们也说了，我们是要在打包前就将图片转换成 webp 格式。这样改造过程中，静态资源的文件名也不会变，路径也是各自的路径，开发过程才能方便起来。<br>那么，既然用到的图片会重名，所以将图片整体拿出来手动转换后再丢回到各自文件夹的方法也不可取。最理想的就是各自转换各自的目录，所以第一个办法就是：</p><ul><li>用单页面转换的方式，每次改一下输入输出路径，对每个存放图片的文件夹单独转换。</li></ul><p>怎么说呢，可以是可以的，但是既然都用了 webpack 自动化打包了，我们应该减少手动操作文件的次数。而且后期维护起来，那是相当的麻烦。当你有更多的页面，每次需求方更新图片的时候，我们都得手动操作一次，费力又费时间。</p><h4 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h4><p>于是乎我投向了 gulp 的怀抱，gulp 在操作文件的过程中，借鉴了 linux 的管道思想，可以将上个的输出作为下一个的输入。于是，基于 gulp 的自动化转换程序诞生了：<br>首先在根目录建立 gulpfile.js 文件，并安装好所需的依赖。</p><blockquote><p><strong>注意，gulp 需要安装两次</strong></p></blockquote><pre class=" language-javascript"><code class="language-javascript">npm i gulp <span class="token operator">-</span>D <span class="token comment" spellcheck="true">//保证依赖被安装到node_modules下</span>npm i gulp <span class="token operator">-</span>g <span class="token comment" spellcheck="true">//保证直接在命令行使用gulp命令时不会报错</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"merge-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-webp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取文件夹</span><span class="token keyword">function</span> <span class="token function">getFolders</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 需要转换的文件路径，我这里设置为根目录下的src目录</span><span class="token keyword">const</span> scriptsPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">imagesToWebp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> folders <span class="token operator">=</span> <span class="token function">getFolders</span><span class="token punctuation">(</span>scriptsPath<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> tasks <span class="token operator">=</span> folders<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>folder<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>folder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//依次输出：</span>    <span class="token comment" spellcheck="true">//common</span>    <span class="token comment" spellcheck="true">//css</span>    <span class="token comment" spellcheck="true">//images</span>    <span class="token comment" spellcheck="true">//js</span>    <span class="token comment" spellcheck="true">// </span><span class="token comment" spellcheck="true">/**/</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token punctuation">{</span>jpg<span class="token punctuation">,</span>png<span class="token punctuation">}</span>是找到src下所有层级的jpg<span class="token operator">/</span>png图片    <span class="token keyword">return</span> gulp      <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>scriptsPath<span class="token punctuation">,</span> folder<span class="token punctuation">,</span> <span class="token string">"/**/*.{jpg,png}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">webp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//使用webp插件进行转换（默认会保留原图片）</span>      <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span>scriptsPath <span class="token operator">+</span> folder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出到各自的文件夹下</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//合并gulp流</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span>webp <span class="token operator">=</span> gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>imagesToWebp<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>大功告成！这样我们就可以在命令行使用<code>gulp webp</code>命令进行图片转换了。<br>在拿到了所有 webp 文件后，就可以使用 picture 标签进行改造了。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picture</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./images/index/a1.webp<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/webp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./images/index/a1.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picture</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picture</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./images/about/a1.webp<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/webp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./images/about/a1.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picture</span><span class="token punctuation">></span></span></code></pre><blockquote><p><strong>注意：</strong><br>记得在 webpack.config.js 中使用 html-loader 时，将 source 标签下的 srcset 属性加入 attrs，否则 html-loader 将无法识别 source 标签中的图片路径。</p></blockquote><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  test<span class="token operator">:</span> /\.(html<span class="token punctuation">)</span>$/<span class="token punctuation">,</span>  use<span class="token operator">:</span> <span class="token punctuation">{</span>    loader<span class="token operator">:</span> 'html-loader'<span class="token punctuation">,</span>    options<span class="token operator">:</span> <span class="token punctuation">{</span>      root<span class="token operator">:</span> path.resolve(__dirname<span class="token punctuation">,</span> 'src'<span class="token punctuation">)</span><span class="token punctuation">,</span>      attrs<span class="token operator">:</span> <span class="token punctuation">[</span>'img<span class="token operator">:</span>src'<span class="token punctuation">,</span> 'img<span class="token operator">:</span>data-src'<span class="token punctuation">,</span> 'source<span class="token operator">:</span>srcset'<span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>对于 webpack 中关于多页面的其他配置，我将在其他文章中详细介绍并分享我的代码，请持续关注，谢谢～</p><h2 id="利用-cdn-服务自动判断"><a href="#利用-cdn-服务自动判断" class="headerlink" title="利用 cdn 服务自动判断"></a>利用 cdn 服务自动判断</h2><p>目前，有些图片 cdn 服务可以开启自动兼容 webp 的模式，即支持 webp 的浏览器则将原图转换为 webp 图片并返回，否则直接返回原图。实现这个功能的原理是，根据浏览器发起的请求头中的 Accept 属性中是否包含 webp 格式来判断：</p><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fv3x2-3h24vcrUFFv5rxfxcMkRKo.png"><br>有则说明浏览器支持 webp 格式，这对开发者来说可能是最简单的兼容方案，但是依赖于后端服务。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://blog.liuguofeng.com/tag/%E5%9B%BE%E7%89%87" target="_blank" rel="noopener">将之前的项目图片进行了压缩</a></li><li><a href="https://juejin.im/post/5d4979cc5188255b3e4126ae#heading-10" target="_blank" rel="noopener">谈谈 Web 应用中的图片优化技巧及反思</a></li><li><a href="https://www.jianshu.com/p/83d00a7e2a4b" target="_blank" rel="noopener">Laya 图片压缩</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
            <tag> 静态资源优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈一谈二进制</title>
      <link href="/oslix7/"/>
      <url>/oslix7/</url>
      
        <content type="html"><![CDATA[<h1 id="二进制与十进制之间的转换"><a href="#二进制与十进制之间的转换" class="headerlink" title="二进制与十进制之间的转换"></a>二进制与十进制之间的转换</h1><h2 id="十进制转换成二进制"><a href="#十进制转换成二进制" class="headerlink" title="十进制转换成二进制"></a>十进制转换成二进制</h2><h3 id="取余法"><a href="#取余法" class="headerlink" title="取余法"></a>取余法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  String numstr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> de <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>de <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> de <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//除2 取余数作为二进制数</span>    numstr <span class="token operator">=</span> res <span class="token operator">+</span> numstr<span class="token punctuation">;</span>    de <span class="token operator">=</span> de <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>numstr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//11111</span><span class="token punctuation">}</span></code></pre><p>十进制整数转换为二进制整数采用”除 2 取余，逆序排列”法。具体做法是：用 2 整除十进制整数，可以得到一个商和余数；再用 2 去除商，又会得到一个商和余数，如此进行，直到商为小于 1 时为止，然后把先得到的余数作为二进制数的低位有效位，后得到的余数作为二进制数的高位有效位，依次排列起来。</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>假设十进制整数 A 化得的二进制数为<code>abcde</code>的形式，那么用上面的方法按权展开， 得<br><code>A=a(2^4)+b(2^3)+c(2^2)+d(2^1)+e(2^0)</code> （后面的和不正是化十进制的过程吗）<br>假设该数未转化为二进制,除以基数<code>2</code>得<br><code>A/2=a(2^4)/2+b(3^1)/2+c(2^2)/2+d(1^3)/2+e(2^0)/2</code><br>注意：<code>e</code>除不开二，余下了！其他的绝对能除开，因为他们都包含<code>2</code>，而<code>e</code>乘的是<code>1</code>，他本身绝对不包含因数<code>2</code>，只能余下。所以可以得到余数<code>e</code>，<code>A/2 - e/2</code> 得到新的整数<code>a(2^3)+b(2^2)+c(2^1)+d(2^0)</code>，然后 再除以基数<code>2</code>余下了<code>d</code>，以此类推。当这个数不能再被<code>2</code>除时，先余掉的<code>e</code>位数在原数低，而后来的余数数位高，所以要把所有的余数反过来写。正好是<code>abcde</code></p><h3 id="移位异或法"><a href="#移位异或法" class="headerlink" title="移位异或法"></a>移位异或法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//定义一个String用于返回得到的二进制</span>  String binary <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取每一位</span>    <span class="token keyword">int</span> bit <span class="token operator">=</span> num <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将获取的位添加到字符串</span>    binary <span class="token operator">=</span> bit <span class="token operator">+</span> binary<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//向右移一位</span>    num <span class="token operator">=</span> num <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这种位运算运用了一个特点：任何二进制数与 1 进行与运算都会得到其最低的低位有效位，即二进制数的最后一个数本身。所以让这个正整数与 1 进行与运算，再右移一位后把最后一位消除掉（整数/2），再进行如此的循环操作就可以得到这个正整数的每一位二进制数，因为先运算的数位低，后运算的高，所以进行一个反向排列就可以得到该正整数对应的二进制数。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里canal数据库命令总结</title>
      <link href="/ymxk6u/"/>
      <url>/ymxk6u/</url>
      
        <content type="html"><![CDATA[<p>查看端口：netstat -ntulp</p><h1 id="canal"><a href="#canal" class="headerlink" title="canal"></a>canal</h1><pre><code>路径：/root/canal配置文件：vim /root/canal/conf/example/instance.properties启动：sh /root/canal/bin/startup.sh关闭：sh /root/canal/bin/stop.shserver日志：tail -100f logs/canal/canal.lognstance日志：tail -100f logs/example/example.log删除日志：rm -rf logs/canal/canal.log logs/example/example.log端口：119.27.172.40:11111</code></pre><h1 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h1><pre><code>路径：/usr/local/zookeeper配置文件：vim conf/zoo.cfg启动：bin/zkServer.sh start关闭：bin/zkServer.sh stop状态：zkServer.sh status验证：telnet 127.0.0.1 2181         stat关闭：./zkServer.sh stop端口：119.27.172.40:2181</code></pre><h1 id="zkui"><a href="#zkui" class="headerlink" title="zkui"></a>zkui</h1><pre><code>路径：/root/zkui配置文件：vim config.cfg配置文件：vim target/config.cfg前台启动：java -jar target/zkui-2.0-SNAPSHOT-jar-with-dependencies.jar后台启动：nohup java -jar target/zkui-2.0-SNAPSHOT-jar-with-dependencies.jar &amp;端口：119.27.172.40:9090</code></pre><h1 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h1><pre><code>路径：/usr/local/kafka/kafka_2.11-1.1.1配置文件：vim config/server.properties启动server：bin/kafka-server-start.sh  -daemon  config/server.properties &amp;关闭server：bin/kafka-server-stop.sh查看所有topic：bin/kafka-topics.sh --list --zookeeper 119.27.172.40:2181查看指定topic下面的数据：bin/kafka-console-consumer.sh --bootstrap-server 119.27.172.40:9092  --from-beginning --topic example_t端口：119.27.172.40:9092</code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令</title>
      <link href="/vkdsce/"/>
      <url>/vkdsce/</url>
      
        <content type="html"><![CDATA[<p>记录学习一下每天都在使用的 Git 操作命令，以加快工作效率、应对意外情况的发生为目标。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FlWMWzIX9WE7PW-7eyeq8uaEJ_3p.png"></p><pre><code>  - Workspace：工作区  - Index / Stage：暂存区  - Repository：仓库区（或本地仓库）  - Remote：远程仓库</code></pre><h1 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h1><p><code>git stash</code>的应用场景有以下几种情况，我都遇到过，以往我都是把代码复制出来再改 BUG，今天才发现这么做简直很蠢 QAQ。</p><ul><li>发现有一个类是多余的，想删掉它又担心以后需要查看它的代码，想保存它但又不想增加一个脏的提交。这时就可以考虑<code>git stash</code>。</li><li>使用 git 的时候，我们往往使用分支（branch）解决任务切换问题，例如，我们往往会建一个自己的分支去修改和调试代码, 如果别人或者自己发现原有的分支上有个不得不修改的 bug，我们往往会把完成一半的代码<code>commit</code>提交到本地仓库，然后切换分支去修改 bug，改好之后再切换回来。这样的话往往 log 上会有大量不必要的记录。其实如果我们不想提交完成一半或者不完善的代码，但是却不得不去修改一个紧急 Bug，那么使用<code>git stash</code>就可以将你当前未提交到本地（和服务器）的代码推入到 Git 的栈中，这时候你的工作区间和上一次提交的内容是完全一样的，所以你可以放心的修 Bug，等到修完 Bug，提交到服务器上后，再使用<code>git stash apply</code>将以前一半的工作应用回来。</li><li>经常有这样的事情发生，当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。解决这个问题的办法就是<code>git stash</code>命令。储藏(stash)可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。</li></ul><p><code>git stash</code>会把所有未提交的修改（包括暂存的和非暂存的）都保存起来，用于后续恢复当前工作目录。<br>比如下面的中间状态，通过 git stash 命令推送一个新的储藏，当前的工作目录就干净了。而且<code>git stash</code>是本地存储，并不会推送到服务器。</p><pre class=" language-shell"><code class="language-shell">$ git statusOn branch masterChanges not staged for commit:  (use "git add <file>..." to update what will be committed)  (use "git restore <file>..." to discard changes in working directory)        modified:   index.htmlno changes added to commit (use "git add" and/or "git commit -a")$ git stashSaved working directory and index state WIP on master: e4f060f add readme$ git statusOn branch masternothing to commit, working tree clean</code></pre><h2 id="git-stash-save"><a href="#git-stash-save" class="headerlink" title="git stash save"></a>git stash save</h2><p>实际应用中推荐给每个 stash 加一个 message，用于记录版本，使用<code>git stash save</code>取代<code>git stash</code>命令。</p><pre class=" language-shell"><code class="language-shell">$ git statusOn branch masterChanges not staged for commit:  (use "git add <file>..." to update what will be committed)  (use "git restore <file>..." to discard changes in working directory)        modified:   index.htmlno changes added to commit (use "git add" and/or "git commit -a")$ git stash save '改了index的标题'Saved working directory and index state On master: 改了index的标题$ git statusOn branch masternothing to commit, working tree clean$ git stash liststash@{0}: On master: 改了index的标题stash@{1}: WIP on master: e4f060f add readmestash@{2}: WIP on master: e4f060f add readme</code></pre><h2 id="git-stash-apply"><a href="#git-stash-apply" class="headerlink" title="git stash apply"></a>git stash apply</h2><p>git stash apply 用于将缓存堆栈中的 stash 恢复到工作目录中，但并不删除 stash 拷贝。也可以使用<code>git stash apply stash@{1}</code> 指定恢复某个<code>stash</code>，不加参数默认最近的一个 stash，即<code>git stash apply stash@{0}</code></p><pre class=" language-shell"><code class="language-shell">$ git stash liststash@{0}: On master: 改了index的标题stash@{1}: WIP on master: e4f060f add readmestash@{2}: WIP on master: e4f060f add readme$ git stash apply stash@{1}On branch masterChanges not staged for commit:  (use "git add <file>..." to update what will be committed)  (use "git restore <file>..." to discard changes in working directory)        modified:   index.htmlno changes added to commit (use "git add" and/or "git commit -a")</code></pre><h2 id="git-stash-pop"><a href="#git-stash-pop" class="headerlink" title="git stash pop"></a>git stash pop</h2><p>和<code>apply</code>作用类似，这个指令可以将缓存堆栈中的第一个<code>stash</code>删除，并将对应修改应用到当前的工作目录下。</p><pre class=" language-shell"><code class="language-shell">$ git stash liststash@{0}: WIP on master: e4f060f add readmestash@{1}: On master: 改了index的标题stash@{2}: WIP on master: e4f060f add readmestash@{3}: WIP on master: e4f060f add readme$ git stash popOn branch masterChanges not staged for commit:  (use "git add <file>..." to update what will be committed)  (use "git restore <file>..." to discard changes in working directory)        modified:   index.htmlno changes added to commit (use "git add" and/or "git commit -a")Dropped refs/stash@{0} (91bfd4fd55e0e3f90a480dfc5bebe0394a393860)$ git stash liststash@{0}: On master: 改了index的标题stash@{1}: WIP on master: e4f060f add readmestash@{2}: WIP on master: e4f060f add readme</code></pre><h2 id="git-stash-drop"><a href="#git-stash-drop" class="headerlink" title="git stash drop"></a>git stash drop</h2><p>用于移除缓存堆栈中的第一个<code>stash</code>，也可以指定删除某一个<code>stash</code></p><pre class=" language-shell"><code class="language-shell">$ git stash liststash@{0}: WIP on master: e4f060f add readmestash@{1}: On master: 改了index的标题stash@{2}: WIP on master: e4f060f add readmestash@{3}: WIP on master: e4f060f add readme$ git stash dropDropped refs/stash@{0} (22b04ba90a37fb36d5f8e7228e7d8cee324a148b)$ git stash liststash@{0}: On master: 改了index的标题stash@{1}: WIP on master: e4f060f add readmestash@{2}: WIP on master: e4f060f add readme$ git stash drop stash@{2}Dropped stash@{2} (33d9570595f16bc5f4a07247551377e10a0a6ce1)$ git stash  liststash@{0}: On master: 改了index的标题stash@{1}: WIP on master: e4f060f add readme</code></pre><h2 id="git-stash-show"><a href="#git-stash-show" class="headerlink" title="git stash show"></a>git stash show</h2><p>用于查看最近一个或者指定<code>stash</code>的 diff，貌似用到的不多，记录下。<code>git stash show -p</code>可以查看特定<code>stash</code>的全部<code>diff</code>以及更人性化一点，</p><pre class=" language-shell"><code class="language-shell">$ git stash  liststash@{0}: WIP on master: e4f060f add readmestash@{1}: On master: 改了index的标题stash@{2}: WIP on master: e4f060f add readme$ git stash show index.html | 6 +++--- 1 file changed, 3 insertions(+), 3 deletions(-)$ git stash show stash@{2} index.html | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-)$ git stash show -pdiff --git a/index.html b/index.htmlindex 79c2914..47be827 100644--- a/index.html+++ b/index.html@@ -5,9 +5,9 @@......</code></pre><h2 id="git-stash-branch"><a href="#git-stash-branch" class="headerlink" title="git stash branch"></a>git stash branch</h2><p>这条命令会根据最近的 <code>stash</code> 创建一个新的分支，然后删除最近的 <code>stash</code>（和 <code>stash pop</code> 一样）。如果你需要某个 <code>stash</code>，你可以指明 <code>stash id</code>。</p><pre class=" language-shell"><code class="language-shell"># git_learning (master)$ git stashSaved working directory and index state WIP on master: e4f060f add readme# git_learning (master)$ git stash liststash@{0}: WIP on master: e4f060f add readme# git_learning (master)$ git stash branch testbranch# 或者指定id#$ git stash branch testbranch stash@{0}Switched to a new branch 'testbranch'On branch testbranchChanges not staged for commit:  (use "git add <file>..." to update what will be committed)  (use "git restore <file>..." to discard changes in working directory)        modified:   index.htmlno changes added to commit (use "git add" and/or "git commit -a")Dropped refs/stash@{0} (e943a81398f2f01a2d64b227488af67a49b78e57)# git_learning (testbranch)$ git stash list# 无,被删除了</code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>默认情况下，<code>git stash</code>会缓存下列文件：</p><ul><li>添加到暂存区的修改（<code>staged changes</code>）</li><li>Git 跟踪的但并未添加到暂存区的修改（<code>unstaged changes</code>），即<code>git add</code> 但未 <code>git commit</code></li></ul><p>但不会缓存一下文件：</p><ul><li>在工作目录中新的文件（<code>untracked files</code>）</li><li>被忽略的文件（<code>ignored files</code>）</li></ul><p><code>git stash</code>命令提供了参数用于缓存上面两种类型的文件。使用<code>-u</code>或者<code>--include-untracked</code>可以缓存<code>stash untracked</code>文件。使用<code>-a</code>或者<code>--all</code>命令可以 stash 当前目录下的所有修改。</p><h1 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h1><h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><p><code>checkout</code>最常用的用法莫过于对于工作分支的切换了：<br><code>git checkout branchName</code>只是将项目切换到任意分支，不创建分支。<br>除非再<code>git clone</code> 一个新的项目后，因为只会默认在本地创建一个<code>master</code>分支，这个时候想要切换到远程分支的话，一般是创建该分支的本地分支并切换到该分支。</p><pre><code>创建新分支：git branch branchName切换到新分支：git checkout branchName</code></pre><p>但是大多数情况下都是创建分支的时候切换分支。所以以上语句可以合成一句话：<br><code>git checkout -b branchName</code></p><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>要想更深入的了解<code>checkout</code>，我们需要了解<code>checkout</code>的作用机制。该命令的主要关联目标其实是<code>.git</code> 文件夹下的<code>HEAD</code>文件。<br>我们可以看到<code>HEAD</code>头文件是一个引用，指向的是当前的分支，如果变更分支，该<code>HEAD</code>会变更。</p><pre class=" language-shell"><code class="language-shell"># git_learning (master)$ cd .git/# git_learning/.git (GIT_DIR!)$ lsCOMMIT_EDITMSG  description  gitk.cache  hooks/  info/  objects/   refs/config          FETCH_HEAD   HEAD        index   logs/  ORIG_HEAD# git_learning/.git (GIT_DIR!)$ cat HEADref: refs/heads/master# git_learning/.git (GIT_DIR!)$ cd refs/heads/# git_learning/.git/refs/heads (GIT_DIR!)$ ls111  master  new_branch  testbranch# git_learning/.git/refs/heads (GIT_DIR!)$  cat mastere4f060f544371c8adab70af931ba008024bdc2e1# git_learning (master)$ git checkout 111Switched to branch '111'# git_learning (111)$ cat .git/HEADref: refs/heads/111</code></pre><p>……持续记录中 QAQ</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HBase集群搭建过程中容易出现的Bug汇总及解决方案</title>
      <link href="/qfvyux/"/>
      <url>/qfvyux/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>最近在搭建 Hadoop+zookeeper+HBase 集群过程中，HBase 老是出现各种问题，经过不断查看日志文件，找各种解决办法……此时此时，我终于是搭建成功了吼吼吼~值得庆祝一下。以下是我在搭建 HBase 集群过程中出现的问题记录，改天抽空写一下 Hadoop+zookeeper+HBase 的集群搭建。</p><h1 id="hbase-site-xml"><a href="#hbase-site-xml" class="headerlink" title="hbase-site.xml"></a>hbase-site.xml</h1><p>先放一下最后搞定成功的配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 设置HRegionServers共享目录。因为我搭建的是高可用集群，    所以这里的hbase.rootdir值来自hadoop中的hdfs.default的值 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.rootdir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://mycluster/hbase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 启用分布式模式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.cluster.distributed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- master主机的端口号 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.master<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mycluster:60000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 指定Zookeeper集群位置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.zookeeper.quorum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>s201:2181,s202:2181,s203:2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 指定独立Zookeeper安装路径 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.zookeeper.property.dataDir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/home/letttgaco/zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 指定ZooKeeper集群端口 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.zookeeper.property.clientPort<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><h1 id="Bug-汇总"><a href="#Bug-汇总" class="headerlink" title="Bug 汇总"></a>Bug 汇总</h1><p><strong>java.net.UnknownHostException: MyCluster</strong></p><blockquote><p>这是因为，HBase 没有识别 MyCluster 这个集群，解决这个问题的方法是把 Hadoop 的 2 个配置文件（<code>core-site.xml</code>和<code>hdfs-site.xml</code>），放到每个 HBase 的 conf 目录下，让 HBase 能找到 Hadoop 的配置。</p></blockquote><p><strong>zookeeper.MetaTableLocator: Failed verification of hbase:meta,,1 at address xxx</strong></p><blockquote><p>如果你也是集群搭建过程中出现这个问题，请清除 hbase 安装目录下 logs 文件夹以 hbase 开头的所有日志文件，进入 zkCli.sh 客户端，并用<code>rmr /hbase</code>删除所有关于 hbase 的表信息，并用<code>hdfs dfs -rmr /hbase</code>删除所有关于 hbase 的文件，然后参照我的配置文件进行修改，然后集群就好了。</p></blockquote><p><strong>ERROR: org.apache.hadoop.hbase.ipc.ServerNotRunningYetException: Server is not running yet</strong></p><blockquote><p>如果你也是集群搭建过程中出现这个问题，请清除 hbase 安装目录下 logs 文件夹以 hbase 开头的所有日志文件，进入 zkCli.sh 客户端，并用<code>rmr /hbase</code>删除所有关于 hbase 的表信息，并用<code>hdfs dfs -rmr /hbase</code>删除所有关于 hbase 的文件，然后参照我的配置文件进行修改，然后集群就好了。</p></blockquote><p><strong>org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ipc.StandbyException): Operation category READ is not supported in state standby</strong></p><blockquote><p>这是由于启动 hbase 时，namenode 所在节点的主机的 hadoop 状态为 standby（备用）态，hbase master 进程会在启动后自动停掉。我出现这个的原因是：我虽然准备搭建 hbase 集群，但是在<code>hbase-site.xml</code>配置文件中的<code>hbase.rootdir</code>属性中配置的依然是单一某个主机节点的共享目录，导致在 standby 态的主机启动 hbase 坏掉。所以解决方案是参照我的配置文件进行修改，清除 hbase 安装目录下 logs 文件夹以 hbase 开头的所有日志文件，进入 zkCli.sh 客户端，并用<code>rmr /hbase</code>删除所有关于 hbase 的表信息，并用<code>hdfs dfs -rmr /hbase</code>删除所有关于 hbase 的文件，然后重新启动<code>start-hbase.sh</code>。</p></blockquote><p><strong>exception=org.apache.hadoop.hbase.NotServingRegionException: Region hbase:meta,,1 is not online on xxx</strong></p><blockquote><p>即使我已经搭建好的集群，我每次启动还是会报这个错误，但是并不影响正常运行。。。<br>如果你是集群搭建过程中出现这个问题，请清除 hbase 安装目录下 logs 文件夹以 hbase 开头的所有日志文件，进入 zkCli.sh 客户端，并用<code>rmr /hbase</code>删除所有关于 hbase 的表信息，并用<code>hdfs dfs -rmr /hbase</code>删除所有关于 hbase 的文件，然后参照我的配置文件进行修改，然后集群就好了。</p></blockquote><p><strong>org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.fs. PathIsNotEmptyDirectoryException): `/hbase/WALs/xxx-splitting is non empty’: Directory is not empty</strong></p><blockquote><p>我出现的原因是配置文件配错，在 hbase-site.xml 配置文件中的<code>hbase.rootdir</code>属性中配置的依然是单一某个主机节点的共享目录，所以 hbase 只会访问单一节点的 hdfs 的 <code>/hbase/WALs/</code> 目录，导致冲突。解决方案是：请清除 hbase 安装目录下 logs 文件夹以 hbase 开头的所有日志文件，进入 zkCli.sh 客户端，并用<code>rmr /hbase</code>删除所有关于 hbase 的表信息，并用<code>hdfs dfs -rmr /hbase</code>删除所有关于 hbase 的文件，然后参照我的配置文件进行修改，然后集群就好了。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos命令提示符显示完整路径</title>
      <link href="/olp6f6/"/>
      <url>/olp6f6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Linux 下，命令行显示路径仅最后一个文件名，非常不方便， 最近在学大数据的时候才偶然发现这个小细节，简直太省心了，记录一下。</p><h1 id="Centos-命令提示符显示完整路径"><a href="#Centos-命令提示符显示完整路径" class="headerlink" title="Centos 命令提示符显示完整路径"></a>Centos 命令提示符显示完整路径</h1><p>编辑<code>[/etc/profile]</code>文件，在末尾添加环境变量 PS1</p><pre class=" language-shell"><code class="language-shell">export PS1='[\u@\h `pwd`]\$'</code></pre><p>刷新配置文件，使其生效</p><pre class=" language-shell"><code class="language-shell">$> source /etc/profile</code></pre><blockquote><p>命令释义：<br>\u 显示当前用户账号<br>\h 显示当前主机名<br>\W 只显示当前路径最后一个目录<br>\w 显示当前绝对路径（当前用户目录会以 ~代替）<br>pwd 显示当前全路径<br>$ 显示命令行’$’或者’#’符号</p></blockquote><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FvMg0RbCcEOrUnaGLzYP-7n0P77y.png"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot+ActiveMQ+腾讯云SMS</title>
      <link href="/qykfat/"/>
      <url>/qykfat/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在 2018 年学习 Java 的 WEB 开发时，就慢慢变得上瘾起来，不太愿意用视频中给的静态网页来做项目。自己便用不太熟练的 JS 写了个注册网页，然后还用上了邮箱验证码，很喜欢这个网页。但是后来的项目一直用不上，直到最近做一个网站，刚好可以用到之前做的注册网页。就把它用更高级的 Angular JS 改造了一下，并改成了手机短信验证码，感觉更有成就感了！<br>此次开发的短信微服务是利用 SpringBoot 快速搭建 ActiveMQ，因为我的云服务器和域名都在腾讯云，而且腾讯云短信每个月送 100 条短信，对我日常开发测试而言，根本用不完，所以使用腾讯云短信 API 完成发送短信，里面有好多技术都是第一次接触，所以写一下记录下细节。</p><h1 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h1><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FuN9hIJs_P9C-Ybf_nfv6rgLcLFA.png"></p><h1 id="利用-SpringBoot-搭建-ActiveMQ"><a href="#利用-SpringBoot-搭建-ActiveMQ" class="headerlink" title="利用 SpringBoot 搭建 ActiveMQ"></a>利用 SpringBoot 搭建 ActiveMQ</h1><h2 id="创建-Maven-工程-letttgaco-sms-service（注意：打包方式为-jar）"><a href="#创建-Maven-工程-letttgaco-sms-service（注意：打包方式为-jar）" class="headerlink" title="创建 Maven 工程 letttgaco_sms_service（注意：打包方式为 jar）"></a>创建 Maven 工程 letttgaco_sms_service（注意：打包方式为 jar）</h2><p>添加如下依赖至 pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.letttgaco.sms<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>letttgaco_sms_service<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 用Eclipse建SpringBoot项目会默认为jdk1.6 这里调整为jdk1.7 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 起步依赖 SpringBoot核心部分就是依赖传递，它会自动引入WEB开发所需要的所有包，            甚至连tomcat都内置了，所以这也是它搭建如此之快的原因了--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- activtemq 只需要引入这一个依赖，它就会把所有用到的关联jar包都依赖传递过来--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-activemq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 腾讯云短信API --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.qcloudsms<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>qcloudsms<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- springboot热部署 除了改pom文件，其他文件改了都不用重启，简直节省大量时间啊--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h2 id="创建引导类-Application-java"><a href="#创建引导类-Application-java" class="headerlink" title="创建引导类 Application.java"></a>创建引导类 Application.java</h2><p>这个类是程序的入口，启动它就能启动 SpringBoot 容器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>letttgaco<span class="token punctuation">.</span>sms<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment" spellcheck="true">//@SpringBootApplication其实就是以下三个注解的总和</span><span class="token comment" spellcheck="true">//@Configuration： 用于定义一个配置类</span><span class="token comment" spellcheck="true">//@EnableAutoConfiguration ：Spring Boot会自动根据你jar包的依赖来自动配置项目。</span><span class="token comment" spellcheck="true">//@ComponentScan： 告诉Spring 哪个packages 的用注解标识的类 会被spring自动扫描并且装入bean容器。</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="使用腾讯云-SMS-需要准备的信息"><a href="#使用腾讯云-SMS-需要准备的信息" class="headerlink" title="使用腾讯云 SMS 需要准备的信息"></a>使用腾讯云 SMS 需要准备的信息</h2><p>在腾讯云开通短信服务，申请好短信签名和短信模板后，可以将相关配置储存到配置文件 application.properties（直接在 resources 中创建）中。<a href="https://cloud.tencent.com/document/product/382/18071" target="_blank" rel="noopener">点击前往腾讯云短信官方文档</a></p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 短信应用SDK AppID</span>    <span class="token keyword">int</span> appid <span class="token operator">=</span> 1400xxxx<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1400开头</span>    <span class="token comment" spellcheck="true">// 短信应用SDK AppKey</span>    String appkey <span class="token operator">=</span> <span class="token string">"qwertyuiopasdfghjkl123456789"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 需要发送短信的手机号码</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> phoneNumbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"21212313123"</span><span class="token punctuation">,</span> <span class="token string">"12345678902"</span><span class="token punctuation">,</span> <span class="token string">"12345678903"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 短信模板ID，需要在短信应用中申请</span>    <span class="token keyword">int</span> templateId <span class="token operator">=</span> <span class="token number">7839</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NOTE: 这里的模板ID`7839`只是一个示例，真实的模板ID需要在短信控制台中申请</span>    <span class="token comment" spellcheck="true">// 签名</span>    String smsSign <span class="token operator">=</span> <span class="token string">"腾讯云"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NOTE: 签名参数使用的是`签名内容`，而不是`签名ID`。这里的签名"腾讯云"只是一个示例，真实的签名需要在短信控制台申请。</span></code></pre><h2 id="创建腾讯云-SMS-工具类-SmsUtil-java"><a href="#创建腾讯云-SMS-工具类-SmsUtil-java" class="headerlink" title="创建腾讯云 SMS 工具类 SmsUtil.java"></a>创建腾讯云 SMS 工具类 SmsUtil.java</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>letttgaco<span class="token punctuation">.</span>sms<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>json<span class="token punctuation">.</span>JSONException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>env<span class="token punctuation">.</span>Environment<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>qcloudsms<span class="token punctuation">.</span>SmsMultiSender<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>qcloudsms<span class="token punctuation">.</span>SmsMultiSenderResult<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>qcloudsms<span class="token punctuation">.</span>httpclient<span class="token punctuation">.</span>HTTPException<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmsUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//用来读取springboot的配置文件中的内容</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Environment env<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 我只在配置文件中存储了appid和appkey,其他信息我选择从上层传过来     * @param map     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendSms</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//因为我这里只会用到单个手机号，所以用map传输</span>            String phone <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> templateId <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"templateId"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String smsSign <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"smsSign"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//多个手机号可以在数组中填写多个</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> phoneNumbers <span class="token operator">=</span> <span class="token punctuation">{</span>phone<span class="token punctuation">}</span><span class="token punctuation">;</span>            String code <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//我的短信模板是“欢迎注册，{1}为您的验证码,请于5分钟内填写。”</span>            <span class="token comment" spellcheck="true">//{1}对应下面数组中的第一个信息</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> params <span class="token operator">=</span> <span class="token punctuation">{</span> code <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 对应模板中的内容</span>            <span class="token comment" spellcheck="true">//从配置文件中获取信息</span>            <span class="token keyword">int</span> appid <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"appid"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String appkey <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"appkey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SmsMultiSender msender <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SmsMultiSender</span><span class="token punctuation">(</span>appid<span class="token punctuation">,</span>appkey<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 签名参数未提供或者为空时，会使用默认签名发送短信</span>            SmsMultiSenderResult result <span class="token operator">=</span> msender<span class="token punctuation">.</span><span class="token function">sendWithParam</span><span class="token punctuation">(</span><span class="token string">"86"</span><span class="token punctuation">,</span> phoneNumbers<span class="token punctuation">,</span>templateId<span class="token punctuation">,</span> params<span class="token punctuation">,</span> smsSign<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">HTTPException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// HTTP响应码错误</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JSONException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// json解析错误</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 网络IO错误</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="创建消息的消费者-SmsListener-java"><a href="#创建消息的消费者-SmsListener-java" class="headerlink" title="创建消息的消费者 SmsListener.java"></a>创建消息的消费者 SmsListener.java</h2><p>利用 SpringBoot 甚至不用配置 ActiveMQ 的 xml 文件！！！！</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>letttgaco<span class="token punctuation">.</span>sms<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JmsListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 消息的消费端,监听消息 * @author LetTTGACO * */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmsListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> SmsUtil smsUtil<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//destination="sendSms"指消费端会监听名称为sendSms的队列</span>    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination<span class="token operator">=</span><span class="token string">"sendSms"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendSms</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        smsUtil<span class="token punctuation">.</span><span class="token function">sendSms</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="创建消息的生产者"><a href="#创建消息的生产者" class="headerlink" title="创建消息的生产者"></a>创建消息的生产者</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>letttgaco<span class="token punctuation">.</span>user<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jms<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JmsMessagingTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 消息的生产者 * @author LetTTGACO * */</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${templateId}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String templateId<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${smsSign}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String smsSign<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/sendSms"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendSms</span><span class="token punctuation">(</span>String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将短信内容发送给ActiveMQ</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//手机号</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"templateId"</span><span class="token punctuation">,</span> templateId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//签名模板</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"smsSign"</span><span class="token punctuation">,</span> smsSign<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//签名内容</span>        jmsMessagingTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"sendSms"</span><span class="token punctuation">,</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><blockquote><p>注：可以在 application.properties 设置内置 tomcat 的访问端口号，默认为 8080。</p></blockquote><pre class=" language-xml"><code class="language-xml">server.port=9080</code></pre><h2 id="启动-Application-java"><a href="#启动-Application-java" class="headerlink" title="启动 Application.java"></a>启动 Application.java</h2><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fog02flc86lD33GHFiEu9v_zJOA3.png"></p><h2 id="打开浏览器"><a href="#打开浏览器" class="headerlink" title="打开浏览器"></a>打开浏览器</h2><p>输入<code>http://localhost:9080/sendSms?phone=13333333333</code><br>消息产生过程：</p><ol><li>浏览器访问到控制层 sendSms()方法产生消息，并推送给 ActiveMQ。</li><li>消费者监听消息，接收 ActiveMQ 的消息，执行发送短信的任务。</li><li>手机收到短信</li></ol><hr><p>至此，短信微服务搭建成功！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在腾讯云服务器上安装FastDFS</title>
      <link href="/di6uo5/"/>
      <url>/di6uo5/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>FastDFS 是一个由 C 语言实现的开源轻量级分布式文件系统，作者余庆<a href="https://github.com/happyfish100" target="_blank" rel="noopener">@YuQing</a>，支持 Linux、FreeBSD、AID 等 Unix 系统，解决了大数据存储和读写负载均衡等问题，适合存储 4KB~500MB 之间的小文件，如图片网站、短视频网站、文档、app 下载站等，UC、京东、支付宝、迅雷、酷狗等都有使用。</p><h1 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h1><p>我的云服务器为腾讯云服务器，系统为 CentOS7.2(64 位)，自带 50G 系统盘。</p><h1 id="安装-FastDFS"><a href="#安装-FastDFS" class="headerlink" title="安装 FastDFS"></a>安装 FastDFS</h1><h2 id="上传安装包"><a href="#上传安装包" class="headerlink" title="上传安装包"></a>上传安装包</h2><p>此次用到的安装包如图所示，我们首先用 FTP 工具把 FastDFS(<a href="https://files.letttgaco.cn/%E6%8A%80%E6%9C%AF%E6%94%AF%E6%8C%81/FastDFS/" target="_blank" rel="noopener">点击下载安装包</a>)的相关安装包上传至服务器的<code>/usr/local/fastDFS</code>目录中（也可以自行选择目录，后面在涉及到修改配置文件时会进一步提示说明）。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FkE5rj279Cvl3LbMB_DJYk2RngXz.png"></p><h2 id="安装基本环境"><a href="#安装基本环境" class="headerlink" title="安装基本环境"></a>安装基本环境</h2><pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> libevent</code></pre><h2 id="安装-libfastcommonV1-0-7-工具包"><a href="#安装-libfastcommonV1-0-7-工具包" class="headerlink" title="安装 libfastcommonV1.0.7 工具包"></a>安装 libfastcommonV1.0.7 工具包</h2><pre class=" language-shell"><code class="language-shell">tar -zxvf libfastcommonV1.0.7.tar.gz</code></pre><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FsdzrHlXifm-5OLROOVcI9lD5LFr.png"><br>进入解压后的目录，看到有<code>make.sh</code>，依次执行命令进行编译。</p><pre class=" language-shell"><code class="language-shell">./make.sh./make.sh install</code></pre><h2 id="安装-Tracker-服务"><a href="#安装-Tracker-服务" class="headerlink" title="安装 Tracker 服务"></a>安装 Tracker 服务</h2><pre class=" language-shell"><code class="language-shell">tar -zxvf FastDFS_v5.05.tar.gz</code></pre><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FmOIOgqOQC9FHt5BgyHmbWx-U0V4.png"><br>进入文件夹后依次执行命令进行编译:</p><pre><code>./make.sh./make.sh install</code></pre><p>安装后文件会默认安装在 <code>/usr/bin</code> 中:</p><pre class=" language-shell"><code class="language-shell">ll fdfs*</code></pre><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FkK9aFMO6c-ObfXU-ycwXGHjYdpZ.png"><br>配置文件在 <code>/etc/fdfs</code>目录中：<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FhrI3hIFJ8foQNPx8ABpsubI6czd.png"><br>进入<code>/usr/locla/fastDFS/FastDFS/conf/</code>目录下:</p><pre class=" language-shell"><code class="language-shell">cd /usr/locla/fastDFS/FastDFS/conf/</code></pre><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Ft_6D_Sum6zcqguKCsgqyZkGR55u.png"><br>将其所有文件拷贝至<code>/etc/fdfs</code>目录下:</p><pre class=" language-shell"><code class="language-shell">cp * /etc/fdfs/</code></pre><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fpp-KKucvQ0k4StdihuBMBiNy5tS.png"><br>配置 tracker 服务,进入<code>/etc/fdfs/</code>目录下，修改<code>tracker.conf</code>文件</p><pre><code>cd /etc/fdfs/vim tracker.conf</code></pre><p>修改<code>base_path</code>为自定义存放 tracker 日志的目录，这里以<code>/usr/local/fastDFS/trackerLog</code>为例，如果没有创建此目录，可以先修改再创建。</p><pre class=" language-shell"><code class="language-shell">mkdir -p /usr/local/fastDFS/trackerLog</code></pre><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FgFsdQi4cLCu3T8GNtc9ocaV2Lsa.png"></p><blockquote><p>这里我们也可以挂载的一个云硬盘，使用云硬盘的目录来存放文件。因为系统盘不支持扩容，以后系统盘满了之后就很麻烦，所以最好就挂载一个硬盘，同时也可以把图片文件都和系统盘给区分开来。我暂时没有云硬盘，这里以系统盘为例。</p></blockquote><p>启动 tracker 服务并查看进程是否已启动</p><pre class=" language-shell"><code class="language-shell">/usr/bin/fdfs_trackerd /etc/fdfs/tracker.confps aux|grep trackerd</code></pre><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FvsnkbcyAZDXpPAK80qHJMg4KmbV.png"></p><h2 id="安装-storage-服务"><a href="#安装-storage-服务" class="headerlink" title="安装 storage 服务"></a>安装 storage 服务</h2><p>进入<code>/etc/fdfs/</code>目录，修改<code>storage.conf</code>文件</p><pre class=" language-shell"><code class="language-shell">vim /etc/fdfs/storage.conf</code></pre><p>修改日志的存储路径，如果没有相关文件夹，可以先配置再创建：</p><pre class=" language-shell"><code class="language-shell">mkdir -p /usr/local/fastDFS/storageLog/</code></pre><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FgMRz4vFcRLt6Yuzjbz7j-waqKpr.png"><br>修改文件的存储路径：</p><pre class=" language-shell"><code class="language-shell">mkdir -p /usr/local/fastDFS/storage/</code></pre><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FlHxWq8zj_6HMJ9oGtHSvVJRiNTH.png"><br>修改<code>tracker_server</code> 的值为云服务器的公网 IP 地址。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FqdDOPng1Knm-yUIQ7xk7TTYYkzp.png"><br>启动 storage 服务并且查看进程：</p><pre class=" language-shell"><code class="language-shell">/usr/bin/fdfs_storaged /etc/fdfs/storage.confps aux|grep storage</code></pre><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FuUOP7TYURf1b0SGA0I8lw2-aWP5.png"><br>至此，FastDFS 安装完毕，但是我们需要通过 http 来进行上传文件并访问，所以需要使用 nginx 一起来搞事情！</p><h2 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h2><p>进入<code>/usr/local/fastDFS</code>目录，解压缩 fastdfs-nginx-module_v1.16.tar.gz</p><pre class=" language-shell"><code class="language-shell">tar -zxvf fastdfs-nginx-module_v1.16.tar.gz</code></pre><p>修改<code>/fastdfs-nginx-module/src/config</code>文件，把其中的<code>local</code>去掉:</p><pre class=" language-shell"><code class="language-shell">cd fastdfs-nginx-module/src/vim config</code></pre><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fpn_4GFMu67gkrkbjguR3D_Wv8wk.png"><br>创建默认的 nginx 的安装目录：</p><pre class=" language-shell"><code class="language-shell">mkdir /usr/local/nginx/</code></pre><p>进入 nginx 根目录进行配置：</p><pre class=" language-shell"><code class="language-shell">cd /usr/local/fastDFS/nginx-1.14.2/</code></pre><p>直接输入以下命令对 nginx 进行配置:</p><blockquote><p><strong>注意：最后一行</strong><code>**--add-module=/usr/local/fastDFS/nginx/fastdfs-nginx-module/src**</code><strong>的目录为你所指定的</strong><code>**fastdfs-nginx-module**</code><strong>的安装目录</strong></p></blockquote><pre class=" language-shell"><code class="language-shell">./configure \--prefix=/usr/local/nginx \--pid-path=/var/run/nginx/nginx.pid \--lock-path=/var/lock/nginx.lock \--error-log-path=/var/log/nginx/error.log \--http-log-path=/var/log/nginx/access.log \--with-http_gzip_static_module \--http-client-body-temp-path=/var/temp/nginx/client \--http-proxy-temp-path=/var/temp/nginx/proxy \--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \--http-scgi-temp-path=/var/temp/nginx/scgi \--add-module=/usr/local/fastDFS/nginx/fastdfs-nginx-module/src</code></pre><p>依次执行以下命令进行编译：</p><pre class=" language-shell"><code class="language-shell">makemake install</code></pre><p>把<code>/fastdfs-nginx-module/src/mod_fastdfs.conf</code>文件复制到<code>/etc/fdfs</code>目录下：</p><pre class=" language-shell"><code class="language-shell">cd /usr/local/fastDFS/nginx/fastdfs-nginx-module/src/cp mod_fastdfs.conf /etc/fdfs</code></pre><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FjpdNBhF1UuvL220TgU3QmOAl0om.png"><br>进入<code>/etc/fdfs/</code>，打开<code>mod_fastdfs.conf</code>并且修改日志存放路径：</p><pre class=" language-shell"><code class="language-shell">mkdir -p /usr/local/fastDFS/tmp/cd /etc/fdfs/vim mod_fastdfs.conf</code></pre><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FsN-jzgb1YirBjLLzIRynMvHejQr.png"><br>修改<code>tracker_server</code> 的值为云服务器的公网 IP 地址。<br><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/FuDEiHiYTUwJ36U_ew5JSBSuhKy8.png"><br>修改<code>storage_path0</code>的存放路径：</p><pre class=" language-shell"><code class="language-shell">mkdir -p /usr/local/fastDFS/storage/</code></pre><p><img src="https://blogimagesrep-1257180516.cos.ap-guangzhou.myqcloud.com/blog-images/Fv9UGEgECG4OHnCNMcDO-kg1SQq9.png"><br>进入 ngxin 的配置文件目录并且修改<code>nginx.conf</code>文件：</p><pre class=" language-shell"><code class="language-shell">cd /usr/local/nginx/conf/vim nginx.conf</code></pre><p>修改原 server 中的配置为以下：</p><pre><code>server {  listen       80;  server_name  你的公网IP地址;  location /group1/M00 {  ngx_fastdfs_module;  }}</code></pre><p>启动 nginx</p><pre class=" language-shell"><code class="language-shell">/usr/local/nginx/sbin/nginx</code></pre><h2 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h2><p>至此，FastDFS 已全部安装完成，下面将介绍如何利用 java 开发工具来测试 FastDFS 的上传文件功能。</p><h1 id="上传测试"><a href="#上传测试" class="headerlink" title="上传测试"></a>上传测试</h1><p>需求：将本地图片上传至图片服务器，再控制台打印 url。</p><h2 id="创建-Maven-工程-FastDFSTest"><a href="#创建-Maven-工程-FastDFSTest" class="headerlink" title="创建 Maven 工程 FastDFSTest"></a>创建 Maven 工程 FastDFSTest</h2><p>由于 FastDFS 客户端 jar 包并没有在中央仓库中，所以需要使用下列命令手动安装 jar 包到 Maven 本地仓库。<br>源码地址：<a href="https://github.com/happyfish100/fastdfs-client-java" target="_blank" rel="noopener">fastdfs-client-java</a>，解压后导入 Eclipse 的 Maven 工程，右键项目选择<code>Run As — Maven Install</code>进行本地仓库的安装。<br>在你的<code>FastDFSTest</code>工程的<code>pom.xml</code>中添加依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.csource<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastdfs-client-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.27-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="在-resources-文件夹中创建fdfs-client-conf文件"><a href="#在-resources-文件夹中创建fdfs-client-conf文件" class="headerlink" title="在 resources 文件夹中创建fdfs_client.conf文件"></a>在 resources 文件夹中创建<code>fdfs_client.conf</code>文件</h2><pre class=" language-shell"><code class="language-shell"># 连接超时时间# 默认30sconnect_timeout=30# 网络超时时间# 默认30秒30snetwork_timeout=60# 工作文件夹，日志存在此（目录自定）base_path=/home/yuqing/fastdfs# tracer server服务器地址列表，多个tracer server的话，分行列出tracker_server=你的公网IP:22122#日志级别### emerg for emergency### alert### crit for critical### error### warn for warning### notice### info### debulog_level=info# 是否使用连接池use_connection_pool = false# 连接闲置超时时间，连接如果闲置的时间超过本配置，则关闭次连接，单位秒connection_pool_max_idle_time = 3600# 是否从tracer server读取fastdfs的参数，默认为falseload_fdfs_parameters_from_tracker=false# 是否使用storage id 替换 ip，默认为false# 和tracker.conf该参数含义一样# 本配置只有在load_fdfs_parameters_from_tracker＝false时生效# 本配置默认为falseuse_storage_id = false# 指定storage id的文件名，允许使用绝对路径# 和tracker.conf该参数含义一样# 本配置只有在load_fdfs_parameters_from_tracker＝false时生效storage_ids_filename = storage_ids.conf#HTTP settingshttp.tracker_server_port=8080#引入HTTP相关配置##include http.conf</code></pre><h2 id="创建测试-java-类"><a href="#创建测试-java-类" class="headerlink" title="创建测试 java 类"></a>创建测试 java 类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>letttgaco<span class="token punctuation">.</span>fastdfs<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>csource<span class="token punctuation">.</span>fastdfs<span class="token punctuation">.</span>ClientGlobal<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>csource<span class="token punctuation">.</span>fastdfs<span class="token punctuation">.</span>StorageClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>csource<span class="token punctuation">.</span>fastdfs<span class="token punctuation">.</span>StorageServer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>csource<span class="token punctuation">.</span>fastdfs<span class="token punctuation">.</span>TrackerClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>csource<span class="token punctuation">.</span>fastdfs<span class="token punctuation">.</span>TrackerServer<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1、加载配置文件（绝对路径），配置文件中的内容就是 tracker 服务的地址。</span>        ClientGlobal<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token string">"D:/Codes/Eclipse/Tiramisu/spring-security-demo/src/main/resources/fdfs_client.conf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2、创建一个 TrackerClient 对象。直接 new 一个。</span>        TrackerClient trackerClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrackerClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3、使用 TrackerClient 对象创建连接，获得一个 TrackerServer 对象。</span>        TrackerServer trackerServer <span class="token operator">=</span> trackerClient<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4、创建一个 StorageServer 的引用，值为 null</span>        StorageServer storageServer <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5、创建一个 StorageClient 对象，需要两个参数 TrackerServer 对象、StorageServer 的引用</span>        StorageClient storageClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StorageClient</span><span class="token punctuation">(</span>trackerServer<span class="token punctuation">,</span> storageServer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 6、使用 StorageClient 对象上传图片（绝对路径）。</span>        <span class="token comment" spellcheck="true">// 扩展名不带“.”</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> storageClient<span class="token punctuation">.</span><span class="token function">upload_file</span><span class="token punctuation">(</span><span class="token string">"D:/Codes/TestCodes/c.JPG"</span><span class="token punctuation">,</span> <span class="token string">"jpg"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 7、返回数组。包含组名和图片的路径。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String string <span class="token operator">:</span> strings<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>控制台输出如下结果：</p><pre class=" language-java"><code class="language-java">group1M00<span class="token operator">/</span><span class="token number">00</span><span class="token operator">/</span><span class="token number">00</span><span class="token operator">/</span>wKgZhVkMP4KAZEy<span class="token operator">-</span>AAA<span class="token operator">-</span>tCf93Fo973<span class="token punctuation">.</span>jpg</code></pre><h2 id="打开浏览器查看已上传的图片"><a href="#打开浏览器查看已上传的图片" class="headerlink" title="打开浏览器查看已上传的图片"></a>打开浏览器查看已上传的图片</h2><pre class=" language-shell"><code class="language-shell">http://你的公网IP/group1/M00/00/00/wKgZhVkMP4KAZEy-AAA-tCf93Fo973.jpg</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security安全框架入门</title>
      <link href="/fh1na3/"/>
      <url>/fh1na3/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>Spring Security 是一个能够为基于 Spring 的企业应用系统提供声明式的安全访问控制解决方案的安全框架。它提供了一组可以在 Spring 应用上下文中配置的 Bean，充分利用了 Spring IOC（Inversion of Control 控制反转），DI（Dependency Injection 依赖注入）和 AOP（Aspect Oriented Programming 面向切面编程）功能，为应用系统提供声明式的安全访问控制功能，减少了为企业系统安全控制编写大量重复代码的工作。</p><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><p>在 spring framework 常规依赖的基础上添加以下依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-security-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee                        http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- security安全框架 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:spring-security.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>            org.springframework.web.context.ContextLoaderListener        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>springSecurityFilterChain<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>            org.springframework.web.filter.DelegatingFilterProxy        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>springSecurityFilterChain<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><h2 id="spring-security-xml-静态设置账号密码"><a href="#spring-security-xml-静态设置账号密码" class="headerlink" title="spring-security.xml(静态设置账号密码)"></a>spring-security.xml(静态设置账号密码)</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">beans:</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/security<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>beans</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans.xsd    http://www.springframework.org/schema/security    http://www.springframework.org/schema/security/spring-security.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 以下页面不被拦截 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login.html<span class="token punctuation">"</span></span> <span class="token attr-name">security</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 页面拦截规则 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http</span> <span class="token attr-name">use-expressions</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- intercept-url表示需要拦截的 --></span>        <span class="token comment" spellcheck="true">&lt;!-- /**表示拦截所有,access中必须以"ROLE_"开头,后面的是自定的用户--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intercept-url</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span> <span class="token attr-name">access</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ROLE_TEST<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--            login-page：指定登录页面。            authentication-failure-url：指定了身份验证失败时跳转到的页面。            default-target-url：指定了成功进行身份验证和授权后默认呈现给用户的页面。         --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form-login</span> <span class="token attr-name">login-page</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login.html<span class="token punctuation">"</span></span> <span class="token attr-name">default-target-url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/index.html<span class="token punctuation">"</span></span> <span class="token attr-name">authentication-failure-url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/error.html<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 关闭CSRF,如果不加会出现错误 --></span>        <span class="token comment" spellcheck="true">&lt;!-- CSRF（Cross-site request forgery）跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>csrf</span> <span class="token attr-name">disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 如果你在系统中使用了框架页，需要设置框架页的策略为SAMEORIGIN --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>headers</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frame-options</span> <span class="token attr-name">policy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SAMEORIGIN<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>headers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 认证管理器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>authentication-manager</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>authentication-provider</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user-service</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 为方便测试,将账号密码固定了 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>admin<span class="token punctuation">"</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span> <span class="token attr-name">authorities</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ROLE_TEST<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user-service</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>authentication-provider</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>authentication-manager</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">beans:</span>beans</span><span class="token punctuation">></span></span></code></pre><h2 id="动态从数据库中获取账号密码"><a href="#动态从数据库中获取账号密码" class="headerlink" title="动态从数据库中获取账号密码"></a>动态从数据库中获取账号密码</h2><h3 id="创建-UserDetailsServiceImpl-java-并实现-UserDetailsService-接口"><a href="#创建-UserDetailsServiceImpl-java-并实现-UserDetailsService-接口" class="headerlink" title="创建 UserDetailsServiceImpl.java 并实现 UserDetailsService 接口"></a>创建 UserDetailsServiceImpl.java 并实现 UserDetailsService 接口</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>letttgaco<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>GrantedAuthority<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>authority<span class="token punctuation">.</span>SimpleGrantedAuthority<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span>UserDetails<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span>UserDetailsService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span>UsernameNotFoundException<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>letttgaco<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>LoginUser<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDetailServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> SellerService sellerService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSellerService</span><span class="token punctuation">(</span>SellerService sellerService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sellerService <span class="token operator">=</span> sellerService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserDetails <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token keyword">throws</span> UsernameNotFoundException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过UserDetailServiceImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 构建角色列表</span>        List<span class="token operator">&lt;</span>GrantedAuthority<span class="token operator">></span> grantAuths <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>GrantedAuthority<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加角色</span>        grantAuths<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span><span class="token string">"ROLE_SELLER"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//得到用户对象</span>        LoginUser user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 返回具有一定角色对象的用户对象</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> grantAuths<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="spring-security-xml"><a href="#spring-security-xml" class="headerlink" title="spring-security.xml"></a>spring-security.xml</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">beans:</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/security<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>beans</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>dubbo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://code.alibabatech.com/schema/dubbo<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans.xsd    http://www.springframework.org/schema/security    http://www.springframework.org/schema/security/spring-security.xsd    http://code.alibabatech.com/schema/dubbo    http://code.alibabatech.com/schema/dubbo/dubbo.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 设置不登录也可以访问的页面 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/*.html<span class="token punctuation">"</span></span> <span class="token attr-name">security</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/css/**<span class="token punctuation">"</span></span> <span class="token attr-name">security</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/img/**<span class="token punctuation">"</span></span> <span class="token attr-name">security</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/**<span class="token punctuation">"</span></span> <span class="token attr-name">security</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 放开用户注册入口 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user/register.do<span class="token punctuation">"</span></span> <span class="token attr-name">security</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 页面拦截规则 use-expressions:是否启用SPEL表达式,默认为true --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http</span> <span class="token attr-name">use-expressions</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 当前用户必须有ROLE_USER的角色才可访问根目录及所属子目录的资源 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intercept-url</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span> <span class="token attr-name">access</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ROLE_SELLER<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 开启表单登录功能 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form-login</span> <span class="token attr-name">login-page</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login.html<span class="token punctuation">"</span></span>            <span class="token attr-name">default-target-url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/index.html<span class="token punctuation">"</span></span> <span class="token attr-name">authentication-failure-url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login.html<span class="token punctuation">"</span></span>            <span class="token attr-name">always-use-default-target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 关闭csrf --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>csrf</span> <span class="token attr-name">disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置策略,使用框架页面 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>headers</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frame-options</span> <span class="token attr-name">policy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SAMEORIGIN<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>headers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logout</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 添加认证类 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">beans:</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDetailService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.letttgaco.service.UserDetailServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">beans:</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">beans:</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">beans:</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 认证管理器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>authentication-manager</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 认证的提供者 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>authentication-provider</span> <span class="token attr-name">user-service-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDetailService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>authentication-manager</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">beans:</span>beans</span><span class="token punctuation">></span></span></code></pre><p>通过以上配置，用户在登陆页输入用户名和密码与数据库一致即可登陆。<br>[</p><p>](<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener">http://creativecommons.org/licenses/by-nc-sa/4.0/</a>)</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解式配置dubbo服务</title>
      <link href="/oelsu8/"/>
      <url>/oelsu8/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>之前在做项目时一直用的都是 dubbo 的 xml 配置，在调试时未防止连接超时，一般会在 xml 中设置超时时间，但是最近的项目试了下 dubbo 的注解配置，但是一时半会没找到利用注解配置来设置超时时间，于是找了找资料，整理出常用的 dubbo 的配置文件以及注解配置设置超时时间等属性。</p><h1 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h1><h2 id="applicationContext-service-xml-配置文件"><a href="#applicationContext-service-xml-配置文件" class="headerlink" title="applicationContext-service.xml 配置文件"></a>applicationContext-service.xml 配置文件</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>dubbo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://code.alibabatech.com/schema/dubbo<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd        http://code.alibabatech.com/schema/dubbo        http://code.alibabatech.com/schema/dubbo/dubbo.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--发布dubbo服务 --></span>    <span class="token comment" spellcheck="true">&lt;!--提供方应用信息,用于计算依赖关系--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>application</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tiramisu-sellergoods-service<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--注册中心的地址--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>registry</span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zookeeper<span class="token punctuation">"</span></span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx.xxx.xxx.xxx:2181<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--用于dubbo协议在20881端口暴露服务--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>protocol</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dubbo<span class="token punctuation">"</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20881<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置dubbo注解扫描包路径--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>annotation</span> <span class="token attr-name">package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.tiramisu.sellergoods.service.impl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h2 id="Service-实现类"><a href="#Service-实现类" class="headerlink" title="@Service 实现类"></a>@Service 实现类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意不是springframework的service</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TiramisuServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TiramisuService</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h1 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h1><h2 id="springmvc-xml-配置文件"><a href="#springmvc-xml-配置文件" class="headerlink" title="springmvc.xml 配置文件"></a>springmvc.xml 配置文件</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>dubbo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://code.alibabatech.com/schema/dubbo<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd        http://code.alibabatech.com/schema/dubbo        http://code.alibabatech.com/schema/dubbo/dubbo.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引用dubbo服务 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>application</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tiramisu-manager-web<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--注册中心的地址--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>registry</span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zookeeper://xxx.xxx.xxx.xxx:2181<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置dubbo注解扫描包路径--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>annotation</span> <span class="token attr-name">package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.letttgaco.manager.controller<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h2 id="Reference-注解"><a href="#Reference-注解" class="headerlink" title="@Reference 注解"></a>@Reference 注解</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Reference<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BrandController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//使用dubbo提供的reference注解，引用dubbo服务</span>    <span class="token annotation punctuation">@Reference</span>    <span class="token keyword">private</span> TiramisuService tiramisuService<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Service-和-Reference-的属性配置"><a href="#Service-和-Reference-的属性配置" class="headerlink" title="@Service 和@Reference 的属性配置"></a>@Service 和@Reference 的属性配置</h2><p>在平时测试过程中，由于 dubbo 默认的超时时间为 5000 毫秒，无法很方便的进行测试，容易报超时异常，而在以前的 xml 配置 dubbo 时，经常这样配置客户端的超时时间：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--设置超时时间为30秒--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.letttgaco.order.service.OrderService<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>但是现在用的是 dubbo 的注解形式，设置注解形式的超时时间是直接在注解中声明的：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//都要设置超时时间为30秒</span><span class="token comment" spellcheck="true">//服务提供方</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">300000</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//服务消费者</span><span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">300000</span><span class="token punctuation">)</span></code></pre><p>当然还有更多的属性都可以设置，如果有需要的可以研究下。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis分页插件警告解决办法</title>
      <link href="/ywdq07/"/>
      <url>/ywdq07/</url>
      
        <content type="html"><![CDATA[<p>在使用<code>springmvc+mybatis</code>分页插件<code>pagehelper</code>时，只在业务层引用了 mybatis 的分页插件的 jar 包而表现层接收时没有引用，会报这样的警告：</p><pre class=" language-java"><code class="language-java">警告<span class="token operator">:</span> Hessian<span class="token operator">/</span>Burlap<span class="token operator">:</span> <span class="token string">'com.github.pagehelper.Page'</span> is an unknown <span class="token keyword">class</span> <span class="token class-name">in</span> WebappClassLoadercontext<span class="token operator">:</span>delegate<span class="token operator">:</span> <span class="token boolean">false</span>repositories<span class="token operator">:</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span> Parent Classloader<span class="token operator">:</span>ClassRealm<span class="token punctuation">[</span>plugin<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>maven<span class="token operator">:</span>tomcat7<span class="token operator">-</span>maven<span class="token operator">-</span>plugin<span class="token operator">:</span><span class="token number">2.2</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ClassNotFoundException<span class="token operator">:</span> com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>pagehelper<span class="token punctuation">.</span>Page</code></pre><p>解决办法：<code>mybatis</code>的分页<code>pagehelper</code>插件依赖于<code>mybatis</code>的相关 jar 包，因此解决办法是在表现层同时加入分页<code>pagehelper</code>的<code>jar</code>包和<code>mybatis</code>的相关 jar 包，如下:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.miemiedev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-paginator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
