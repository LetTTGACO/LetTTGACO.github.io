import{_ as s,c as i,o as a,V as t}from"./chunks/framework.qmJTxtaM.js";const c=JSON.parse('{"title":"Front Matter","description":"","frontmatter":{"sort":210,"urlname":"raqyleng501h23p1","catalog":"进阶玩法","tags":"Elog-Docs","title":"Front Matter","date":"2023-04-06 21:31:00","updated":"2024-09-22 23:56:00"},"headers":[],"relativePath":"notion/raqyleng501h23p1.md","filePath":"notion/raqyleng501h23p1.md","lastUpdated":1740154626000}'),n={name:"notion/raqyleng501h23p1.md"},l=t(`<h1 id="front-matter" tabindex="-1">Front Matter <a class="header-anchor" href="#front-matter" aria-label="Permalink to &quot;Front Matter&quot;">​</a></h1><p>Elog 会将用户自定义的 <code>front matter</code> 和 <strong>预定义属性</strong>合并后，输出新的带有 <code>front matter</code> 的 Markdown 文档。 任何包含 <code>YAML front matter</code> 的 Markdown 文件都将由 <a href="https://www.npmjs.com/package/front-matter" target="_blank" rel="noreferrer">front-matter</a> 处理。<code>front matter</code> 必须是 Markdown 文件中的第一部分，Elog只支持在三点划线之间书写的有效的 YAML。 这是一个基本的例子：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>---</span></span>
<span class="line"><span>title: Blogging with Elog</span></span>
<span class="line"><span>classify: 关于Elog</span></span>
<span class="line"><span>description: 描述</span></span>
<span class="line"><span>cover_img: https://example.com/test.jpg</span></span>
<span class="line"><span>tags:</span></span>
<span class="line"><span>- Blog</span></span>
<span class="line"><span>- CI/CD</span></span>
<span class="line"><span>---</span></span></code></pre></div><p>如果需要生成的 markdown 文件具有 <code>front matter</code>，需要在配置文件中配置<code>deploy.local.frontMatter.enable=true</code></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deploy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;local&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      outputDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./docs/feishu&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      filename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;markdown&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      frontMatter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        enable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只输出include包含的属性</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        exclude</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不输出exclude包含的属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span></code></pre></div><blockquote><p>手动在指定文档的 <code>YAML front matter</code> <strong>适用于语雀和飞书</strong>，Notion/FlowUs 可以直接添加数据库属性，不需要在文档中手动指定。</p></blockquote><h2 id="预定义属性" tabindex="-1">预定义属性 <a class="header-anchor" href="#预定义属性" aria-label="Permalink to &quot;预定义属性&quot;">​</a></h2><p>Elog 预设置了一些常用的属性，会在启用<code>front matter</code> 时默认下生成包含这些属性的 <code>markdown</code> 文档。</p><h3 id="语雀预设" tabindex="-1">语雀预设 <a class="header-anchor" href="#语雀预设" aria-label="Permalink to &quot;语雀预设&quot;">​</a></h3><blockquote><p>可通过在文档顶部指定<code>YAML front matter</code>来覆盖原有属性或增加你想要的属性</p></blockquote><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>title</td><td>string</td><td>文章标题</td></tr><tr><td>urlname</td><td>string</td><td>语雀 slug</td></tr><tr><td>date</td><td>YYYY-MM-DD HH:mm:ss</td><td>创建时间</td></tr><tr><td>updated</td><td>YYYY-MM-DD HH:mm:ss</td><td>更新时间</td></tr><tr><td>cover</td><td>string</td><td>封面图，可在语雀文档设置中配置。<strong>但由于语雀防盗链，不一定能正常访问，可通过自定义文档处理器解决</strong></td></tr><tr><td>tags</td><td>string[]</td><td>标签，可在语雀文档设置中配置，<strong>仅支持 语雀 token 模式，账号密码模式下语雀不会返回此属性</strong></td></tr><tr><td>description</td><td>string</td><td>文章摘要，可在语雀文档设置中配置</td></tr></tbody></table><h3 id="飞书预设" tabindex="-1">飞书预设 <a class="header-anchor" href="#飞书预设" aria-label="Permalink to &quot;飞书预设&quot;">​</a></h3><blockquote><p>可通过在文档顶部指定<code>YAML front matter</code>来覆盖原有属性或增加你想要的属性</p></blockquote><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>title</td><td>string</td><td>文章标题</td></tr><tr><td>urlname</td><td>string</td><td>url 名称</td></tr><tr><td>date</td><td>YYYY-MM-DD HH:mm:ss</td><td>创建时间</td></tr><tr><td>updated</td><td>YYYY-MM-DD HH:mm:ss</td><td>更新时间</td></tr></tbody></table><h3 id="notion-预设" tabindex="-1">Notion 预设 <a class="header-anchor" href="#notion-预设" aria-label="Permalink to &quot;Notion 预设&quot;">​</a></h3><blockquote><p>可通过在数据库新增字段来覆盖原有属性或增加你想要的属性</p></blockquote><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>title</td><td>string</td><td>文章标题</td></tr><tr><td>urlname</td><td>string</td><td>url 名称</td></tr><tr><td>date</td><td>YYYY-MM-DD HH:mm:ss</td><td>创建时间</td></tr><tr><td>updated</td><td>YYYY-MM-DD HH:mm:ss</td><td>更新时间</td></tr><tr><td>cover</td><td>string</td><td>文档头部封面图，<strong>但由于Notion 图片存在有效期，过期后不能正常展示，可通过自定义文档处理器解决</strong></td></tr></tbody></table><h3 id="flowus-预设" tabindex="-1">FlowUs 预设 <a class="header-anchor" href="#flowus-预设" aria-label="Permalink to &quot;FlowUs 预设&quot;">​</a></h3><blockquote><p>可通过在数据库新增字段来覆盖原有属性或增加你想要的属性</p></blockquote><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>title</td><td>string</td><td>文章标题</td></tr><tr><td>urlname</td><td>string</td><td>url 名称</td></tr><tr><td>date</td><td>YYYY-MM-DD HH:mm:ss</td><td>创建时间</td></tr><tr><td>updated</td><td>YYYY-MM-DD HH:mm:ss</td><td>更新时间</td></tr><tr><td>cover</td><td>string</td><td>文档头部封面图，<strong>但由于FlowUs防盗链， 不能正常访问，可通过自定义文档处理器解决</strong></td></tr></tbody></table><h3 id="cover-字段说明" tabindex="-1">cover 字段说明 <a class="header-anchor" href="#cover-字段说明" aria-label="Permalink to &quot;cover 字段说明&quot;">​</a></h3><p>以上写作平台，如果配置了封面图，虽然都默认返回了 cover 字段，但基本都不能正常使用。</p><p>Elog 返回 <code>cover</code> 字段的意义在于：用户可以通过自定义文档适配器，将其下载到本地/上传到图床后使用。</p><p>如果你不需要这个字段，可在通过 <code>exclude</code> 字段进行屏蔽，例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deploy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;local&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    outputDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./docs/flowus&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    filename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;urlname&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;markdown&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    formatExt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    frontMatter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      enable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      exclude</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cover&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 文档属性排除 cover 字段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div><h2 id="自定义输出-front-matter" tabindex="-1">自定义输出 Front Matter <a class="header-anchor" href="#自定义输出-front-matter" aria-label="Permalink to &quot;自定义输出 Front Matter&quot;">​</a></h2><p>如需自定义输出文档的<code>Front Matter</code>，例如将文档属性中的图片上传到图床，或下载到本地后对其进行路径替换。</p><p>你可以通过自定义文档处理适配器来处理类似问题，详见 <a href="/notion/deploy-platform#formatext-字段说明">部署平台</a></p><p>示例如下：</p><p>利用<code>imageClient</code>实例将图片上传到图床，但它不一定有值，需要满足以下条件，二选一即可</p><ul><li>开启图床，Elog 配置文件中<code>image.enable=true</code></li><li>不开启图床，但配置文件中<code>image.enablForExt=true</code></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">matterMarkdownAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@elog/cli&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 自定义文档插件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {DocDetail}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> doc</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> doc的类型定义为 DocDetail</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {ImageClient}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageClient</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 图床下载器，可用于图片上传</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Promise&lt;DocDetail&gt;}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 返回处理后的文档对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> format</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">doc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">imageClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cover</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> doc.properties.cover</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 将 cover 字段中的 notion 图片下载到本地</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (imageClient </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cover)  {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 只有启用图床平台image.enable=true时或image.enablForExt=true，imageClient才能用，否则请自行实现图片上传</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uploadImageFromUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cover, doc)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // cover链接替换为本地图片</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    doc.properties.cover </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  doc.body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> matterMarkdownAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(doc);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> doc;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  format,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div>`,32),e=[l];function h(p,k,d,r,o,E){return a(),i("div",null,e)}const y=s(n,[["render",h]]);export{c as __pageData,y as default};
