import{_ as i,c as a,o as t,ah as n}from"./chunks/framework.BE6bf6oo.js";const g=JSON.parse('{"title":"部署平台配置","description":"","frontmatter":{"sort":110,"urlname":"deploy-platform","catalog":"配置详情","tags":"Elog-Docs","title":"部署平台配置","date":"2023-10-13 13:21:00","updated":"2024-09-03 00:09:00"},"headers":[],"relativePath":"notion/deploy-platform.md","filePath":"notion/deploy-platform.md","lastUpdated":1741190541000}'),l={name:"notion/deploy-platform.md"};function h(p,s,e,k,d,r){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="部署平台配置" tabindex="-1">部署平台配置 <a class="header-anchor" href="#部署平台配置" aria-label="Permalink to &quot;部署平台配置&quot;">​</a></h1><h2 id="本地部署-local" tabindex="-1">本地部署（local） <a class="header-anchor" href="#本地部署-local" aria-label="Permalink to &quot;本地部署（local）&quot;">​</a></h2><p>适用于所有类似 Hexo 的框架：通过向指定目录存放 markdown 文档来进行渲染的博客平台</p><table tabindex="0"><thead><tr><th>字段</th><th>必填</th><th>类型</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>outputDir</td><td>否</td><td>string</td><td>文档输出目录</td><td>-</td></tr><tr><td>filename</td><td>否</td><td>string</td><td>生成文档的命名格式，取值 urlname｜title</td><td>title</td></tr><tr><td>format</td><td>否</td><td>string</td><td>适配器，取值 markdown｜wiki｜html</td><td>markdown</td></tr><tr><td>frontMatter</td><td>否</td><td>FrontMatter</td><td>FrontMatter相关配置</td><td>-</td></tr><tr><td>catalog</td><td>否</td><td>boolean</td><td>是否按照目录生成文档</td><td>false</td></tr><tr><td>formatExt</td><td>否</td><td>string</td><td>自定义文档处理适配器路径</td><td>-</td></tr></tbody></table><h3 id="format-字段说明" tabindex="-1">Format 字段说明 <a class="header-anchor" href="#format-字段说明" aria-label="Permalink to &quot;Format 字段说明&quot;">​</a></h3><p><code>format</code>字段表示该文档内容的格式，常用的例如<code>markdown</code>或适用于 Confluence 的 <code>wiki</code>，适用于 Wordpress的 <code>html</code></p><h3 id="frontmatter-字段说明" tabindex="-1">FrontMatter 字段说明 <a class="header-anchor" href="#frontmatter-字段说明" aria-label="Permalink to &quot;FrontMatter 字段说明&quot;">​</a></h3><blockquote><p><code>0.12.0</code>及以上版本支持</p></blockquote><table tabindex="0"><thead><tr><th>字段</th><th>必填</th><th>类型</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>enable</td><td>否</td><td>boolean</td><td>是否启用 FrontMatter</td><td>false</td></tr><tr><td>include</td><td>否</td><td>string[]</td><td>只输出数组中存在的字段，数据库的其他字段忽略</td><td>-</td></tr><tr><td>exclude</td><td>否</td><td>string[]</td><td>忽略数组中存在的字段，输出数据库的其他字段</td><td>-</td></tr></tbody></table><blockquote><p>在 <code>0.12.0</code> 版本之前启用 FrontMatter 可设置 <code>local.format=matter-markdown</code></p></blockquote><h3 id="formatext-字段说明" tabindex="-1">FormatExt 字段说明 <a class="header-anchor" href="#formatext-字段说明" aria-label="Permalink to &quot;FormatExt 字段说明&quot;">​</a></h3><p>自定义文档处理适配器<code>.js</code>文件路径，当需要对文档进一步处理时，可配置此选项</p><ol><li><p>目前只支持 Common Js 标准的处理器</p></li><li><p>处理器需要暴露一个<strong>同步/异步</strong>的 <code>format</code> 的方法，在 <code>0.12.0</code> 之前版本<strong>仅支持同步方法</strong>，<code>0.12.0</code> 及以上版本可支持<strong>异步方法或 npm 库</strong></p></li><li><p>在 <code>0.12.0</code> 之前版本返回类型为<strong>字符串，</strong><code>0.12.0</code> 及以上版本返回<strong>传入的</strong> <strong>doc 文档对象</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0.12.0之前的版本用法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果需要返回带有front-matter的md字符串，则需要安装并引入此库</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// const { matterMarkdownAdapter } = require(&#39;@elog/cli&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 自定义文档处理器</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {DocDetail}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> doc</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> doc的类型定义为 DocDetail</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 返回处理后的文档内容字符串</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> format</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">doc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  doc.body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(body)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 直接返回md内容字符串</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> doc.body</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 返回带有front-matter的md字符串</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // return matterMarkdownAdapter(doc);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  format,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0.12.0及以上版本用法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">matterMarkdownAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@elog/cli&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 自定义文档插件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {DocDetail}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> doc</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> doc的类型定义为 DocDetail</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {ImageClient}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageClient</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 图床下载器，可用于图片上传</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Promise&lt;DocDetail&gt;}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 返回处理后的文档对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> format</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">doc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">imageClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cover</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> doc.properties.cover</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 将 cover 字段中的 notion 图片下载到本地</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (imageClient </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cover)  {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 只有启用图床平台image.enable=true时，imageClient才能用，否则请自行实现图片上传</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uploadImageFromUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cover, doc)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // cover链接替换为本地图片</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    doc.properties.cover </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  doc.body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> matterMarkdownAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(doc);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> doc;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  format,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p><strong>DocDetail 类型定义如下：</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** 文章详情 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DocDetail</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BaseDoc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /** 实际部署时的markdown文档字符串 */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /** 原始markdown文档字符串 */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  body_original</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /** 部署到wiki时会存在 */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  body_wiki</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /** html字符串 */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  body_html</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /** 文章属性 */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  properties</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DocProperties</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /** 目录路径 */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  catalog</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BaseDoc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /** 文章唯一ID */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /** 文章ID */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  doc_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /** 更新时间，冗余字段 */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  updated</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** 文章属性 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DocProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  urlname</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  updated</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [key: string]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><h2 id="halo" tabindex="-1">Halo <a class="header-anchor" href="#halo" aria-label="Permalink to &quot;Halo&quot;">​</a></h2><p>Halo 关键信息获取及配置流程请移步 <a href="/notion/gvnxobqogetukays#halo">关键信息获取</a> 页面。</p><blockquote><p><code>0.13.0</code>及以上版本支持</p></blockquote><table tabindex="0"><thead><tr><th>字段</th><th>必填</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>endpoint</td><td>是</td><td>站点地址，区分 http/https</td><td>-</td></tr><tr><td>token</td><td>是</td><td>Halo 个人令牌</td><td>-</td></tr><tr><td>policyName</td><td>否</td><td>存储策略</td><td>default-policy</td></tr><tr><td>rowType</td><td>否</td><td>源文档格式，取值 html/markdown</td><td>html</td></tr><tr><td>needUploadImage</td><td>否</td><td>是否将文档图片上传到 Halo</td><td>false</td></tr><tr><td>formatExt</td><td>否</td><td>自定义文档处理适配器路径，需要符合HTML格式要求</td><td>-</td></tr></tbody></table><h3 id="rowtype-字段说明" tabindex="-1">rowType 字段说明 <a class="header-anchor" href="#rowtype-字段说明" aria-label="Permalink to &quot;rowType 字段说明&quot;">​</a></h3><p><strong>如果使用 Elog 进行同步，建议不要在 Halo 后台编辑文档，文档的编辑应该交给写作平台来处理</strong></p><p><a href="https://github.com/halo-dev/halo/issues/4936#issuecomment-1830199955" target="_blank" rel="noreferrer">根据 Halo 社区说明</a>：</p><p>Halo 的默认编辑器是富文本编辑器，<code>rawType</code> 为 <code>html</code>，<code>rawType</code> 的意义在于让 Halo 知道文章应该用什么源格式的编辑器进行编辑。</p><p>Halo 本身没有自带 Markdown 编辑器，需要用户自行安装，所有的编辑器插件可以在 <a href="https://www.halo.run/store/apps?type=PLUGIN" target="_blank" rel="noreferrer">Halo插件市场</a> 中找到。</p><p>此外，在 <code>rawType</code> 设置为 <code>markdown</code> 且系统中并没有 <code>markdown</code> 类型的编辑器时，进入文章编辑会给出提示：</p><p><img src="https://image.1874.cool/elog-docs-images/41c42ad20e6a991276ff2cdb6786c521.png" alt="Untitled.png"></p><h3 id="needuploadimage-字段说明" tabindex="-1">needUploadImage 字段说明 <a class="header-anchor" href="#needuploadimage-字段说明" aria-label="Permalink to &quot;needUploadImage 字段说明&quot;">​</a></h3><p>是否将文档图片上传到 Halo中存储。此外，建议该设置与图床设置，二选一即可。如果你开启了图床，将文档图片上传到 oss 之类的图床上，就没必要开启 Halo 图片上传，再从 oss 上传图片到 Halo。</p><h3 id="formatext-字段说明-1" tabindex="-1">FormatExt 字段说明 <a class="header-anchor" href="#formatext-字段说明-1" aria-label="Permalink to &quot;FormatExt 字段说明&quot;">​</a></h3><p>自定义文档处理适配器<code>.js</code>文件路径，当需要对文档进一步处理时，可配置此选项</p><ol><li>目前只支持 Common Js 标准的处理器</li><li>处理器需要暴露一个<strong>同步/异步</strong>的 <code>format</code> 的方法或 npm 库</li><li>需要返回<strong>传入的</strong> <strong>doc 文档对象</strong></li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">htmlAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@elog/cli&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 自定义文档插件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {DocDetail}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> doc</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> doc的类型定义为 DocDetail</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {ImageClient}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageClient</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 图床下载器，可用于图片上传</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Promise&lt;DocDetail&gt;}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 返回处理后的文档对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> format</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">doc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">imageClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cover</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> doc.properties.cover</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 将 cover 字段中的 notion 图片下载到本地</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (imageClient </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cover)  {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 只有启用图床平台image.enable=true时，imageClient才能用，否则请自行实现图片上传</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uploadImageFromUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cover, doc)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // cover链接替换为本地图片</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    doc.properties.cover </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  doc.body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> htmlAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(doc);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> doc;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  format,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="confluence" tabindex="-1">Confluence <a class="header-anchor" href="#confluence" aria-label="Permalink to &quot;Confluence&quot;">​</a></h2><table tabindex="0"><thead><tr><th>字段</th><th>必填</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>baseUrl</td><td>是</td><td>Confluence API 请求 Base Url</td><td>-</td></tr><tr><td>spaceKey</td><td>是</td><td>空间Key</td><td>-</td></tr><tr><td>rootPageId</td><td>是</td><td>根页面ID，Elog会把文档统一存到此目录下</td><td>-</td></tr><tr><td>user</td><td>是</td><td>Confluence账号</td><td>-</td></tr><tr><td>password</td><td>是</td><td>Confluence密码</td><td>-</td></tr><tr><td>formatExt</td><td>否</td><td>自定义文档处理适配器路径，需要符合Confluence格式要求</td><td>-</td></tr></tbody></table><h2 id="wordpress" tabindex="-1">WordPress <a class="header-anchor" href="#wordpress" aria-label="Permalink to &quot;WordPress&quot;">​</a></h2><p>WordPress 模版获取、关键信息获取及配置流程请移步 <a href="/notion/gvnxobqogetukays#wordpres">关键信息获取</a> 页面。</p><table tabindex="0"><thead><tr><th>字段</th><th>必填</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>username</td><td>是</td><td>WordPress 用户名</td><td>-</td></tr><tr><td>password</td><td>是</td><td>WordPress 密码</td><td>-</td></tr><tr><td>endpoint</td><td>是</td><td>WordPress 站点，例如<a href="http://your.site.com/wp-json" target="_blank" rel="noreferrer">http://your.site.com/wp-json</a></td><td>-</td></tr><tr><td>keyMap</td><td>否</td><td>属性映射</td><td>-</td></tr><tr><td>formatExt</td><td>否</td><td>自定义文档处理适配器路径，需要符合HTML格式要求</td><td>-</td></tr></tbody></table><h3 id="keymap-字段说明" tabindex="-1">keyMap 字段说明 <a class="header-anchor" href="#keymap-字段说明" aria-label="Permalink to &quot;keyMap 字段说明&quot;">​</a></h3><table tabindex="0"><thead><tr><th>属性</th><th>必填</th><th>映射字段说明</th><th>字段值类型</th><th>默认值</th></tr></thead><tbody><tr><td>tags</td><td>否</td><td>标签字段映射</td><td>string ｜ string[]</td><td>tags</td></tr><tr><td>categories</td><td>否</td><td>分类字段映射</td><td>string ｜ string[]</td><td>categories</td></tr><tr><td>urlname</td><td>否</td><td>页面路径字段映射</td><td>string</td><td>urlname</td></tr><tr><td>cover</td><td>否</td><td>特色图片（封面图）字段映射</td><td>string，图片url</td><td>cover</td></tr><tr><td>description</td><td></td><td>简介字段映射</td><td>string</td><td>description</td></tr></tbody></table><p>一般不需要修改，只要保证文章属性<code>front-matter</code>中有以上字段，即可在上传到WordPress时正确携带，只有字段冲突或者想自定义为中文等情况下才需要进行映射。</p><p>语雀需要自行在文章头部添加<code>front-matter</code>，并填写以下值，Notion/FlowUs可直接新增/修改为以上字段即可。</p><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p><strong>点击</strong> <a href="/notion/image-platform">下一篇</a> <strong>继续配置图床平台</strong></p>`,41)]))}const c=i(l,[["render",h]]);export{g as __pageData,c as default};
