import{_ as s,c as a,o as i,V as e}from"./chunks/framework.qmJTxtaM.js";const u=JSON.parse('{"title":"常见问题","description":"","frontmatter":{"sort":50,"urlname":"qa","catalog":"关于Elog","tags":"Elog-Docs","title":"常见问题","date":"2023-07-23 03:37:00","updated":"2023-12-21 17:19:00"},"headers":[],"relativePath":"notion/qa.md","filePath":"notion/qa.md","lastUpdated":1706444248000}'),l={name:"notion/qa.md"},n=e(`<h1 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h1><p><strong>大部分问题都可以在文档中找到解决办法，请优先从</strong> <a href="/notion/start">快速开始</a> <strong>阅读文档，再进行实际操作。</strong></p><p>如果还是运行报错，请 <a href="https://github.com/LetTTGACO/elog/issues/new/choose" target="_blank" rel="noreferrer">提交 issue</a> 或在 <a href="https://github.com/LetTTGACO/elog/discussions/categories/q-a" target="_blank" rel="noreferrer">discussions 中留言</a></p><h2 id="配置问题" tabindex="-1">配置问题 <a class="header-anchor" href="#配置问题" aria-label="Permalink to &quot;配置问题&quot;">​</a></h2><p><code>elog.config.js</code>为 Elog 的配置文件，其中以 <code>process.env</code>开头的不需要改动，且为<strong>必填信息。</strong></p><p>例如 <code>process.env.YUQUE_TOKEN</code>为语雀账号相关敏感信息，用于本地同步时在<code>.elog.env</code>中指定<code>YUQUE_TOKEN=你的语雀 Token</code>，其他配置可根据实际需求改动。</p><h2 id="elog-运行报缺少参数" tabindex="-1">Elog 运行报缺少参数 <a class="header-anchor" href="#elog-运行报缺少参数" aria-label="Permalink to &quot;Elog 运行报缺少参数&quot;">​</a></h2><ol><li>检查 <code>elog.config.js</code>中所有 <code>platform</code> 属性的值是否是你对应平台的值。例如如果想用语雀 Token 的方式同步语雀文档，则 <code>write.platform = yuque</code>；如果是使用语雀账号密码的方式，则<code>write.platform = yuque-pwd</code></li><li>检查<code>.elog.env</code>中是否填写账号信息。无论用哪种方式同步语雀，<code>.elog.env</code>中的<code>YUQUE_LOGIN</code>和<code>YUQUE_REPO</code>都是必填参数。其他必填参数请看本文档相关配置表格中的是否必填字段</li></ol><h2 id="如何重新全量同步文档" tabindex="-1">如何重新全量同步文档 <a class="header-anchor" href="#如何重新全量同步文档" aria-label="Permalink to &quot;如何重新全量同步文档&quot;">​</a></h2><p>elog 默认为增量更新，只有该文档重新修改过，再次同步时，才会重新拉取该文档。如果想重新全量同步文档。有以下 3 种办法：</p><ol><li>运行同步命令时，增加禁用缓存标识：<code>elog sync --disable-cache</code></li><li>运行 <code>elog clean</code>，Elog 将会自动清除所有文档、本地图片、缓存文件<code>(elog.cache.json)</code></li><li><code>elog.cache.json</code>为 Elog 增量同步的关键，可<strong>手动删除</strong>此文件，推荐同时手动删除所有文档、本地图片</li></ol><h2 id="语雀-飞书子目录没有导出" tabindex="-1">语雀/飞书子目录没有导出 <a class="header-anchor" href="#语雀-飞书子目录没有导出" aria-label="Permalink to &quot;语雀/飞书子目录没有导出&quot;">​</a></h2><p>默认是没有按目录导出的，可通过配置开启：<a href="/notion/xe160pqsumi6bqnz">按目录存放文档</a></p><h2 id="如何升级-elog-到指定版本" tabindex="-1">如何升级 Elog 到指定版本 <a class="header-anchor" href="#如何升级-elog-到指定版本" aria-label="Permalink to &quot;如何升级 Elog 到指定版本&quot;">​</a></h2><ol><li><p>运行<code>elog upgrade</code>更新全局 Elog 版本到最新正式版本</p></li><li><p>如果你是通过包管理工具（<code>npm/yarn/pnpm</code>）全局安装的 Elog，则重新安装并指定版本号</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install @elog/cli@0.9.1 -g</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 也可以指定测试版本号</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install @elog/cli@0.9.1-beta.4 -g</span></span></code></pre></div></li><li><p>如果你是将 Elog安装在 <code>package.json</code> 中，则修改<code>package.json</code>中的<code>@elog/cli</code>版本号</p></li></ol><h2 id="全局安装和局部安装-elog-的区别" tabindex="-1">全局安装和局部安装 Elog 的区别 <a class="header-anchor" href="#全局安装和局部安装-elog-的区别" aria-label="Permalink to &quot;全局安装和局部安装 Elog 的区别&quot;">​</a></h2><h3 id="全局安装-elog" tabindex="-1">全局安装 Elog <a class="header-anchor" href="#全局安装-elog" aria-label="Permalink to &quot;全局安装 Elog&quot;">​</a></h3><p><strong>全局安装</strong>指的是为电脑的全局环境安装，安装后可以在任意文件夹使用 Elog 相关命令。全局安装时需要指定 <code>-g</code> 参数，例如</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 全局安装 elog 最新正式版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install @elog/cli -g</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 也可以指定测试版本号全局安装</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install @elog/cli@0.11.0-beta.1 -g</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看当前 elog 版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">elog</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行同步</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">elog</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sync -e .elog.env</span></span></code></pre></div><p>全局安装一般适用于本地同步时使用，如果想结合 Github Actions 实现自动化文档同步，建议采取<strong>局部安装</strong>的方式</p><h3 id="局部安装-elog" tabindex="-1">局部安装 Elog <a class="header-anchor" href="#局部安装-elog" aria-label="Permalink to &quot;局部安装 Elog&quot;">​</a></h3><p><strong>局部安装</strong>指的是为指定文件夹下的环境安装Elog，需要结合 <a href="https://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="noreferrer">npm 相关知识点</a>，将 Elog 安装在<code>package.json</code>中。局部安装不需要指定<code>-g</code>参数，例如</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 局部安装 elog 最新正式版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install @elog/cli</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 也可以指定测试版本号局部安装</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install @elog/cli@0.11.0-beta.1</span></span></code></pre></div><p>安装在 <code>package.json</code>中的 Elog 在使用时需要提前在<code>npm scripts</code>中指定相关运行命令，例如</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vitepress or hexo 或者其他自定义的命令，具体以自己的工具为准&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 构建文档</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;sync:local&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;elog sync -e .elog.env&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 本地同步时需要从env中取值</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;sync&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;elog sync&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 进行同步</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;clean&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;elog clean&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>然后就可以命令行下使用<code>npm run</code>命令，执行提前定义的脚本</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run sync:local</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 命令等同于执行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">elog</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sync -e .elog.env</span></span></code></pre></div><blockquote><p><code>npm run</code>执行时会使用安装在 <code>package.json</code>中的 Elog 版本。而直接使用<code>elog sync -e .elog.env</code>使用的是安装在电脑全局环境的 Elog，需要注意区分。<br> 如果你两种方式都安装了，尽量保证全局 Elog 版本和<code>package.json</code>中的 Elog 版本保持一致</p></blockquote><p>局部安装 Elog 的好处在于，如果你使用的是<code>vitepress/hexo</code> 等基于 JavaScript 的博客平台，那么他们天然会有 <code>package.json</code>文件。你只需要<code>npm install @elog/cli</code>局部安装 Elog，然后配置相关命令脚本，<code>npm run</code>运行同步命令即可。而使用 Github Actions 也不用额外全局安装 <code>@elog/cli</code> 了</p><p>总之，如果你不准备使用 Github Actions，则全局安装 Elog 即可。</p><p>如果你需要结合 Github Actions实现文档自动化更新，请先阅读<a href="https://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="noreferrer">阮一峰的npm scripts 使用指南</a>，再进行实践，并结合大家的最佳实践来操作。</p><h2 id="如何同步多个知识库-数据表" tabindex="-1">如何同步多个知识库/数据表 <a class="header-anchor" href="#如何同步多个知识库-数据表" aria-label="Permalink to &quot;如何同步多个知识库/数据表&quot;">​</a></h2><p>在语雀中， Elog 是以知识库为维度进行同步，一次只能同步一个知识库。</p><p>如果想要同时同步多个知识库：</p><ol><li><p>复制<code>elog.config.js</code> 和<code>.elog.env</code>，并改名为<code>elog-xxx.config.js</code>和<code>.elog-xxx.env</code>；</p></li><li><p>在<code>elog-xxx.config.js</code>配置文件中指定另外一个知识库的导出目录(<code>deploy.local.outputDir</code>)；</p></li><li><p>在<code>.elog-xxx.env</code>指定另一个知识库的 <code>repo、login</code>等相关值。</p></li><li><p>并在运行同步命令时指定相关参数：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 此命令表示，将使用.elog-xxx.env中的账号信息，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定读取elog-xxx.config.js中的配置，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 并将缓存文件命名为elog-xxx.cache.json</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">elog</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sync -e .elog-xxx.env -a elog-xxx.cache.json -c elog-xxx.config.js</span></span></code></pre></div></li></ol><p>在 Notion 或其他写作平台也是如此，需要指定不同的配置文件<code>(elog.config.js)</code>、缓存文件<code>(elog.cache.json)</code>、本地环境变量文件<code>(.elog.env)</code>。</p><blockquote><p>如果有使用 github，请不要将<code>.elog.env</code>配置文件上传到 github，需要在<code>.gitignore</code>中忽略此文件</p></blockquote><p>具体可参考 本文档（Elog-Docs）源码：<a href="https://github.com/LetTTGACO/elog-docs" target="_blank" rel="noreferrer">https://github.com/LetTTGACO/elog-docs</a></p><h2 id="elog运行时找不到该命令" tabindex="-1">elog运行时找不到该命令 <a class="header-anchor" href="#elog运行时找不到该命令" aria-label="Permalink to &quot;elog运行时找不到该命令&quot;">​</a></h2><ol><li>检查是否<a href="/notion/start#cli-工具安装">全局安装过 elog</a></li><li>重启命令行工具，如果全局安装过也运行不了，大概率是命令行工具的配置的问题。可采用备用方案：将<code>elog</code>运行命令改为<code>npx @elog/cli</code></li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 初始化 elog 配置文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @elog/cli init</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 本地同步命令</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @elog/cli sync -e .elog.env</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 清除本地缓存</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @elog/cli clean</span></span></code></pre></div><h2 id="同步时卡住不动" tabindex="-1">同步时卡住不动 <a class="header-anchor" href="#同步时卡住不动" aria-label="Permalink to &quot;同步时卡住不动&quot;">​</a></h2><ul><li>在Github自动化流程中同步卡住</li><li>本地同步运行时卡住</li><li>图片下载时卡住</li><li>文档下载时卡住</li></ul><h3 id="解决办法" tabindex="-1">解决办法 <a class="header-anchor" href="#解决办法" aria-label="Permalink to &quot;解决办法&quot;">​</a></h3><p>在全量同步时，因为语雀/FlowUs为国内平台，有时会在Github等国外环境运行时由于网络问题卡住。此时可以在本地先手动运行一遍，提交缓存文件到Github，后续的增量同步会快很多。相反用Notion在本地进行同步时，也有同样的问题，放在Github同步就会快很多。</p><p>还有一种可能是由于需要同步的文档中的新图片数量太多，所以每次都是新增上传图片到CDN，会导致整体的流程变慢甚至失败。因为Elog会检测图片在CDN是否已经上传过，可以多试几次。</p><p>由于Notion的API在大部分情况下都很慢，甚至会下载文档失败。这是官方的问题，可以选择降低Notion下载文档时的并发数（默认为3）。在Elog配置文件中设置<code>write.notion.limit=1</code>，降低文档下载并发数，也可多试几次。</p><h2 id="同步时报超时错误" tabindex="-1">同步时报超时错误 <a class="header-anchor" href="#同步时报超时错误" aria-label="Permalink to &quot;同步时报超时错误&quot;">​</a></h2><ul><li>下载文档超时</li><li>下载图片超时</li></ul><h3 id="解决办法-1" tabindex="-1">解决办法 <a class="header-anchor" href="#解决办法-1" aria-label="Permalink to &quot;解决办法&quot;">​</a></h3><p>默认超时时间为60s，如果经常超时，可配置环境变量<code>process.env.REQUEST_TIMEOUT</code>，增加请求超时时间。</p><p>本地同步时，在.elog.env文件新增<code>REQUEST_TIMEOUT=900000</code>，设置更大的超时时间</p><p>在CI/CD中，可在自动化平台注入同样的环境变量即可</p><p>如果遇到图片下载失败，可升级到Elog最新版<code>@elog/cli@0.7.2</code>及以上版本，Elog会在上次同步时某文章存在图片下载失败时，第二次同步会重新尝试同步该文章</p><h2 id="elog主要功能是批量导出" tabindex="-1">Elog主要功能是批量导出 <a class="header-anchor" href="#elog主要功能是批量导出" aria-label="Permalink to &quot;Elog主要功能是批量导出&quot;">​</a></h2><p>Elog在大部分场景下都只是一个批量导出<code>markdown</code>工具，不涉及部署、数据库等功能。</p><p>自动化部署、博客平台的路由配置、自定义属性等功能，都是需要各种软件/脚本辅助完成。</p><p>不可否认，配置Elog，特别是一定的复杂场景，确实需要一定的代码基础知识，但Elog的其中一个目标也是尽可能地提供开箱即用的配置支持，降低配置的复杂度。</p><p>在Elog还没进化到这种程度之前，还是需要大家尽量熟悉Elog使用文档。</p>`,59),o=[n];function t(p,h,c,d,g,r){return i(),a("div",null,o)}const E=s(l,[["render",t]]);export{u as __pageData,E as default};
